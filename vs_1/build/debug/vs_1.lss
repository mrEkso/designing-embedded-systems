
build/debug/vs_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000137c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800143c  0800143c  0000243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080014c0  080014c0  000024c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080014c4  080014c4  000024c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080014c8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  20000010  080014d8  00003010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e0  080014d8  000030e0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b84e  00000000  00000000  00003071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001a1c  00000000  00000000  0000e8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000760  00000000  00000000  000102e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000005f8  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00008d07  00000000  00000000  00011038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00002798  00000000  00000000  00019d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00001134  00000000  00000000  0001c4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000043f1  00000000  00000000  0001d60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000198  00000000  00000000  000219fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__udivsi3>:
 80000c0:	2200      	movs	r2, #0
 80000c2:	0843      	lsrs	r3, r0, #1
 80000c4:	428b      	cmp	r3, r1
 80000c6:	d374      	bcc.n	80001b2 <__udivsi3+0xf2>
 80000c8:	0903      	lsrs	r3, r0, #4
 80000ca:	428b      	cmp	r3, r1
 80000cc:	d35f      	bcc.n	800018e <__udivsi3+0xce>
 80000ce:	0a03      	lsrs	r3, r0, #8
 80000d0:	428b      	cmp	r3, r1
 80000d2:	d344      	bcc.n	800015e <__udivsi3+0x9e>
 80000d4:	0b03      	lsrs	r3, r0, #12
 80000d6:	428b      	cmp	r3, r1
 80000d8:	d328      	bcc.n	800012c <__udivsi3+0x6c>
 80000da:	0c03      	lsrs	r3, r0, #16
 80000dc:	428b      	cmp	r3, r1
 80000de:	d30d      	bcc.n	80000fc <__udivsi3+0x3c>
 80000e0:	22ff      	movs	r2, #255	@ 0xff
 80000e2:	0209      	lsls	r1, r1, #8
 80000e4:	ba12      	rev	r2, r2
 80000e6:	0c03      	lsrs	r3, r0, #16
 80000e8:	428b      	cmp	r3, r1
 80000ea:	d302      	bcc.n	80000f2 <__udivsi3+0x32>
 80000ec:	1212      	asrs	r2, r2, #8
 80000ee:	0209      	lsls	r1, r1, #8
 80000f0:	d065      	beq.n	80001be <__udivsi3+0xfe>
 80000f2:	0b03      	lsrs	r3, r0, #12
 80000f4:	428b      	cmp	r3, r1
 80000f6:	d319      	bcc.n	800012c <__udivsi3+0x6c>
 80000f8:	e000      	b.n	80000fc <__udivsi3+0x3c>
 80000fa:	0a09      	lsrs	r1, r1, #8
 80000fc:	0bc3      	lsrs	r3, r0, #15
 80000fe:	428b      	cmp	r3, r1
 8000100:	d301      	bcc.n	8000106 <__udivsi3+0x46>
 8000102:	03cb      	lsls	r3, r1, #15
 8000104:	1ac0      	subs	r0, r0, r3
 8000106:	4152      	adcs	r2, r2
 8000108:	0b83      	lsrs	r3, r0, #14
 800010a:	428b      	cmp	r3, r1
 800010c:	d301      	bcc.n	8000112 <__udivsi3+0x52>
 800010e:	038b      	lsls	r3, r1, #14
 8000110:	1ac0      	subs	r0, r0, r3
 8000112:	4152      	adcs	r2, r2
 8000114:	0b43      	lsrs	r3, r0, #13
 8000116:	428b      	cmp	r3, r1
 8000118:	d301      	bcc.n	800011e <__udivsi3+0x5e>
 800011a:	034b      	lsls	r3, r1, #13
 800011c:	1ac0      	subs	r0, r0, r3
 800011e:	4152      	adcs	r2, r2
 8000120:	0b03      	lsrs	r3, r0, #12
 8000122:	428b      	cmp	r3, r1
 8000124:	d301      	bcc.n	800012a <__udivsi3+0x6a>
 8000126:	030b      	lsls	r3, r1, #12
 8000128:	1ac0      	subs	r0, r0, r3
 800012a:	4152      	adcs	r2, r2
 800012c:	0ac3      	lsrs	r3, r0, #11
 800012e:	428b      	cmp	r3, r1
 8000130:	d301      	bcc.n	8000136 <__udivsi3+0x76>
 8000132:	02cb      	lsls	r3, r1, #11
 8000134:	1ac0      	subs	r0, r0, r3
 8000136:	4152      	adcs	r2, r2
 8000138:	0a83      	lsrs	r3, r0, #10
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x82>
 800013e:	028b      	lsls	r3, r1, #10
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0a43      	lsrs	r3, r0, #9
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x8e>
 800014a:	024b      	lsls	r3, r1, #9
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0a03      	lsrs	r3, r0, #8
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x9a>
 8000156:	020b      	lsls	r3, r1, #8
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	d2cd      	bcs.n	80000fa <__udivsi3+0x3a>
 800015e:	09c3      	lsrs	r3, r0, #7
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__udivsi3+0xa8>
 8000164:	01cb      	lsls	r3, r1, #7
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0983      	lsrs	r3, r0, #6
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__udivsi3+0xb4>
 8000170:	018b      	lsls	r3, r1, #6
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0943      	lsrs	r3, r0, #5
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__udivsi3+0xc0>
 800017c:	014b      	lsls	r3, r1, #5
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0903      	lsrs	r3, r0, #4
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__udivsi3+0xcc>
 8000188:	010b      	lsls	r3, r1, #4
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	08c3      	lsrs	r3, r0, #3
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__udivsi3+0xd8>
 8000194:	00cb      	lsls	r3, r1, #3
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0883      	lsrs	r3, r0, #2
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xe4>
 80001a0:	008b      	lsls	r3, r1, #2
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xf0>
 80001ac:	004b      	lsls	r3, r1, #1
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	1a41      	subs	r1, r0, r1
 80001b4:	d200      	bcs.n	80001b8 <__udivsi3+0xf8>
 80001b6:	4601      	mov	r1, r0
 80001b8:	4152      	adcs	r2, r2
 80001ba:	4610      	mov	r0, r2
 80001bc:	4770      	bx	lr
 80001be:	e7ff      	b.n	80001c0 <__udivsi3+0x100>
 80001c0:	b501      	push	{r0, lr}
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 f806 	bl	80001d4 <__aeabi_idiv0>
 80001c8:	bd02      	pop	{r1, pc}
 80001ca:	46c0      	nop			@ (mov r8, r8)

080001cc <__aeabi_uidivmod>:
 80001cc:	2900      	cmp	r1, #0
 80001ce:	d0f7      	beq.n	80001c0 <__udivsi3+0x100>
 80001d0:	e776      	b.n	80000c0 <__udivsi3>
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_idiv0>:
 80001d4:	4770      	bx	lr
 80001d6:	46c0      	nop			@ (mov r8, r8)

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c06      	ldr	r4, [pc, #24]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d107      	bne.n	80001f2 <__do_global_dtors_aux+0x1a>
 80001e2:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <__do_global_dtors_aux+0x16>
 80001e8:	4804      	ldr	r0, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x24>)
 80001ea:	e000      	b.n	80001ee <__do_global_dtors_aux+0x16>
 80001ec:	bf00      	nop
 80001ee:	2301      	movs	r3, #1
 80001f0:	7023      	strb	r3, [r4, #0]
 80001f2:	bd10      	pop	{r4, pc}
 80001f4:	20000010 	.word	0x20000010
 80001f8:	00000000 	.word	0x00000000
 80001fc:	08001424 	.word	0x08001424

08000200 <frame_dummy>:
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <frame_dummy+0x14>)
 8000202:	b510      	push	{r4, lr}
 8000204:	2b00      	cmp	r3, #0
 8000206:	d003      	beq.n	8000210 <frame_dummy+0x10>
 8000208:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x18>)
 800020a:	4804      	ldr	r0, [pc, #16]	@ (800021c <frame_dummy+0x1c>)
 800020c:	e000      	b.n	8000210 <frame_dummy+0x10>
 800020e:	bf00      	nop
 8000210:	bd10      	pop	{r4, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08001424 	.word	0x08001424

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000224:	ac05      	add	r4, sp, #20
 8000226:	2214      	movs	r2, #20
 8000228:	2100      	movs	r1, #0
 800022a:	0020      	movs	r0, r4
 800022c:	f001 f8cd 	bl	80013ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000230:	4b18      	ldr	r3, [pc, #96]	@ (8000294 <MX_GPIO_Init+0x74>)
 8000232:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000234:	2204      	movs	r2, #4
 8000236:	4311      	orrs	r1, r2
 8000238:	6359      	str	r1, [r3, #52]	@ 0x34
 800023a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800023c:	400a      	ands	r2, r1
 800023e:	9201      	str	r2, [sp, #4]
 8000240:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000242:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000244:	2220      	movs	r2, #32
 8000246:	4311      	orrs	r1, r2
 8000248:	6359      	str	r1, [r3, #52]	@ 0x34
 800024a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800024c:	400a      	ands	r2, r1
 800024e:	9202      	str	r2, [sp, #8]
 8000250:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000254:	2602      	movs	r6, #2
 8000256:	4332      	orrs	r2, r6
 8000258:	635a      	str	r2, [r3, #52]	@ 0x34
 800025a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800025c:	4032      	ands	r2, r6
 800025e:	9203      	str	r2, [sp, #12]
 8000260:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000264:	2501      	movs	r5, #1
 8000266:	432a      	orrs	r2, r5
 8000268:	635a      	str	r2, [r3, #52]	@ 0x34
 800026a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800026c:	402b      	ands	r3, r5
 800026e:	9304      	str	r3, [sp, #16]
 8000270:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000272:	4f09      	ldr	r7, [pc, #36]	@ (8000298 <MX_GPIO_Init+0x78>)
 8000274:	2200      	movs	r2, #0
 8000276:	2102      	movs	r1, #2
 8000278:	0038      	movs	r0, r7
 800027a:	f000 fa49 	bl	8000710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800027e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000280:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000282:	2300      	movs	r3, #0
 8000284:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000286:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000288:	0021      	movs	r1, r4
 800028a:	0038      	movs	r0, r7
 800028c:	f000 f962 	bl	8000554 <HAL_GPIO_Init>

}
 8000290:	b00b      	add	sp, #44	@ 0x2c
 8000292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	50000400 	.word	0x50000400

0800029c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800029c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800029e:	e7fe      	b.n	800029e <Error_Handler+0x2>

080002a0 <SystemClock_Config>:
{
 80002a0:	b510      	push	{r4, lr}
 80002a2:	b08c      	sub	sp, #48	@ 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a4:	ac05      	add	r4, sp, #20
 80002a6:	221c      	movs	r2, #28
 80002a8:	2100      	movs	r1, #0
 80002aa:	0020      	movs	r0, r4
 80002ac:	f001 f88d 	bl	80013ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	2214      	movs	r2, #20
 80002b2:	2100      	movs	r1, #0
 80002b4:	4668      	mov	r0, sp
 80002b6:	f001 f888 	bl	80013ca <memset>
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80002ba:	4912      	ldr	r1, [pc, #72]	@ (8000304 <SystemClock_Config+0x64>)
 80002bc:	680b      	ldr	r3, [r1, #0]
 80002be:	2207      	movs	r2, #7
 80002c0:	4393      	bics	r3, r2
 80002c2:	3a06      	subs	r2, #6
 80002c4:	4313      	orrs	r3, r2
 80002c6:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c8:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ca:	2380      	movs	r3, #128	@ 0x80
 80002cc:	025b      	lsls	r3, r3, #9
 80002ce:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	0020      	movs	r0, r4
 80002d2:	f000 fa43 	bl	800075c <HAL_RCC_OscConfig>
 80002d6:	2800      	cmp	r0, #0
 80002d8:	d10f      	bne.n	80002fa <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	4668      	mov	r0, sp
 80002dc:	2307      	movs	r3, #7
 80002de:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002e0:	3b06      	subs	r3, #6
 80002e2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002e8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002ea:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ec:	2101      	movs	r1, #1
 80002ee:	f000 fbc1 	bl	8000a74 <HAL_RCC_ClockConfig>
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d103      	bne.n	80002fe <SystemClock_Config+0x5e>
}
 80002f6:	b00c      	add	sp, #48	@ 0x30
 80002f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80002fa:	f7ff ffcf 	bl	800029c <Error_Handler>
    Error_Handler();
 80002fe:	f7ff ffcd 	bl	800029c <Error_Handler>
 8000302:	46c0      	nop			@ (mov r8, r8)
 8000304:	40022000 	.word	0x40022000

08000308 <main>:
{
 8000308:	b510      	push	{r4, lr}
  HAL_Init();
 800030a:	f000 f855 	bl	80003b8 <HAL_Init>
  SystemClock_Config();
 800030e:	f7ff ffc7 	bl	80002a0 <SystemClock_Config>
  MX_GPIO_Init();
 8000312:	f7ff ff85 	bl	8000220 <MX_GPIO_Init>
  BSP_LED_Init(LED_GREEN);
 8000316:	2000      	movs	r0, #0
 8000318:	f000 ff56 	bl	80011c8 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800031c:	2101      	movs	r1, #1
 800031e:	2000      	movs	r0, #0
 8000320:	f000 ff94 	bl	800124c <BSP_PB_Init>
  BspCOMInit.BaudRate   = 115200;
 8000324:	490c      	ldr	r1, [pc, #48]	@ (8000358 <main+0x50>)
 8000326:	23e1      	movs	r3, #225	@ 0xe1
 8000328:	025b      	lsls	r3, r3, #9
 800032a:	600b      	str	r3, [r1, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800032c:	2300      	movs	r3, #0
 800032e:	604b      	str	r3, [r1, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000330:	810b      	strh	r3, [r1, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000332:	814b      	strh	r3, [r1, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000334:	818b      	strh	r3, [r1, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000336:	2000      	movs	r0, #0
 8000338:	f000 fffc 	bl	8001334 <BSP_COM_Init>
 800033c:	2800      	cmp	r0, #0
 800033e:	d108      	bne.n	8000352 <main+0x4a>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000340:	2102      	movs	r1, #2
 8000342:	4806      	ldr	r0, [pc, #24]	@ (800035c <main+0x54>)
 8000344:	f000 f9ea 	bl	800071c <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8000348:	20fa      	movs	r0, #250	@ 0xfa
 800034a:	0040      	lsls	r0, r0, #1
 800034c:	f000 f852 	bl	80003f4 <HAL_Delay>
  while (1)
 8000350:	e7f6      	b.n	8000340 <main+0x38>
    Error_Handler();
 8000352:	f7ff ffa3 	bl	800029c <Error_Handler>
 8000356:	46c0      	nop			@ (mov r8, r8)
 8000358:	2000002c 	.word	0x2000002c
 800035c:	50000400 	.word	0x50000400

08000360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000360:	b510      	push	{r4, lr}
 8000362:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <HAL_InitTick+0x4c>)
 8000366:	7819      	ldrb	r1, [r3, #0]
 8000368:	2900      	cmp	r1, #0
 800036a:	d101      	bne.n	8000370 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800036c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800036e:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000370:	20fa      	movs	r0, #250	@ 0xfa
 8000372:	0080      	lsls	r0, r0, #2
 8000374:	f7ff fea4 	bl	80000c0 <__udivsi3>
 8000378:	0001      	movs	r1, r0
 800037a:	4b0d      	ldr	r3, [pc, #52]	@ (80003b0 <HAL_InitTick+0x50>)
 800037c:	6818      	ldr	r0, [r3, #0]
 800037e:	f7ff fe9f 	bl	80000c0 <__udivsi3>
 8000382:	f000 f8a5 	bl	80004d0 <HAL_SYSTICK_Config>
 8000386:	2800      	cmp	r0, #0
 8000388:	d10d      	bne.n	80003a6 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800038a:	2c03      	cmp	r4, #3
 800038c:	d901      	bls.n	8000392 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 800038e:	2001      	movs	r0, #1
 8000390:	e7ed      	b.n	800036e <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000392:	3001      	adds	r0, #1
 8000394:	2200      	movs	r2, #0
 8000396:	0021      	movs	r1, r4
 8000398:	4240      	negs	r0, r0
 800039a:	f000 f889 	bl	80004b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800039e:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <HAL_InitTick+0x54>)
 80003a0:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80003a2:	2000      	movs	r0, #0
 80003a4:	e7e3      	b.n	800036e <HAL_InitTick+0xe>
      status = HAL_ERROR;
 80003a6:	2001      	movs	r0, #1
 80003a8:	e7e1      	b.n	800036e <HAL_InitTick+0xe>
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	20000000 	.word	0x20000000
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	20000004 	.word	0x20000004

080003b8 <HAL_Init>:
{
 80003b8:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003ba:	2003      	movs	r0, #3
 80003bc:	f7ff ffd0 	bl	8000360 <HAL_InitTick>
 80003c0:	1e04      	subs	r4, r0, #0
 80003c2:	d002      	beq.n	80003ca <HAL_Init+0x12>
    status = HAL_ERROR;
 80003c4:	2401      	movs	r4, #1
}
 80003c6:	0020      	movs	r0, r4
 80003c8:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80003ca:	f000 f9af 	bl	800072c <HAL_MspInit>
 80003ce:	e7fa      	b.n	80003c6 <HAL_Init+0xe>

080003d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80003d0:	4b03      	ldr	r3, [pc, #12]	@ (80003e0 <HAL_IncTick+0x10>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4a03      	ldr	r2, [pc, #12]	@ (80003e4 <HAL_IncTick+0x14>)
 80003d6:	6811      	ldr	r1, [r2, #0]
 80003d8:	185b      	adds	r3, r3, r1
 80003da:	6013      	str	r3, [r2, #0]
}
 80003dc:	4770      	bx	lr
 80003de:	46c0      	nop			@ (mov r8, r8)
 80003e0:	20000000 	.word	0x20000000
 80003e4:	2000003c 	.word	0x2000003c

080003e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003e8:	4b01      	ldr	r3, [pc, #4]	@ (80003f0 <HAL_GetTick+0x8>)
 80003ea:	6818      	ldr	r0, [r3, #0]
}
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	2000003c 	.word	0x2000003c

080003f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003f8:	f7ff fff6 	bl	80003e8 <HAL_GetTick>
 80003fc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003fe:	1c63      	adds	r3, r4, #1
 8000400:	d002      	beq.n	8000408 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000402:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <HAL_Delay+0x20>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000408:	f7ff ffee 	bl	80003e8 <HAL_GetTick>
 800040c:	1b40      	subs	r0, r0, r5
 800040e:	42a0      	cmp	r0, r4
 8000410:	d3fa      	bcc.n	8000408 <HAL_Delay+0x14>
  {
  }
}
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	20000000 	.word	0x20000000

08000418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000418:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800041a:	2800      	cmp	r0, #0
 800041c:	db11      	blt.n	8000442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800041e:	0883      	lsrs	r3, r0, #2
 8000420:	4d13      	ldr	r5, [pc, #76]	@ (8000470 <__NVIC_SetPriority+0x58>)
 8000422:	33c0      	adds	r3, #192	@ 0xc0
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	595c      	ldr	r4, [r3, r5]
 8000428:	2203      	movs	r2, #3
 800042a:	4010      	ands	r0, r2
 800042c:	00c0      	lsls	r0, r0, #3
 800042e:	32fc      	adds	r2, #252	@ 0xfc
 8000430:	0016      	movs	r6, r2
 8000432:	4086      	lsls	r6, r0
 8000434:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000436:	0189      	lsls	r1, r1, #6
 8000438:	400a      	ands	r2, r1
 800043a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800043c:	4322      	orrs	r2, r4
 800043e:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000440:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000442:	230f      	movs	r3, #15
 8000444:	4003      	ands	r3, r0
 8000446:	3b08      	subs	r3, #8
 8000448:	089b      	lsrs	r3, r3, #2
 800044a:	3306      	adds	r3, #6
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4a09      	ldr	r2, [pc, #36]	@ (8000474 <__NVIC_SetPriority+0x5c>)
 8000450:	4694      	mov	ip, r2
 8000452:	4463      	add	r3, ip
 8000454:	685c      	ldr	r4, [r3, #4]
 8000456:	2203      	movs	r2, #3
 8000458:	4010      	ands	r0, r2
 800045a:	00c0      	lsls	r0, r0, #3
 800045c:	32fc      	adds	r2, #252	@ 0xfc
 800045e:	0015      	movs	r5, r2
 8000460:	4085      	lsls	r5, r0
 8000462:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000464:	0189      	lsls	r1, r1, #6
 8000466:	400a      	ands	r2, r1
 8000468:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800046a:	4322      	orrs	r2, r4
 800046c:	605a      	str	r2, [r3, #4]
}
 800046e:	e7e7      	b.n	8000440 <__NVIC_SetPriority+0x28>
 8000470:	e000e100 	.word	0xe000e100
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000478:	3801      	subs	r0, #1
 800047a:	2380      	movs	r3, #128	@ 0x80
 800047c:	045b      	lsls	r3, r3, #17
 800047e:	4298      	cmp	r0, r3
 8000480:	d20f      	bcs.n	80004a2 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000482:	4a09      	ldr	r2, [pc, #36]	@ (80004a8 <SysTick_Config+0x30>)
 8000484:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000486:	4809      	ldr	r0, [pc, #36]	@ (80004ac <SysTick_Config+0x34>)
 8000488:	6a03      	ldr	r3, [r0, #32]
 800048a:	021b      	lsls	r3, r3, #8
 800048c:	0a1b      	lsrs	r3, r3, #8
 800048e:	21c0      	movs	r1, #192	@ 0xc0
 8000490:	0609      	lsls	r1, r1, #24
 8000492:	430b      	orrs	r3, r1
 8000494:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000496:	2300      	movs	r3, #0
 8000498:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800049a:	3307      	adds	r3, #7
 800049c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800049e:	2000      	movs	r0, #0
}
 80004a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004a2:	2001      	movs	r0, #1
 80004a4:	e7fc      	b.n	80004a0 <SysTick_Config+0x28>
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	e000e010 	.word	0xe000e010
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004b0:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80004b2:	f7ff ffb1 	bl	8000418 <__NVIC_SetPriority>
}
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80004b8:	2800      	cmp	r0, #0
 80004ba:	db05      	blt.n	80004c8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004bc:	221f      	movs	r2, #31
 80004be:	4002      	ands	r2, r0
 80004c0:	2301      	movs	r3, #1
 80004c2:	4093      	lsls	r3, r2
 80004c4:	4a01      	ldr	r2, [pc, #4]	@ (80004cc <HAL_NVIC_EnableIRQ+0x14>)
 80004c6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	e000e100 	.word	0xe000e100

080004d0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004d0:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 80004d2:	f7ff ffd1 	bl	8000478 <SysTick_Config>
}
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80004d8:	2901      	cmp	r1, #1
 80004da:	d007      	beq.n	80004ec <HAL_EXTI_RegisterCallback+0x14>
 80004dc:	2902      	cmp	r1, #2
 80004de:	d008      	beq.n	80004f2 <HAL_EXTI_RegisterCallback+0x1a>
 80004e0:	2900      	cmp	r1, #0
 80004e2:	d109      	bne.n	80004f8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80004e4:	6042      	str	r2, [r0, #4]
      hexti->FallingCallback = pPendingCbfn;
 80004e6:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80004e8:	0008      	movs	r0, r1
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80004ea:	4770      	bx	lr
      hexti->RisingCallback = pPendingCbfn;
 80004ec:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004ee:	2000      	movs	r0, #0
      break;
 80004f0:	e7fb      	b.n	80004ea <HAL_EXTI_RegisterCallback+0x12>
      hexti->FallingCallback = pPendingCbfn;
 80004f2:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80004f4:	2000      	movs	r0, #0
      break;
 80004f6:	e7f8      	b.n	80004ea <HAL_EXTI_RegisterCallback+0x12>
  switch (CallbackID)
 80004f8:	2001      	movs	r0, #1
 80004fa:	e7f6      	b.n	80004ea <HAL_EXTI_RegisterCallback+0x12>

080004fc <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d002      	beq.n	8000506 <HAL_EXTI_GetHandle+0xa>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000500:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8000502:	2000      	movs	r0, #0
  }
}
 8000504:	4770      	bx	lr
    return HAL_ERROR;
 8000506:	2001      	movs	r0, #1
 8000508:	e7fc      	b.n	8000504 <HAL_EXTI_GetHandle+0x8>
	...

0800050c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	0006      	movs	r6, r0
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000510:	6802      	ldr	r2, [r0, #0]
 8000512:	0c14      	lsrs	r4, r2, #16
 8000514:	2501      	movs	r5, #1
 8000516:	402c      	ands	r4, r5
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8000518:	231f      	movs	r3, #31
 800051a:	4013      	ands	r3, r2
 800051c:	409d      	lsls	r5, r3

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800051e:	0164      	lsls	r4, r4, #5
 8000520:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <HAL_EXTI_IRQHandler+0x40>)
 8000522:	18e3      	adds	r3, r4, r3
  regval = (*regaddr & maskline);
 8000524:	681a      	ldr	r2, [r3, #0]

  if (regval != 0U)
 8000526:	4215      	tst	r5, r2
 8000528:	d004      	beq.n	8000534 <HAL_EXTI_IRQHandler+0x28>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800052a:	601d      	str	r5, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800052c:	6843      	ldr	r3, [r0, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d000      	beq.n	8000534 <HAL_EXTI_IRQHandler+0x28>
    {
      hexti->RisingCallback();
 8000532:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <HAL_EXTI_IRQHandler+0x44>)
 8000536:	469c      	mov	ip, r3
 8000538:	4464      	add	r4, ip
  regval = (*regaddr & maskline);
 800053a:	6823      	ldr	r3, [r4, #0]

  if (regval != 0U)
 800053c:	421d      	tst	r5, r3
 800053e:	d004      	beq.n	800054a <HAL_EXTI_IRQHandler+0x3e>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000540:	6025      	str	r5, [r4, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8000542:	68b3      	ldr	r3, [r6, #8]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d000      	beq.n	800054a <HAL_EXTI_IRQHandler+0x3e>
    {
      hexti->FallingCallback();
 8000548:	4798      	blx	r3
    }
  }
}
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	4002180c 	.word	0x4002180c
 8000550:	40021810 	.word	0x40021810

08000554 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	46d6      	mov	lr, sl
 8000558:	464f      	mov	r7, r9
 800055a:	4646      	mov	r6, r8
 800055c:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800055e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000560:	e03b      	b.n	80005da <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000562:	2505      	movs	r5, #5
 8000564:	e000      	b.n	8000568 <HAL_GPIO_Init+0x14>
 8000566:	2500      	movs	r5, #0
 8000568:	40a5      	lsls	r5, r4
 800056a:	002c      	movs	r4, r5
 800056c:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 800056e:	4d63      	ldr	r5, [pc, #396]	@ (80006fc <HAL_GPIO_Init+0x1a8>)
 8000570:	3218      	adds	r2, #24
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000576:	2280      	movs	r2, #128	@ 0x80
 8000578:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 800057a:	464a      	mov	r2, r9
 800057c:	43d2      	mvns	r2, r2
 800057e:	003d      	movs	r5, r7
 8000580:	464c      	mov	r4, r9
 8000582:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000584:	684c      	ldr	r4, [r1, #4]
 8000586:	03e4      	lsls	r4, r4, #15
 8000588:	d502      	bpl.n	8000590 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 800058a:	003d      	movs	r5, r7
 800058c:	464c      	mov	r4, r9
 800058e:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8000590:	4c5a      	ldr	r4, [pc, #360]	@ (80006fc <HAL_GPIO_Init+0x1a8>)
 8000592:	2780      	movs	r7, #128	@ 0x80
 8000594:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8000596:	2584      	movs	r5, #132	@ 0x84
 8000598:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 800059a:	003d      	movs	r5, r7
 800059c:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800059e:	684c      	ldr	r4, [r1, #4]
 80005a0:	03a4      	lsls	r4, r4, #14
 80005a2:	d502      	bpl.n	80005aa <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 80005a4:	003d      	movs	r5, r7
 80005a6:	464c      	mov	r4, r9
 80005a8:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 80005aa:	4c54      	ldr	r4, [pc, #336]	@ (80006fc <HAL_GPIO_Init+0x1a8>)
 80005ac:	2784      	movs	r7, #132	@ 0x84
 80005ae:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80005b0:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 80005b2:	003d      	movs	r5, r7
 80005b4:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005b6:	684c      	ldr	r4, [r1, #4]
 80005b8:	02e4      	lsls	r4, r4, #11
 80005ba:	d502      	bpl.n	80005c2 <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 80005bc:	003d      	movs	r5, r7
 80005be:	464c      	mov	r4, r9
 80005c0:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 80005c2:	4c4e      	ldr	r4, [pc, #312]	@ (80006fc <HAL_GPIO_Init+0x1a8>)
 80005c4:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 80005c6:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 80005c8:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005ca:	684c      	ldr	r4, [r1, #4]
 80005cc:	02a4      	lsls	r4, r4, #10
 80005ce:	d501      	bpl.n	80005d4 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 80005d0:	464a      	mov	r2, r9
 80005d2:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 80005d4:	4c49      	ldr	r4, [pc, #292]	@ (80006fc <HAL_GPIO_Init+0x1a8>)
 80005d6:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 80005d8:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80005da:	680c      	ldr	r4, [r1, #0]
 80005dc:	0022      	movs	r2, r4
 80005de:	40da      	lsrs	r2, r3
 80005e0:	d100      	bne.n	80005e4 <HAL_GPIO_Init+0x90>
 80005e2:	e086      	b.n	80006f2 <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80005e4:	2201      	movs	r2, #1
 80005e6:	409a      	lsls	r2, r3
 80005e8:	0026      	movs	r6, r4
 80005ea:	4016      	ands	r6, r2
 80005ec:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 80005ee:	4214      	tst	r4, r2
 80005f0:	d0f2      	beq.n	80005d8 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005f2:	684c      	ldr	r4, [r1, #4]
 80005f4:	2c02      	cmp	r4, #2
 80005f6:	d001      	beq.n	80005fc <HAL_GPIO_Init+0xa8>
 80005f8:	2c12      	cmp	r4, #18
 80005fa:	d118      	bne.n	800062e <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 80005fc:	08dd      	lsrs	r5, r3, #3
 80005fe:	3508      	adds	r5, #8
 8000600:	00ad      	lsls	r5, r5, #2
 8000602:	582c      	ldr	r4, [r5, r0]
 8000604:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000606:	2707      	movs	r7, #7
 8000608:	401f      	ands	r7, r3
 800060a:	00bf      	lsls	r7, r7, #2
 800060c:	240f      	movs	r4, #15
 800060e:	46a2      	mov	sl, r4
 8000610:	0026      	movs	r6, r4
 8000612:	40be      	lsls	r6, r7
 8000614:	46b0      	mov	r8, r6
 8000616:	4666      	mov	r6, ip
 8000618:	4644      	mov	r4, r8
 800061a:	43a6      	bics	r6, r4
 800061c:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800061e:	690c      	ldr	r4, [r1, #16]
 8000620:	4656      	mov	r6, sl
 8000622:	4026      	ands	r6, r4
 8000624:	0034      	movs	r4, r6
 8000626:	40bc      	lsls	r4, r7
 8000628:	4666      	mov	r6, ip
 800062a:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 800062c:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 800062e:	6804      	ldr	r4, [r0, #0]
 8000630:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000632:	005d      	lsls	r5, r3, #1
 8000634:	2403      	movs	r4, #3
 8000636:	46a2      	mov	sl, r4
 8000638:	0027      	movs	r7, r4
 800063a:	40af      	lsls	r7, r5
 800063c:	46b8      	mov	r8, r7
 800063e:	43ff      	mvns	r7, r7
 8000640:	4666      	mov	r6, ip
 8000642:	4644      	mov	r4, r8
 8000644:	43a6      	bics	r6, r4
 8000646:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000648:	684c      	ldr	r4, [r1, #4]
 800064a:	4656      	mov	r6, sl
 800064c:	4026      	ands	r6, r4
 800064e:	0034      	movs	r4, r6
 8000650:	40ac      	lsls	r4, r5
 8000652:	4666      	mov	r6, ip
 8000654:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8000656:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000658:	684c      	ldr	r4, [r1, #4]
 800065a:	1e66      	subs	r6, r4, #1
 800065c:	2e01      	cmp	r6, #1
 800065e:	d903      	bls.n	8000668 <HAL_GPIO_Init+0x114>
 8000660:	2c11      	cmp	r4, #17
 8000662:	d001      	beq.n	8000668 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000664:	2c12      	cmp	r4, #18
 8000666:	d112      	bne.n	800068e <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8000668:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800066a:	403c      	ands	r4, r7
 800066c:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800066e:	68cc      	ldr	r4, [r1, #12]
 8000670:	40ac      	lsls	r4, r5
 8000672:	4666      	mov	r6, ip
 8000674:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8000676:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8000678:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800067a:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800067c:	684a      	ldr	r2, [r1, #4]
 800067e:	0912      	lsrs	r2, r2, #4
 8000680:	4694      	mov	ip, r2
 8000682:	2201      	movs	r2, #1
 8000684:	4666      	mov	r6, ip
 8000686:	4032      	ands	r2, r6
 8000688:	409a      	lsls	r2, r3
 800068a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 800068c:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800068e:	684a      	ldr	r2, [r1, #4]
 8000690:	2a03      	cmp	r2, #3
 8000692:	d005      	beq.n	80006a0 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8000694:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000696:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000698:	688a      	ldr	r2, [r1, #8]
 800069a:	40aa      	lsls	r2, r5
 800069c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 800069e:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006a0:	684a      	ldr	r2, [r1, #4]
 80006a2:	00d2      	lsls	r2, r2, #3
 80006a4:	d598      	bpl.n	80005d8 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 80006a6:	089a      	lsrs	r2, r3, #2
 80006a8:	0014      	movs	r4, r2
 80006aa:	3418      	adds	r4, #24
 80006ac:	00a4      	lsls	r4, r4, #2
 80006ae:	4d13      	ldr	r5, [pc, #76]	@ (80006fc <HAL_GPIO_Init+0x1a8>)
 80006b0:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80006b2:	2403      	movs	r4, #3
 80006b4:	401c      	ands	r4, r3
 80006b6:	00e4      	lsls	r4, r4, #3
 80006b8:	250f      	movs	r5, #15
 80006ba:	40a5      	lsls	r5, r4
 80006bc:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80006be:	25a0      	movs	r5, #160	@ 0xa0
 80006c0:	05ed      	lsls	r5, r5, #23
 80006c2:	42a8      	cmp	r0, r5
 80006c4:	d100      	bne.n	80006c8 <HAL_GPIO_Init+0x174>
 80006c6:	e74e      	b.n	8000566 <HAL_GPIO_Init+0x12>
 80006c8:	4d0d      	ldr	r5, [pc, #52]	@ (8000700 <HAL_GPIO_Init+0x1ac>)
 80006ca:	42a8      	cmp	r0, r5
 80006cc:	d00b      	beq.n	80006e6 <HAL_GPIO_Init+0x192>
 80006ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000704 <HAL_GPIO_Init+0x1b0>)
 80006d0:	42a8      	cmp	r0, r5
 80006d2:	d00a      	beq.n	80006ea <HAL_GPIO_Init+0x196>
 80006d4:	4d0c      	ldr	r5, [pc, #48]	@ (8000708 <HAL_GPIO_Init+0x1b4>)
 80006d6:	42a8      	cmp	r0, r5
 80006d8:	d009      	beq.n	80006ee <HAL_GPIO_Init+0x19a>
 80006da:	4d0c      	ldr	r5, [pc, #48]	@ (800070c <HAL_GPIO_Init+0x1b8>)
 80006dc:	42a8      	cmp	r0, r5
 80006de:	d100      	bne.n	80006e2 <HAL_GPIO_Init+0x18e>
 80006e0:	e73f      	b.n	8000562 <HAL_GPIO_Init+0xe>
 80006e2:	2506      	movs	r5, #6
 80006e4:	e740      	b.n	8000568 <HAL_GPIO_Init+0x14>
 80006e6:	2501      	movs	r5, #1
 80006e8:	e73e      	b.n	8000568 <HAL_GPIO_Init+0x14>
 80006ea:	2502      	movs	r5, #2
 80006ec:	e73c      	b.n	8000568 <HAL_GPIO_Init+0x14>
 80006ee:	2503      	movs	r5, #3
 80006f0:	e73a      	b.n	8000568 <HAL_GPIO_Init+0x14>
  }
}
 80006f2:	bce0      	pop	{r5, r6, r7}
 80006f4:	46ba      	mov	sl, r7
 80006f6:	46b1      	mov	r9, r6
 80006f8:	46a8      	mov	r8, r5
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	40021800 	.word	0x40021800
 8000700:	50000400 	.word	0x50000400
 8000704:	50000800 	.word	0x50000800
 8000708:	50000c00 	.word	0x50000c00
 800070c:	50001400 	.word	0x50001400

08000710 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000710:	2a00      	cmp	r2, #0
 8000712:	d001      	beq.n	8000718 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000714:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000716:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000718:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800071a:	e7fc      	b.n	8000716 <HAL_GPIO_WritePin+0x6>

0800071c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800071c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800071e:	0013      	movs	r3, r2
 8000720:	400b      	ands	r3, r1
 8000722:	041b      	lsls	r3, r3, #16
 8000724:	4391      	bics	r1, r2
 8000726:	430b      	orrs	r3, r1
 8000728:	6183      	str	r3, [r0, #24]
}
 800072a:	4770      	bx	lr

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <HAL_MspInit+0x2c>)
 8000730:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000732:	2201      	movs	r2, #1
 8000734:	4311      	orrs	r1, r2
 8000736:	6419      	str	r1, [r3, #64]	@ 0x40
 8000738:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800073a:	400a      	ands	r2, r1
 800073c:	9200      	str	r2, [sp, #0]
 800073e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000742:	2180      	movs	r1, #128	@ 0x80
 8000744:	0549      	lsls	r1, r1, #21
 8000746:	430a      	orrs	r2, r1
 8000748:	63da      	str	r2, [r3, #60]	@ 0x3c
 800074a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800074c:	400b      	ands	r3, r1
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	b002      	add	sp, #8
 8000754:	4770      	bx	lr
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000760:	d100      	bne.n	8000764 <HAL_RCC_OscConfig+0x8>
 8000762:	e139      	b.n	80009d8 <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000764:	6803      	ldr	r3, [r0, #0]
 8000766:	07db      	lsls	r3, r3, #31
 8000768:	d52c      	bpl.n	80007c4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800076a:	4ba1      	ldr	r3, [pc, #644]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 800076c:	689a      	ldr	r2, [r3, #8]
 800076e:	2338      	movs	r3, #56	@ 0x38
 8000770:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000772:	2b08      	cmp	r3, #8
 8000774:	d022      	beq.n	80007bc <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000776:	6843      	ldr	r3, [r0, #4]
 8000778:	2280      	movs	r2, #128	@ 0x80
 800077a:	0252      	lsls	r2, r2, #9
 800077c:	4293      	cmp	r3, r2
 800077e:	d02e      	beq.n	80007de <HAL_RCC_OscConfig+0x82>
 8000780:	22a0      	movs	r2, #160	@ 0xa0
 8000782:	02d2      	lsls	r2, r2, #11
 8000784:	4293      	cmp	r3, r2
 8000786:	d031      	beq.n	80007ec <HAL_RCC_OscConfig+0x90>
 8000788:	4b99      	ldr	r3, [pc, #612]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4999      	ldr	r1, [pc, #612]	@ (80009f4 <HAL_RCC_OscConfig+0x298>)
 800078e:	400a      	ands	r2, r1
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4998      	ldr	r1, [pc, #608]	@ (80009f8 <HAL_RCC_OscConfig+0x29c>)
 8000796:	400a      	ands	r2, r1
 8000798:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800079a:	6863      	ldr	r3, [r4, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d031      	beq.n	8000804 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007a0:	f7ff fe22 	bl	80003e8 <HAL_GetTick>
 80007a4:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80007a6:	4b92      	ldr	r3, [pc, #584]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	039b      	lsls	r3, r3, #14
 80007ac:	d40a      	bmi.n	80007c4 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80007ae:	f7ff fe1b 	bl	80003e8 <HAL_GetTick>
 80007b2:	1b40      	subs	r0, r0, r5
 80007b4:	2864      	cmp	r0, #100	@ 0x64
 80007b6:	d9f6      	bls.n	80007a6 <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 80007b8:	2003      	movs	r0, #3
 80007ba:	e10e      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80007bc:	6843      	ldr	r3, [r0, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d100      	bne.n	80007c4 <HAL_RCC_OscConfig+0x68>
 80007c2:	e10b      	b.n	80009dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	079b      	lsls	r3, r3, #30
 80007c8:	d547      	bpl.n	800085a <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007ca:	4b89      	ldr	r3, [pc, #548]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80007d0:	421a      	tst	r2, r3
 80007d2:	d161      	bne.n	8000898 <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80007d4:	68e3      	ldr	r3, [r4, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d122      	bne.n	8000820 <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 80007da:	2001      	movs	r0, #1
 80007dc:	e0fd      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007de:	4a84      	ldr	r2, [pc, #528]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80007e0:	6811      	ldr	r1, [r2, #0]
 80007e2:	2380      	movs	r3, #128	@ 0x80
 80007e4:	025b      	lsls	r3, r3, #9
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e7d6      	b.n	800079a <HAL_RCC_OscConfig+0x3e>
 80007ec:	4b80      	ldr	r3, [pc, #512]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	2280      	movs	r2, #128	@ 0x80
 80007f2:	02d2      	lsls	r2, r2, #11
 80007f4:	430a      	orrs	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	6819      	ldr	r1, [r3, #0]
 80007fa:	2280      	movs	r2, #128	@ 0x80
 80007fc:	0252      	lsls	r2, r2, #9
 80007fe:	430a      	orrs	r2, r1
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	e7ca      	b.n	800079a <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8000804:	f7ff fdf0 	bl	80003e8 <HAL_GetTick>
 8000808:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800080a:	4b79      	ldr	r3, [pc, #484]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	039b      	lsls	r3, r3, #14
 8000810:	d5d8      	bpl.n	80007c4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000812:	f7ff fde9 	bl	80003e8 <HAL_GetTick>
 8000816:	1b40      	subs	r0, r0, r5
 8000818:	2864      	cmp	r0, #100	@ 0x64
 800081a:	d9f6      	bls.n	800080a <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 800081c:	2003      	movs	r0, #3
 800081e:	e0dc      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000820:	4b73      	ldr	r3, [pc, #460]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	4975      	ldr	r1, [pc, #468]	@ (80009fc <HAL_RCC_OscConfig+0x2a0>)
 8000826:	400a      	ands	r2, r1
 8000828:	6961      	ldr	r1, [r4, #20]
 800082a:	0209      	lsls	r1, r1, #8
 800082c:	430a      	orrs	r2, r1
 800082e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4973      	ldr	r1, [pc, #460]	@ (8000a00 <HAL_RCC_OscConfig+0x2a4>)
 8000834:	400a      	ands	r2, r1
 8000836:	6921      	ldr	r1, [r4, #16]
 8000838:	430a      	orrs	r2, r1
 800083a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	0adb      	lsrs	r3, r3, #11
 8000840:	2207      	movs	r2, #7
 8000842:	401a      	ands	r2, r3
 8000844:	4b6f      	ldr	r3, [pc, #444]	@ (8000a04 <HAL_RCC_OscConfig+0x2a8>)
 8000846:	40d3      	lsrs	r3, r2
 8000848:	4a6f      	ldr	r2, [pc, #444]	@ (8000a08 <HAL_RCC_OscConfig+0x2ac>)
 800084a:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800084c:	4b6f      	ldr	r3, [pc, #444]	@ (8000a0c <HAL_RCC_OscConfig+0x2b0>)
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	f7ff fd86 	bl	8000360 <HAL_InitTick>
 8000854:	2800      	cmp	r0, #0
 8000856:	d000      	beq.n	800085a <HAL_RCC_OscConfig+0xfe>
 8000858:	e0c2      	b.n	80009e0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	071b      	lsls	r3, r3, #28
 800085e:	d557      	bpl.n	8000910 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000860:	4b63      	ldr	r3, [pc, #396]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	2338      	movs	r3, #56	@ 0x38
 8000866:	4013      	ands	r3, r2
 8000868:	2b18      	cmp	r3, #24
 800086a:	d04e      	beq.n	800090a <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800086c:	69a3      	ldr	r3, [r4, #24]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d077      	beq.n	8000962 <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000872:	4a5f      	ldr	r2, [pc, #380]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 8000874:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8000876:	2101      	movs	r1, #1
 8000878:	430b      	orrs	r3, r1
 800087a:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800087c:	f7ff fdb4 	bl	80003e8 <HAL_GetTick>
 8000880:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000882:	4b5b      	ldr	r3, [pc, #364]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000886:	079b      	lsls	r3, r3, #30
 8000888:	d442      	bmi.n	8000910 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800088a:	f7ff fdad 	bl	80003e8 <HAL_GetTick>
 800088e:	1b40      	subs	r0, r0, r5
 8000890:	2802      	cmp	r0, #2
 8000892:	d9f6      	bls.n	8000882 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8000894:	2003      	movs	r0, #3
 8000896:	e0a0      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000898:	68e3      	ldr	r3, [r4, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d022      	beq.n	80008e4 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800089e:	4a54      	ldr	r2, [pc, #336]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80008a0:	6813      	ldr	r3, [r2, #0]
 80008a2:	4957      	ldr	r1, [pc, #348]	@ (8000a00 <HAL_RCC_OscConfig+0x2a4>)
 80008a4:	400b      	ands	r3, r1
 80008a6:	6921      	ldr	r1, [r4, #16]
 80008a8:	430b      	orrs	r3, r1
 80008aa:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 80008ac:	6811      	ldr	r1, [r2, #0]
 80008ae:	2380      	movs	r3, #128	@ 0x80
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	430b      	orrs	r3, r1
 80008b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80008b6:	f7ff fd97 	bl	80003e8 <HAL_GetTick>
 80008ba:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80008bc:	4b4c      	ldr	r3, [pc, #304]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	055b      	lsls	r3, r3, #21
 80008c2:	d406      	bmi.n	80008d2 <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80008c4:	f7ff fd90 	bl	80003e8 <HAL_GetTick>
 80008c8:	1b40      	subs	r0, r0, r5
 80008ca:	2802      	cmp	r0, #2
 80008cc:	d9f6      	bls.n	80008bc <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 80008ce:	2003      	movs	r0, #3
 80008d0:	e083      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d2:	4947      	ldr	r1, [pc, #284]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80008d4:	684b      	ldr	r3, [r1, #4]
 80008d6:	4a49      	ldr	r2, [pc, #292]	@ (80009fc <HAL_RCC_OscConfig+0x2a0>)
 80008d8:	4013      	ands	r3, r2
 80008da:	6962      	ldr	r2, [r4, #20]
 80008dc:	0212      	lsls	r2, r2, #8
 80008de:	4313      	orrs	r3, r2
 80008e0:	604b      	str	r3, [r1, #4]
 80008e2:	e7ba      	b.n	800085a <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 80008e4:	4a42      	ldr	r2, [pc, #264]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	4949      	ldr	r1, [pc, #292]	@ (8000a10 <HAL_RCC_OscConfig+0x2b4>)
 80008ea:	400b      	ands	r3, r1
 80008ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80008ee:	f7ff fd7b 	bl	80003e8 <HAL_GetTick>
 80008f2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80008f4:	4b3e      	ldr	r3, [pc, #248]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	055b      	lsls	r3, r3, #21
 80008fa:	d5ae      	bpl.n	800085a <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80008fc:	f7ff fd74 	bl	80003e8 <HAL_GetTick>
 8000900:	1b40      	subs	r0, r0, r5
 8000902:	2802      	cmp	r0, #2
 8000904:	d9f6      	bls.n	80008f4 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8000906:	2003      	movs	r0, #3
 8000908:	e067      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800090a:	69a3      	ldr	r3, [r4, #24]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d069      	beq.n	80009e4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	075b      	lsls	r3, r3, #29
 8000914:	d568      	bpl.n	80009e8 <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000916:	4b36      	ldr	r3, [pc, #216]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	2338      	movs	r3, #56	@ 0x38
 800091c:	4013      	ands	r3, r2
 800091e:	2b20      	cmp	r3, #32
 8000920:	d032      	beq.n	8000988 <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000922:	68a3      	ldr	r3, [r4, #8]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d034      	beq.n	8000992 <HAL_RCC_OscConfig+0x236>
 8000928:	2b05      	cmp	r3, #5
 800092a:	d038      	beq.n	800099e <HAL_RCC_OscConfig+0x242>
 800092c:	4b30      	ldr	r3, [pc, #192]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 800092e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000930:	2101      	movs	r1, #1
 8000932:	438a      	bics	r2, r1
 8000934:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000936:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000938:	3103      	adds	r1, #3
 800093a:	438a      	bics	r2, r1
 800093c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800093e:	68a3      	ldr	r3, [r4, #8]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d038      	beq.n	80009b6 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000944:	f7ff fd50 	bl	80003e8 <HAL_GetTick>
 8000948:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800094a:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 800094c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800094e:	079b      	lsls	r3, r3, #30
 8000950:	d42f      	bmi.n	80009b2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000952:	f7ff fd49 	bl	80003e8 <HAL_GetTick>
 8000956:	1b00      	subs	r0, r0, r4
 8000958:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <HAL_RCC_OscConfig+0x2b8>)
 800095a:	4298      	cmp	r0, r3
 800095c:	d9f5      	bls.n	800094a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800095e:	2003      	movs	r0, #3
 8000960:	e03b      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8000962:	4a23      	ldr	r2, [pc, #140]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 8000964:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8000966:	2101      	movs	r1, #1
 8000968:	438b      	bics	r3, r1
 800096a:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800096c:	f7ff fd3c 	bl	80003e8 <HAL_GetTick>
 8000970:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000976:	079b      	lsls	r3, r3, #30
 8000978:	d5ca      	bpl.n	8000910 <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800097a:	f7ff fd35 	bl	80003e8 <HAL_GetTick>
 800097e:	1b40      	subs	r0, r0, r5
 8000980:	2802      	cmp	r0, #2
 8000982:	d9f6      	bls.n	8000972 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8000984:	2003      	movs	r0, #3
 8000986:	e028      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000988:	68a3      	ldr	r3, [r4, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d02e      	beq.n	80009ec <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800098e:	2000      	movs	r0, #0
 8000990:	e023      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000992:	4a17      	ldr	r2, [pc, #92]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 8000994:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000996:	2101      	movs	r1, #1
 8000998:	430b      	orrs	r3, r1
 800099a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800099c:	e7cf      	b.n	800093e <HAL_RCC_OscConfig+0x1e2>
 800099e:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80009a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80009a2:	2104      	movs	r1, #4
 80009a4:	430a      	orrs	r2, r1
 80009a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80009a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80009aa:	3903      	subs	r1, #3
 80009ac:	430a      	orrs	r2, r1
 80009ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80009b0:	e7c5      	b.n	800093e <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 80009b2:	2000      	movs	r0, #0
 80009b4:	e011      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80009b6:	f7ff fd17 	bl	80003e8 <HAL_GetTick>
 80009ba:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <HAL_RCC_OscConfig+0x294>)
 80009be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009c0:	079b      	lsls	r3, r3, #30
 80009c2:	d507      	bpl.n	80009d4 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009c4:	f7ff fd10 	bl	80003e8 <HAL_GetTick>
 80009c8:	1b00      	subs	r0, r0, r4
 80009ca:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_RCC_OscConfig+0x2b8>)
 80009cc:	4298      	cmp	r0, r3
 80009ce:	d9f5      	bls.n	80009bc <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 80009d0:	2003      	movs	r0, #3
 80009d2:	e002      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 80009d4:	2000      	movs	r0, #0
 80009d6:	e000      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 80009d8:	2001      	movs	r0, #1
}
 80009da:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80009dc:	2001      	movs	r0, #1
 80009de:	e7fc      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 80009e0:	2001      	movs	r0, #1
 80009e2:	e7fa      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 80009e4:	2001      	movs	r0, #1
 80009e6:	e7f8      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 80009e8:	2000      	movs	r0, #0
 80009ea:	e7f6      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 80009ec:	2001      	movs	r0, #1
 80009ee:	e7f4      	b.n	80009da <HAL_RCC_OscConfig+0x27e>
 80009f0:	40021000 	.word	0x40021000
 80009f4:	fffeffff 	.word	0xfffeffff
 80009f8:	fffbffff 	.word	0xfffbffff
 80009fc:	ffff80ff 	.word	0xffff80ff
 8000a00:	ffffc7ff 	.word	0xffffc7ff
 8000a04:	02dc6c00 	.word	0x02dc6c00
 8000a08:	2000000c 	.word	0x2000000c
 8000a0c:	20000004 	.word	0x20000004
 8000a10:	fffffeff 	.word	0xfffffeff
 8000a14:	00001388 	.word	0x00001388

08000a18 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_RCC_GetSysClockFreq+0x54>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	2238      	movs	r2, #56	@ 0x38
 8000a1e:	421a      	tst	r2, r3
 8000a20:	d107      	bne.n	8000a32 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_RCC_GetSysClockFreq+0x54>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	0ad2      	lsrs	r2, r2, #11
 8000a28:	2307      	movs	r3, #7
 8000a2a:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000a2c:	4810      	ldr	r0, [pc, #64]	@ (8000a70 <HAL_RCC_GetSysClockFreq+0x58>)
 8000a2e:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8000a30:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_RCC_GetSysClockFreq+0x54>)
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	2338      	movs	r3, #56	@ 0x38
 8000a38:	4013      	ands	r3, r2
 8000a3a:	2b08      	cmp	r3, #8
 8000a3c:	d010      	beq.n	8000a60 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <HAL_RCC_GetSysClockFreq+0x54>)
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	2338      	movs	r3, #56	@ 0x38
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b20      	cmp	r3, #32
 8000a48:	d00c      	beq.n	8000a64 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_RCC_GetSysClockFreq+0x54>)
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	2338      	movs	r3, #56	@ 0x38
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b18      	cmp	r3, #24
 8000a54:	d001      	beq.n	8000a5a <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8000a56:	2000      	movs	r0, #0
  return sysclockfreq;
 8000a58:	e7ea      	b.n	8000a30 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8000a5a:	20fa      	movs	r0, #250	@ 0xfa
 8000a5c:	01c0      	lsls	r0, r0, #7
 8000a5e:	e7e7      	b.n	8000a30 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8000a60:	4803      	ldr	r0, [pc, #12]	@ (8000a70 <HAL_RCC_GetSysClockFreq+0x58>)
 8000a62:	e7e5      	b.n	8000a30 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8000a64:	2080      	movs	r0, #128	@ 0x80
 8000a66:	0200      	lsls	r0, r0, #8
 8000a68:	e7e2      	b.n	8000a30 <HAL_RCC_GetSysClockFreq+0x18>
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	02dc6c00 	.word	0x02dc6c00

08000a74 <HAL_RCC_ClockConfig>:
{
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	0004      	movs	r4, r0
 8000a78:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	d100      	bne.n	8000a80 <HAL_RCC_ClockConfig+0xc>
 8000a7e:	e0a4      	b.n	8000bca <HAL_RCC_ClockConfig+0x156>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000a80:	4b54      	ldr	r3, [pc, #336]	@ (8000bd4 <HAL_RCC_ClockConfig+0x160>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	2307      	movs	r3, #7
 8000a86:	4013      	ands	r3, r2
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d321      	bcc.n	8000ad0 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	079a      	lsls	r2, r3, #30
 8000a90:	d510      	bpl.n	8000ab4 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a92:	075b      	lsls	r3, r3, #29
 8000a94:	d507      	bpl.n	8000aa6 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000a96:	4950      	ldr	r1, [pc, #320]	@ (8000bd8 <HAL_RCC_ClockConfig+0x164>)
 8000a98:	688a      	ldr	r2, [r1, #8]
 8000a9a:	4b50      	ldr	r3, [pc, #320]	@ (8000bdc <HAL_RCC_ClockConfig+0x168>)
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	23b0      	movs	r3, #176	@ 0xb0
 8000aa0:	011b      	lsls	r3, r3, #4
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000aa6:	4a4c      	ldr	r2, [pc, #304]	@ (8000bd8 <HAL_RCC_ClockConfig+0x164>)
 8000aa8:	6893      	ldr	r3, [r2, #8]
 8000aaa:	494d      	ldr	r1, [pc, #308]	@ (8000be0 <HAL_RCC_ClockConfig+0x16c>)
 8000aac:	400b      	ands	r3, r1
 8000aae:	68e1      	ldr	r1, [r4, #12]
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	07db      	lsls	r3, r3, #31
 8000ab8:	d54c      	bpl.n	8000b54 <HAL_RCC_ClockConfig+0xe0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aba:	6863      	ldr	r3, [r4, #4]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d01e      	beq.n	8000afe <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d139      	bne.n	8000b38 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ac4:	4a44      	ldr	r2, [pc, #272]	@ (8000bd8 <HAL_RCC_ClockConfig+0x164>)
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	0552      	lsls	r2, r2, #21
 8000aca:	d41c      	bmi.n	8000b06 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8000acc:	2001      	movs	r0, #1
 8000ace:	e064      	b.n	8000b9a <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ad0:	4a40      	ldr	r2, [pc, #256]	@ (8000bd4 <HAL_RCC_ClockConfig+0x160>)
 8000ad2:	6813      	ldr	r3, [r2, #0]
 8000ad4:	2107      	movs	r1, #7
 8000ad6:	438b      	bics	r3, r1
 8000ad8:	432b      	orrs	r3, r5
 8000ada:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000adc:	f7ff fc84 	bl	80003e8 <HAL_GetTick>
 8000ae0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd4 <HAL_RCC_ClockConfig+0x160>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	4013      	ands	r3, r2
 8000aea:	42ab      	cmp	r3, r5
 8000aec:	d0ce      	beq.n	8000a8c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000aee:	f7ff fc7b 	bl	80003e8 <HAL_GetTick>
 8000af2:	1b80      	subs	r0, r0, r6
 8000af4:	4a3b      	ldr	r2, [pc, #236]	@ (8000be4 <HAL_RCC_ClockConfig+0x170>)
 8000af6:	4290      	cmp	r0, r2
 8000af8:	d9f3      	bls.n	8000ae2 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8000afa:	2003      	movs	r0, #3
 8000afc:	e04d      	b.n	8000b9a <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000afe:	4a36      	ldr	r2, [pc, #216]	@ (8000bd8 <HAL_RCC_ClockConfig+0x164>)
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	0392      	lsls	r2, r2, #14
 8000b04:	d563      	bpl.n	8000bce <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000b06:	4934      	ldr	r1, [pc, #208]	@ (8000bd8 <HAL_RCC_ClockConfig+0x164>)
 8000b08:	688a      	ldr	r2, [r1, #8]
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	4382      	bics	r2, r0
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000b12:	f7ff fc69 	bl	80003e8 <HAL_GetTick>
 8000b16:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b18:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <HAL_RCC_ClockConfig+0x164>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	2238      	movs	r2, #56	@ 0x38
 8000b1e:	401a      	ands	r2, r3
 8000b20:	6863      	ldr	r3, [r4, #4]
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d015      	beq.n	8000b54 <HAL_RCC_ClockConfig+0xe0>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000b28:	f7ff fc5e 	bl	80003e8 <HAL_GetTick>
 8000b2c:	1b80      	subs	r0, r0, r6
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000be4 <HAL_RCC_ClockConfig+0x170>)
 8000b30:	4298      	cmp	r0, r3
 8000b32:	d9f1      	bls.n	8000b18 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8000b34:	2003      	movs	r0, #3
 8000b36:	e030      	b.n	8000b9a <HAL_RCC_ClockConfig+0x126>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d005      	beq.n	8000b48 <HAL_RCC_ClockConfig+0xd4>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000b3c:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <HAL_RCC_ClockConfig+0x164>)
 8000b3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000b40:	0792      	lsls	r2, r2, #30
 8000b42:	d4e0      	bmi.n	8000b06 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8000b44:	2001      	movs	r0, #1
 8000b46:	e028      	b.n	8000b9a <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000b48:	4a23      	ldr	r2, [pc, #140]	@ (8000bd8 <HAL_RCC_ClockConfig+0x164>)
 8000b4a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8000b4c:	0792      	lsls	r2, r2, #30
 8000b4e:	d4da      	bmi.n	8000b06 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8000b50:	2001      	movs	r0, #1
 8000b52:	e022      	b.n	8000b9a <HAL_RCC_ClockConfig+0x126>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000b54:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <HAL_RCC_ClockConfig+0x160>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	2307      	movs	r3, #7
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	42ab      	cmp	r3, r5
 8000b5e:	d81d      	bhi.n	8000b9c <HAL_RCC_ClockConfig+0x128>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b60:	6823      	ldr	r3, [r4, #0]
 8000b62:	075b      	lsls	r3, r3, #29
 8000b64:	d506      	bpl.n	8000b74 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <HAL_RCC_ClockConfig+0x164>)
 8000b68:	6893      	ldr	r3, [r2, #8]
 8000b6a:	491f      	ldr	r1, [pc, #124]	@ (8000be8 <HAL_RCC_ClockConfig+0x174>)
 8000b6c:	400b      	ands	r3, r1
 8000b6e:	6921      	ldr	r1, [r4, #16]
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000b74:	f7ff ff50 	bl	8000a18 <HAL_RCC_GetSysClockFreq>
 8000b78:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <HAL_RCC_ClockConfig+0x164>)
 8000b7a:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000b7c:	0a12      	lsrs	r2, r2, #8
 8000b7e:	230f      	movs	r3, #15
 8000b80:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000b82:	4a1a      	ldr	r2, [pc, #104]	@ (8000bec <HAL_RCC_ClockConfig+0x178>)
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000b88:	231f      	movs	r3, #31
 8000b8a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000b8c:	40d8      	lsrs	r0, r3
 8000b8e:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <HAL_RCC_ClockConfig+0x17c>)
 8000b90:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <HAL_RCC_ClockConfig+0x180>)
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	f7ff fbe3 	bl	8000360 <HAL_InitTick>
}
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <HAL_RCC_ClockConfig+0x160>)
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	2107      	movs	r1, #7
 8000ba2:	438b      	bics	r3, r1
 8000ba4:	432b      	orrs	r3, r5
 8000ba6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000ba8:	f7ff fc1e 	bl	80003e8 <HAL_GetTick>
 8000bac:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_RCC_ClockConfig+0x160>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	42ab      	cmp	r3, r5
 8000bb8:	d0d2      	beq.n	8000b60 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000bba:	f7ff fc15 	bl	80003e8 <HAL_GetTick>
 8000bbe:	1b80      	subs	r0, r0, r6
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <HAL_RCC_ClockConfig+0x170>)
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d9f3      	bls.n	8000bae <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	e7e7      	b.n	8000b9a <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 8000bca:	2001      	movs	r0, #1
 8000bcc:	e7e5      	b.n	8000b9a <HAL_RCC_ClockConfig+0x126>
        return HAL_ERROR;
 8000bce:	2001      	movs	r0, #1
 8000bd0:	e7e3      	b.n	8000b9a <HAL_RCC_ClockConfig+0x126>
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	40022000 	.word	0x40022000
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	ffff84ff 	.word	0xffff84ff
 8000be0:	fffff0ff 	.word	0xfffff0ff
 8000be4:	00001388 	.word	0x00001388
 8000be8:	ffff8fff 	.word	0xffff8fff
 8000bec:	08001480 	.word	0x08001480
 8000bf0:	2000000c 	.word	0x2000000c
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000bf8:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000bfa:	f7ff ff0d 	bl	8000a18 <HAL_RCC_GetSysClockFreq>
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <HAL_RCC_GetHCLKFreq+0x24>)
 8000c00:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000c02:	0a12      	lsrs	r2, r2, #8
 8000c04:	230f      	movs	r3, #15
 8000c06:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000c08:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <HAL_RCC_GetHCLKFreq+0x28>)
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000c0e:	231f      	movs	r3, #31
 8000c10:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000c12:	40d8      	lsrs	r0, r3
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <HAL_RCC_GetHCLKFreq+0x2c>)
 8000c16:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8000c18:	bd10      	pop	{r4, pc}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	08001480 	.word	0x08001480
 8000c24:	2000000c 	.word	0x2000000c

08000c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000c28:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8000c2a:	f7ff ffe5 	bl	8000bf8 <HAL_RCC_GetHCLKFreq>
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	0b12      	lsrs	r2, r2, #12
 8000c34:	2307      	movs	r3, #7
 8000c36:	4013      	ands	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	589a      	ldr	r2, [r3, r2]
 8000c3e:	231f      	movs	r3, #31
 8000c40:	4013      	ands	r3, r2
 8000c42:	40d8      	lsrs	r0, r3
}
 8000c44:	bd10      	pop	{r4, pc}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	08001460 	.word	0x08001460

08000c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8000c50:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000c52:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c56:	2201      	movs	r2, #1
 8000c58:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8000c5c:	6801      	ldr	r1, [r0, #0]
 8000c5e:	680b      	ldr	r3, [r1, #0]
 8000c60:	4d12      	ldr	r5, [pc, #72]	@ (8000cac <UART_EndRxTransfer+0x5c>)
 8000c62:	402b      	ands	r3, r5
 8000c64:	600b      	str	r3, [r1, #0]
 8000c66:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000c6a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c6e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8000c72:	6802      	ldr	r2, [r0, #0]
 8000c74:	6893      	ldr	r3, [r2, #8]
 8000c76:	4c0e      	ldr	r4, [pc, #56]	@ (8000cb0 <UART_EndRxTransfer+0x60>)
 8000c78:	4023      	ands	r3, r4
 8000c7a:	6093      	str	r3, [r2, #8]
 8000c7c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000c80:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d006      	beq.n	8000c94 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000c86:	238c      	movs	r3, #140	@ 0x8c
 8000c88:	2220      	movs	r2, #32
 8000c8a:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8000c90:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8000c92:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000c94:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c98:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000c9c:	6802      	ldr	r2, [r0, #0]
 8000c9e:	6813      	ldr	r3, [r2, #0]
 8000ca0:	2410      	movs	r4, #16
 8000ca2:	43a3      	bics	r3, r4
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	f381 8810 	msr	PRIMASK, r1
}
 8000caa:	e7ec      	b.n	8000c86 <UART_EndRxTransfer+0x36>
 8000cac:	fffffedf 	.word	0xfffffedf
 8000cb0:	effffffe 	.word	0xeffffffe

08000cb4 <HAL_UART_MspInit>:
}
 8000cb4:	4770      	bx	lr
	...

08000cb8 <UART_SetConfig>:
{
 8000cb8:	b510      	push	{r4, lr}
 8000cba:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cbc:	6883      	ldr	r3, [r0, #8]
 8000cbe:	6902      	ldr	r2, [r0, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	6942      	ldr	r2, [r0, #20]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	69c2      	ldr	r2, [r0, #28]
 8000cc8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000cca:	6801      	ldr	r1, [r0, #0]
 8000ccc:	680a      	ldr	r2, [r1, #0]
 8000cce:	4862      	ldr	r0, [pc, #392]	@ (8000e58 <UART_SetConfig+0x1a0>)
 8000cd0:	4002      	ands	r2, r0
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000cd6:	6822      	ldr	r2, [r4, #0]
 8000cd8:	6853      	ldr	r3, [r2, #4]
 8000cda:	4960      	ldr	r1, [pc, #384]	@ (8000e5c <UART_SetConfig+0x1a4>)
 8000cdc:	400b      	ands	r3, r1
 8000cde:	68e1      	ldr	r1, [r4, #12]
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000ce4:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8000ce6:	6a22      	ldr	r2, [r4, #32]
 8000ce8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000cea:	6821      	ldr	r1, [r4, #0]
 8000cec:	688b      	ldr	r3, [r1, #8]
 8000cee:	485c      	ldr	r0, [pc, #368]	@ (8000e60 <UART_SetConfig+0x1a8>)
 8000cf0:	4003      	ands	r3, r0
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8000cf6:	6822      	ldr	r2, [r4, #0]
 8000cf8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	438b      	bics	r3, r1
 8000cfe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000d00:	430b      	orrs	r3, r1
 8000d02:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	4a57      	ldr	r2, [pc, #348]	@ (8000e64 <UART_SetConfig+0x1ac>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d030      	beq.n	8000d6e <UART_SetConfig+0xb6>
 8000d0c:	4a56      	ldr	r2, [pc, #344]	@ (8000e68 <UART_SetConfig+0x1b0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d03e      	beq.n	8000d90 <UART_SetConfig+0xd8>
 8000d12:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d14:	69e0      	ldr	r0, [r4, #28]
 8000d16:	2280      	movs	r2, #128	@ 0x80
 8000d18:	0212      	lsls	r2, r2, #8
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d042      	beq.n	8000da4 <UART_SetConfig+0xec>
    switch (clocksource)
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d100      	bne.n	8000d24 <UART_SetConfig+0x6c>
 8000d22:	e089      	b.n	8000e38 <UART_SetConfig+0x180>
 8000d24:	d87b      	bhi.n	8000e1e <UART_SetConfig+0x166>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <UART_SetConfig+0x74>
 8000d2a:	e07f      	b.n	8000e2c <UART_SetConfig+0x174>
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d174      	bne.n	8000e1a <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8000d30:	4b4e      	ldr	r3, [pc, #312]	@ (8000e6c <UART_SetConfig+0x1b4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	095b      	lsrs	r3, r3, #5
 8000d36:	2107      	movs	r1, #7
 8000d38:	4019      	ands	r1, r3
 8000d3a:	3101      	adds	r1, #1
 8000d3c:	484c      	ldr	r0, [pc, #304]	@ (8000e70 <UART_SetConfig+0x1b8>)
 8000d3e:	f7ff f9bf 	bl	80000c0 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8000d42:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000d44:	4b4b      	ldr	r3, [pc, #300]	@ (8000e74 <UART_SetConfig+0x1bc>)
 8000d46:	0052      	lsls	r2, r2, #1
 8000d48:	5ad1      	ldrh	r1, [r2, r3]
 8000d4a:	f7ff f9b9 	bl	80000c0 <__udivsi3>
 8000d4e:	6861      	ldr	r1, [r4, #4]
 8000d50:	084b      	lsrs	r3, r1, #1
 8000d52:	18c0      	adds	r0, r0, r3
 8000d54:	f7ff f9b4 	bl	80000c0 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8000d58:	0002      	movs	r2, r0
 8000d5a:	3a10      	subs	r2, #16
 8000d5c:	4b46      	ldr	r3, [pc, #280]	@ (8000e78 <UART_SetConfig+0x1c0>)
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d86f      	bhi.n	8000e42 <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	0400      	lsls	r0, r0, #16
 8000d66:	0c00      	lsrs	r0, r0, #16
 8000d68:	60d8      	str	r0, [r3, #12]
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	e06a      	b.n	8000e44 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e6c <UART_SetConfig+0x1b4>)
 8000d70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000d72:	2303      	movs	r3, #3
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d00c      	beq.n	8000d94 <UART_SetConfig+0xdc>
 8000d7a:	d805      	bhi.n	8000d88 <UART_SetConfig+0xd0>
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00b      	beq.n	8000d98 <UART_SetConfig+0xe0>
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d10b      	bne.n	8000d9c <UART_SetConfig+0xe4>
 8000d84:	3303      	adds	r3, #3
 8000d86:	e7c5      	b.n	8000d14 <UART_SetConfig+0x5c>
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d109      	bne.n	8000da0 <UART_SetConfig+0xe8>
 8000d8c:	3305      	adds	r3, #5
 8000d8e:	e7c1      	b.n	8000d14 <UART_SetConfig+0x5c>
 8000d90:	2300      	movs	r3, #0
 8000d92:	e7bf      	b.n	8000d14 <UART_SetConfig+0x5c>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e7bd      	b.n	8000d14 <UART_SetConfig+0x5c>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e7bb      	b.n	8000d14 <UART_SetConfig+0x5c>
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	e7b9      	b.n	8000d14 <UART_SetConfig+0x5c>
 8000da0:	2310      	movs	r3, #16
 8000da2:	e7b7      	b.n	8000d14 <UART_SetConfig+0x5c>
    switch (clocksource)
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d035      	beq.n	8000e14 <UART_SetConfig+0x15c>
 8000da8:	d82a      	bhi.n	8000e00 <UART_SetConfig+0x148>
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d02c      	beq.n	8000e08 <UART_SetConfig+0x150>
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d124      	bne.n	8000dfc <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8000db2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e6c <UART_SetConfig+0x1b4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2107      	movs	r1, #7
 8000dba:	4019      	ands	r1, r3
 8000dbc:	3101      	adds	r1, #1
 8000dbe:	482c      	ldr	r0, [pc, #176]	@ (8000e70 <UART_SetConfig+0x1b8>)
 8000dc0:	f7ff f97e 	bl	80000c0 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8000dc4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <UART_SetConfig+0x1bc>)
 8000dc8:	0052      	lsls	r2, r2, #1
 8000dca:	5ad1      	ldrh	r1, [r2, r3]
 8000dcc:	f7ff f978 	bl	80000c0 <__udivsi3>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	6861      	ldr	r1, [r4, #4]
 8000dd4:	084b      	lsrs	r3, r1, #1
 8000dd6:	18c0      	adds	r0, r0, r3
 8000dd8:	f7ff f972 	bl	80000c0 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8000ddc:	0002      	movs	r2, r0
 8000dde:	3a10      	subs	r2, #16
 8000de0:	4b25      	ldr	r3, [pc, #148]	@ (8000e78 <UART_SetConfig+0x1c0>)
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d82b      	bhi.n	8000e3e <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8000de6:	b282      	uxth	r2, r0
 8000de8:	230f      	movs	r3, #15
 8000dea:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000dec:	0840      	lsrs	r0, r0, #1
 8000dee:	3b08      	subs	r3, #8
 8000df0:	4003      	ands	r3, r0
 8000df2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8000df4:	6822      	ldr	r2, [r4, #0]
 8000df6:	60d3      	str	r3, [r2, #12]
 8000df8:	2000      	movs	r0, #0
 8000dfa:	e023      	b.n	8000e44 <UART_SetConfig+0x18c>
    switch (clocksource)
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	e021      	b.n	8000e44 <UART_SetConfig+0x18c>
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d0df      	beq.n	8000dc4 <UART_SetConfig+0x10c>
 8000e04:	2001      	movs	r0, #1
 8000e06:	e01d      	b.n	8000e44 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8000e08:	f7ff ff0e 	bl	8000c28 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d1d9      	bne.n	8000dc4 <UART_SetConfig+0x10c>
 8000e10:	2000      	movs	r0, #0
 8000e12:	e017      	b.n	8000e44 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8000e14:	f7ff fe00 	bl	8000a18 <HAL_RCC_GetSysClockFreq>
        break;
 8000e18:	e7f8      	b.n	8000e0c <UART_SetConfig+0x154>
    switch (clocksource)
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	e012      	b.n	8000e44 <UART_SetConfig+0x18c>
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d102      	bne.n	8000e28 <UART_SetConfig+0x170>
 8000e22:	2080      	movs	r0, #128	@ 0x80
 8000e24:	0200      	lsls	r0, r0, #8
 8000e26:	e78c      	b.n	8000d42 <UART_SetConfig+0x8a>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	e00b      	b.n	8000e44 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8000e2c:	f7ff fefc 	bl	8000c28 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d186      	bne.n	8000d42 <UART_SetConfig+0x8a>
 8000e34:	2000      	movs	r0, #0
 8000e36:	e005      	b.n	8000e44 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8000e38:	f7ff fdee 	bl	8000a18 <HAL_RCC_GetSysClockFreq>
        break;
 8000e3c:	e7f8      	b.n	8000e30 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8000e3e:	2001      	movs	r0, #1
 8000e40:	e000      	b.n	8000e44 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 8000e42:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	226a      	movs	r2, #106	@ 0x6a
 8000e48:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8000e4a:	3a02      	subs	r2, #2
 8000e4c:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8000e52:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8000e54:	bd10      	pop	{r4, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	cfff69f3 	.word	0xcfff69f3
 8000e5c:	ffffcfff 	.word	0xffffcfff
 8000e60:	11fff4ff 	.word	0x11fff4ff
 8000e64:	40013800 	.word	0x40013800
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	02dc6c00 	.word	0x02dc6c00
 8000e74:	0800143c 	.word	0x0800143c
 8000e78:	0000ffef 	.word	0x0000ffef

08000e7c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8000e7c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000e7e:	071b      	lsls	r3, r3, #28
 8000e80:	d506      	bpl.n	8000e90 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8000e82:	6802      	ldr	r2, [r0, #0]
 8000e84:	6853      	ldr	r3, [r2, #4]
 8000e86:	492c      	ldr	r1, [pc, #176]	@ (8000f38 <UART_AdvFeatureConfig+0xbc>)
 8000e88:	400b      	ands	r3, r1
 8000e8a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000e90:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000e92:	07db      	lsls	r3, r3, #31
 8000e94:	d506      	bpl.n	8000ea4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000e96:	6802      	ldr	r2, [r0, #0]
 8000e98:	6853      	ldr	r3, [r2, #4]
 8000e9a:	4928      	ldr	r1, [pc, #160]	@ (8000f3c <UART_AdvFeatureConfig+0xc0>)
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8000ea4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000ea6:	079b      	lsls	r3, r3, #30
 8000ea8:	d506      	bpl.n	8000eb8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8000eaa:	6802      	ldr	r2, [r0, #0]
 8000eac:	6853      	ldr	r3, [r2, #4]
 8000eae:	4924      	ldr	r1, [pc, #144]	@ (8000f40 <UART_AdvFeatureConfig+0xc4>)
 8000eb0:	400b      	ands	r3, r1
 8000eb2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8000eb8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000eba:	075b      	lsls	r3, r3, #29
 8000ebc:	d506      	bpl.n	8000ecc <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8000ebe:	6802      	ldr	r2, [r0, #0]
 8000ec0:	6853      	ldr	r3, [r2, #4]
 8000ec2:	4920      	ldr	r1, [pc, #128]	@ (8000f44 <UART_AdvFeatureConfig+0xc8>)
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8000ecc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000ece:	06db      	lsls	r3, r3, #27
 8000ed0:	d506      	bpl.n	8000ee0 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8000ed2:	6802      	ldr	r2, [r0, #0]
 8000ed4:	6893      	ldr	r3, [r2, #8]
 8000ed6:	491c      	ldr	r1, [pc, #112]	@ (8000f48 <UART_AdvFeatureConfig+0xcc>)
 8000ed8:	400b      	ands	r3, r1
 8000eda:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8000edc:	430b      	orrs	r3, r1
 8000ede:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8000ee0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000ee2:	069b      	lsls	r3, r3, #26
 8000ee4:	d506      	bpl.n	8000ef4 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8000ee6:	6802      	ldr	r2, [r0, #0]
 8000ee8:	6893      	ldr	r3, [r2, #8]
 8000eea:	4918      	ldr	r1, [pc, #96]	@ (8000f4c <UART_AdvFeatureConfig+0xd0>)
 8000eec:	400b      	ands	r3, r1
 8000eee:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8000ef0:	430b      	orrs	r3, r1
 8000ef2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8000ef4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000ef6:	065b      	lsls	r3, r3, #25
 8000ef8:	d50b      	bpl.n	8000f12 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000efa:	6802      	ldr	r2, [r0, #0]
 8000efc:	6853      	ldr	r3, [r2, #4]
 8000efe:	4914      	ldr	r1, [pc, #80]	@ (8000f50 <UART_AdvFeatureConfig+0xd4>)
 8000f00:	400b      	ands	r3, r1
 8000f02:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8000f04:	430b      	orrs	r3, r1
 8000f06:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000f08:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8000f0a:	2380      	movs	r3, #128	@ 0x80
 8000f0c:	035b      	lsls	r3, r3, #13
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d00a      	beq.n	8000f28 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8000f12:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000f14:	061b      	lsls	r3, r3, #24
 8000f16:	d506      	bpl.n	8000f26 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8000f18:	6802      	ldr	r2, [r0, #0]
 8000f1a:	6853      	ldr	r3, [r2, #4]
 8000f1c:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <UART_AdvFeatureConfig+0xd8>)
 8000f1e:	400b      	ands	r3, r1
 8000f20:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8000f22:	430b      	orrs	r3, r1
 8000f24:	6053      	str	r3, [r2, #4]
}
 8000f26:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8000f28:	6802      	ldr	r2, [r0, #0]
 8000f2a:	6853      	ldr	r3, [r2, #4]
 8000f2c:	490a      	ldr	r1, [pc, #40]	@ (8000f58 <UART_AdvFeatureConfig+0xdc>)
 8000f2e:	400b      	ands	r3, r1
 8000f30:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8000f32:	430b      	orrs	r3, r1
 8000f34:	6053      	str	r3, [r2, #4]
 8000f36:	e7ec      	b.n	8000f12 <UART_AdvFeatureConfig+0x96>
 8000f38:	ffff7fff 	.word	0xffff7fff
 8000f3c:	fffdffff 	.word	0xfffdffff
 8000f40:	fffeffff 	.word	0xfffeffff
 8000f44:	fffbffff 	.word	0xfffbffff
 8000f48:	ffffefff 	.word	0xffffefff
 8000f4c:	ffffdfff 	.word	0xffffdfff
 8000f50:	ffefffff 	.word	0xffefffff
 8000f54:	fff7ffff 	.word	0xfff7ffff
 8000f58:	ff9fffff 	.word	0xff9fffff

08000f5c <UART_WaitOnFlagUntilTimeout>:
{
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	46ce      	mov	lr, r9
 8000f60:	4647      	mov	r7, r8
 8000f62:	b580      	push	{r7, lr}
 8000f64:	0006      	movs	r6, r0
 8000f66:	000d      	movs	r5, r1
 8000f68:	0017      	movs	r7, r2
 8000f6a:	4699      	mov	r9, r3
 8000f6c:	9b08      	ldr	r3, [sp, #32]
 8000f6e:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f70:	6833      	ldr	r3, [r6, #0]
 8000f72:	69dc      	ldr	r4, [r3, #28]
 8000f74:	402c      	ands	r4, r5
 8000f76:	1b64      	subs	r4, r4, r5
 8000f78:	4263      	negs	r3, r4
 8000f7a:	415c      	adcs	r4, r3
 8000f7c:	42bc      	cmp	r4, r7
 8000f7e:	d133      	bne.n	8000fe8 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8000f80:	4643      	mov	r3, r8
 8000f82:	3301      	adds	r3, #1
 8000f84:	d0f4      	beq.n	8000f70 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f86:	f7ff fa2f 	bl	80003e8 <HAL_GetTick>
 8000f8a:	464b      	mov	r3, r9
 8000f8c:	1ac0      	subs	r0, r0, r3
 8000f8e:	4540      	cmp	r0, r8
 8000f90:	d82f      	bhi.n	8000ff2 <UART_WaitOnFlagUntilTimeout+0x96>
 8000f92:	4643      	mov	r3, r8
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d02e      	beq.n	8000ff6 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8000f98:	6832      	ldr	r2, [r6, #0]
 8000f9a:	6813      	ldr	r3, [r2, #0]
 8000f9c:	075b      	lsls	r3, r3, #29
 8000f9e:	d5e7      	bpl.n	8000f70 <UART_WaitOnFlagUntilTimeout+0x14>
 8000fa0:	2d80      	cmp	r5, #128	@ 0x80
 8000fa2:	d0e5      	beq.n	8000f70 <UART_WaitOnFlagUntilTimeout+0x14>
 8000fa4:	2d40      	cmp	r5, #64	@ 0x40
 8000fa6:	d0e3      	beq.n	8000f70 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8000fa8:	69d3      	ldr	r3, [r2, #28]
 8000faa:	071b      	lsls	r3, r3, #28
 8000fac:	d410      	bmi.n	8000fd0 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8000fae:	69d3      	ldr	r3, [r2, #28]
 8000fb0:	051b      	lsls	r3, r3, #20
 8000fb2:	d5dd      	bpl.n	8000f70 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8000fba:	0030      	movs	r0, r6
 8000fbc:	f7ff fe48 	bl	8000c50 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8000fc0:	2390      	movs	r3, #144	@ 0x90
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8000fc6:	3b0c      	subs	r3, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8000fcc:	2003      	movs	r0, #3
 8000fce:	e00c      	b.n	8000fea <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8000fd0:	2408      	movs	r4, #8
 8000fd2:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8000fd4:	0030      	movs	r0, r6
 8000fd6:	f7ff fe3b 	bl	8000c50 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8000fda:	2390      	movs	r3, #144	@ 0x90
 8000fdc:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8000fde:	3b0c      	subs	r3, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	e000      	b.n	8000fea <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8000fe8:	2000      	movs	r0, #0
}
 8000fea:	bcc0      	pop	{r6, r7}
 8000fec:	46b9      	mov	r9, r7
 8000fee:	46b0      	mov	r8, r6
 8000ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	e7f9      	b.n	8000fea <UART_WaitOnFlagUntilTimeout+0x8e>
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	e7f7      	b.n	8000fea <UART_WaitOnFlagUntilTimeout+0x8e>
	...

08000ffc <UART_CheckIdleState>:
{
 8000ffc:	b530      	push	{r4, r5, lr}
 8000ffe:	b083      	sub	sp, #12
 8001000:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001002:	2390      	movs	r3, #144	@ 0x90
 8001004:	2200      	movs	r2, #0
 8001006:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001008:	f7ff f9ee 	bl	80003e8 <HAL_GetTick>
 800100c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	071b      	lsls	r3, r3, #28
 8001014:	d410      	bmi.n	8001038 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	075b      	lsls	r3, r3, #29
 800101c:	d42b      	bmi.n	8001076 <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 800101e:	2320      	movs	r3, #32
 8001020:	2288      	movs	r2, #136	@ 0x88
 8001022:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001024:	3204      	adds	r2, #4
 8001026:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001028:	2300      	movs	r3, #0
 800102a:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800102c:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 800102e:	3a08      	subs	r2, #8
 8001030:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001032:	2000      	movs	r0, #0
}
 8001034:	b003      	add	sp, #12
 8001036:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001038:	2180      	movs	r1, #128	@ 0x80
 800103a:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <UART_CheckIdleState+0xcc>)
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	0003      	movs	r3, r0
 8001040:	2200      	movs	r2, #0
 8001042:	0389      	lsls	r1, r1, #14
 8001044:	0020      	movs	r0, r4
 8001046:	f7ff ff89 	bl	8000f5c <UART_WaitOnFlagUntilTimeout>
 800104a:	2800      	cmp	r0, #0
 800104c:	d0e3      	beq.n	8001016 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800104e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001052:	2301      	movs	r3, #1
 8001054:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	2080      	movs	r0, #128	@ 0x80
 800105e:	4383      	bics	r3, r0
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001066:	2388      	movs	r3, #136	@ 0x88
 8001068:	2220      	movs	r2, #32
 800106a:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 800106c:	3b04      	subs	r3, #4
 800106e:	2200      	movs	r2, #0
 8001070:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001072:	387d      	subs	r0, #125	@ 0x7d
 8001074:	e7de      	b.n	8001034 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001076:	2180      	movs	r1, #128	@ 0x80
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <UART_CheckIdleState+0xcc>)
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	002b      	movs	r3, r5
 800107e:	2200      	movs	r2, #0
 8001080:	03c9      	lsls	r1, r1, #15
 8001082:	0020      	movs	r0, r4
 8001084:	f7ff ff6a 	bl	8000f5c <UART_WaitOnFlagUntilTimeout>
 8001088:	2800      	cmp	r0, #0
 800108a:	d0c8      	beq.n	800101e <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800108c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001090:	2201      	movs	r2, #1
 8001092:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001096:	6821      	ldr	r1, [r4, #0]
 8001098:	680b      	ldr	r3, [r1, #0]
 800109a:	4d0c      	ldr	r5, [pc, #48]	@ (80010cc <UART_CheckIdleState+0xd0>)
 800109c:	402b      	ands	r3, r5
 800109e:	600b      	str	r3, [r1, #0]
 80010a0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80010a4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010a8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010ac:	6821      	ldr	r1, [r4, #0]
 80010ae:	688b      	ldr	r3, [r1, #8]
 80010b0:	4393      	bics	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]
 80010b4:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80010b8:	238c      	movs	r3, #140	@ 0x8c
 80010ba:	321f      	adds	r2, #31
 80010bc:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 80010be:	3b08      	subs	r3, #8
 80010c0:	2200      	movs	r2, #0
 80010c2:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 80010c4:	2003      	movs	r0, #3
 80010c6:	e7b5      	b.n	8001034 <UART_CheckIdleState+0x38>
 80010c8:	01ffffff 	.word	0x01ffffff
 80010cc:	fffffedf 	.word	0xfffffedf

080010d0 <HAL_UART_Init>:
{
 80010d0:	b510      	push	{r4, lr}
 80010d2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80010d4:	d030      	beq.n	8001138 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 80010d6:	2388      	movs	r3, #136	@ 0x88
 80010d8:	58c3      	ldr	r3, [r0, r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d022      	beq.n	8001124 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80010de:	2388      	movs	r3, #136	@ 0x88
 80010e0:	2224      	movs	r2, #36	@ 0x24
 80010e2:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80010e4:	6822      	ldr	r2, [r4, #0]
 80010e6:	6813      	ldr	r3, [r2, #0]
 80010e8:	2101      	movs	r1, #1
 80010ea:	438b      	bics	r3, r1
 80010ec:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80010ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d11d      	bne.n	8001130 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80010f4:	0020      	movs	r0, r4
 80010f6:	f7ff fddf 	bl	8000cb8 <UART_SetConfig>
 80010fa:	2801      	cmp	r0, #1
 80010fc:	d011      	beq.n	8001122 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010fe:	6822      	ldr	r2, [r4, #0]
 8001100:	6853      	ldr	r3, [r2, #4]
 8001102:	490e      	ldr	r1, [pc, #56]	@ (800113c <HAL_UART_Init+0x6c>)
 8001104:	400b      	ands	r3, r1
 8001106:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001108:	6822      	ldr	r2, [r4, #0]
 800110a:	6893      	ldr	r3, [r2, #8]
 800110c:	212a      	movs	r1, #42	@ 0x2a
 800110e:	438b      	bics	r3, r1
 8001110:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001112:	6822      	ldr	r2, [r4, #0]
 8001114:	6813      	ldr	r3, [r2, #0]
 8001116:	3929      	subs	r1, #41	@ 0x29
 8001118:	430b      	orrs	r3, r1
 800111a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800111c:	0020      	movs	r0, r4
 800111e:	f7ff ff6d 	bl	8000ffc <UART_CheckIdleState>
}
 8001122:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001124:	3384      	adds	r3, #132	@ 0x84
 8001126:	2200      	movs	r2, #0
 8001128:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800112a:	f7ff fdc3 	bl	8000cb4 <HAL_UART_MspInit>
 800112e:	e7d6      	b.n	80010de <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8001130:	0020      	movs	r0, r4
 8001132:	f7ff fea3 	bl	8000e7c <UART_AdvFeatureConfig>
 8001136:	e7dd      	b.n	80010f4 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8001138:	2001      	movs	r0, #1
 800113a:	e7f2      	b.n	8001122 <HAL_UART_Init+0x52>
 800113c:	ffffb7ff 	.word	0xffffb7ff

08001140 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler>

08001142 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler>

08001144 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114a:	f7ff f941 	bl	80003d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114e:	bd10      	pop	{r4, pc}

08001150 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001150:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f8c2 	bl	80012dc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001158:	bd10      	pop	{r4, pc}
	...

0800115c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115e:	b089      	sub	sp, #36	@ 0x24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <COM1_MspInit+0x68>)
 8001162:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001164:	2501      	movs	r5, #1
 8001166:	432a      	orrs	r2, r5
 8001168:	635a      	str	r2, [r3, #52]	@ 0x34
 800116a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800116c:	402a      	ands	r2, r5
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	9a00      	ldr	r2, [sp, #0]
  COM1_RX_GPIO_CLK_ENABLE();
 8001172:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001174:	432a      	orrs	r2, r5
 8001176:	635a      	str	r2, [r3, #52]	@ 0x34
 8001178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800117a:	402a      	ands	r2, r5
 800117c:	9201      	str	r2, [sp, #4]
 800117e:	9a01      	ldr	r2, [sp, #4]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	0289      	lsls	r1, r1, #10
 8001186:	430a      	orrs	r2, r1
 8001188:	63da      	str	r2, [r3, #60]	@ 0x3c
 800118a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800118c:	400b      	ands	r3, r1
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	9b02      	ldr	r3, [sp, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001192:	ac03      	add	r4, sp, #12
 8001194:	2304      	movs	r3, #4
 8001196:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001198:	2602      	movs	r6, #2
 800119a:	9604      	str	r6, [sp, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800119c:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800119e:	9505      	str	r5, [sp, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80011a0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80011a2:	27a0      	movs	r7, #160	@ 0xa0
 80011a4:	05ff      	lsls	r7, r7, #23
 80011a6:	0021      	movs	r1, r4
 80011a8:	0038      	movs	r0, r7
 80011aa:	f7ff f9d3 	bl	8000554 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80011ae:	2308      	movs	r3, #8
 80011b0:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80011b2:	9604      	str	r6, [sp, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80011b4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80011b6:	0021      	movs	r1, r4
 80011b8:	0038      	movs	r0, r7
 80011ba:	f7ff f9cb 	bl	8000554 <HAL_GPIO_Init>
}
 80011be:	b009      	add	sp, #36	@ 0x24
 80011c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	40021000 	.word	0x40021000

080011c8 <BSP_LED_Init>:
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	0004      	movs	r4, r0
  if ((Led != LED1)
 80011ce:	2801      	cmp	r0, #1
 80011d0:	d832      	bhi.n	8001238 <BSP_LED_Init+0x70>
    if (Led == LED1)
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d11d      	bne.n	8001212 <BSP_LED_Init+0x4a>
      LED1_GPIO_CLK_ENABLE();
 80011d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001240 <BSP_LED_Init+0x78>)
 80011d8:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80011da:	2301      	movs	r3, #1
 80011dc:	4319      	orrs	r1, r3
 80011de:	6351      	str	r1, [r2, #52]	@ 0x34
 80011e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80011e2:	4013      	ands	r3, r2
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin   = LED_PIN[Led];
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <BSP_LED_Init+0x7c>)
 80011ea:	0062      	lsls	r2, r4, #1
 80011ec:	5ad6      	ldrh	r6, [r2, r3]
 80011ee:	a903      	add	r1, sp, #12
 80011f0:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	604b      	str	r3, [r1, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	608b      	str	r3, [r1, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	3303      	adds	r3, #3
 80011fc:	60cb      	str	r3, [r1, #12]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <BSP_LED_Init+0x80>)
 8001200:	00a2      	lsls	r2, r4, #2
 8001202:	58d0      	ldr	r0, [r2, r3]
 8001204:	f7ff f9a6 	bl	8000554 <HAL_GPIO_Init>
    if (Led == LED2)
 8001208:	2c01      	cmp	r4, #1
 800120a:	d00c      	beq.n	8001226 <BSP_LED_Init+0x5e>
  int32_t ret = BSP_ERROR_NONE;
 800120c:	2000      	movs	r0, #0
}
 800120e:	b008      	add	sp, #32
 8001210:	bd70      	pop	{r4, r5, r6, pc}
      LED2_GPIO_CLK_ENABLE();
 8001212:	4a0b      	ldr	r2, [pc, #44]	@ (8001240 <BSP_LED_Init+0x78>)
 8001214:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001216:	2304      	movs	r3, #4
 8001218:	4319      	orrs	r1, r3
 800121a:	6351      	str	r1, [r2, #52]	@ 0x34
 800121c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800121e:	4013      	ands	r3, r2
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	9b02      	ldr	r3, [sp, #8]
 8001224:	e7e0      	b.n	80011e8 <BSP_LED_Init+0x20>
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8001226:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <BSP_LED_Init+0x80>)
 8001228:	00a4      	lsls	r4, r4, #2
 800122a:	58e0      	ldr	r0, [r4, r3]
 800122c:	2201      	movs	r2, #1
 800122e:	0031      	movs	r1, r6
 8001230:	f7ff fa6e 	bl	8000710 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8001234:	2000      	movs	r0, #0
 8001236:	e7ea      	b.n	800120e <BSP_LED_Init+0x46>
    ret = BSP_ERROR_WRONG_PARAM;
 8001238:	2002      	movs	r0, #2
 800123a:	4240      	negs	r0, r0
 800123c:	e7e7      	b.n	800120e <BSP_LED_Init+0x46>
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	40021000 	.word	0x40021000
 8001244:	08001454 	.word	0x08001454
 8001248:	08001458 	.word	0x08001458

0800124c <BSP_PB_Init>:
{
 800124c:	b530      	push	{r4, r5, lr}
 800124e:	b087      	sub	sp, #28
 8001250:	0005      	movs	r5, r0
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001252:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <BSP_PB_Init+0x78>)
 8001254:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8001256:	2304      	movs	r3, #4
 8001258:	4318      	orrs	r0, r3
 800125a:	6350      	str	r0, [r2, #52]	@ 0x34
 800125c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800125e:	4013      	ands	r3, r2
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001264:	ab01      	add	r3, sp, #4
 8001266:	2280      	movs	r2, #128	@ 0x80
 8001268:	0192      	lsls	r2, r2, #6
 800126a:	9201      	str	r2, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800126c:	2201      	movs	r2, #1
 800126e:	9203      	str	r2, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001270:	3201      	adds	r2, #1
 8001272:	9204      	str	r2, [sp, #16]
  if (ButtonMode == BUTTON_MODE_GPIO)
 8001274:	2900      	cmp	r1, #0
 8001276:	d108      	bne.n	800128a <BSP_PB_Init+0x3e>
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001278:	0019      	movs	r1, r3
 800127a:	2300      	movs	r3, #0
 800127c:	604b      	str	r3, [r1, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800127e:	4812      	ldr	r0, [pc, #72]	@ (80012c8 <BSP_PB_Init+0x7c>)
 8001280:	f7ff f968 	bl	8000554 <HAL_GPIO_Init>
}
 8001284:	2000      	movs	r0, #0
 8001286:	b007      	add	sp, #28
 8001288:	bd30      	pop	{r4, r5, pc}
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800128a:	a901      	add	r1, sp, #4
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <BSP_PB_Init+0x80>)
 800128e:	604b      	str	r3, [r1, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001290:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <BSP_PB_Init+0x7c>)
 8001292:	f7ff f95f 	bl	8000554 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001296:	006c      	lsls	r4, r5, #1
 8001298:	1964      	adds	r4, r4, r5
 800129a:	00a4      	lsls	r4, r4, #2
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <BSP_PB_Init+0x84>)
 800129e:	18e4      	adds	r4, r4, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	@ (80012d4 <BSP_PB_Init+0x88>)
 80012a2:	0020      	movs	r0, r4
 80012a4:	f7ff f92a 	bl	80004fc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <BSP_PB_Init+0x8c>)
 80012aa:	2100      	movs	r1, #0
 80012ac:	0020      	movs	r0, r4
 80012ae:	f7ff f913 	bl	80004d8 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80012b2:	2200      	movs	r2, #0
 80012b4:	210f      	movs	r1, #15
 80012b6:	2007      	movs	r0, #7
 80012b8:	f7ff f8fa 	bl	80004b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80012bc:	2007      	movs	r0, #7
 80012be:	f7ff f8fb 	bl	80004b8 <HAL_NVIC_EnableIRQ>
 80012c2:	e7df      	b.n	8001284 <BSP_PB_Init+0x38>
 80012c4:	40021000 	.word	0x40021000
 80012c8:	50000800 	.word	0x50000800
 80012cc:	10210000 	.word	0x10210000
 80012d0:	200000d4 	.word	0x200000d4
 80012d4:	0600000d 	.word	0x0600000d
 80012d8:	080012f7 	.word	0x080012f7

080012dc <BSP_PB_IRQHandler>:
{
 80012dc:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80012de:	0043      	lsls	r3, r0, #1
 80012e0:	1818      	adds	r0, r3, r0
 80012e2:	0080      	lsls	r0, r0, #2
 80012e4:	4b02      	ldr	r3, [pc, #8]	@ (80012f0 <BSP_PB_IRQHandler+0x14>)
 80012e6:	18c0      	adds	r0, r0, r3
 80012e8:	f7ff f910 	bl	800050c <HAL_EXTI_IRQHandler>
}
 80012ec:	bd10      	pop	{r4, pc}
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	200000d4 	.word	0x200000d4

080012f4 <BSP_PB_Callback>:
}
 80012f4:	4770      	bx	lr

080012f6 <BUTTON_USER_EXTI_Callback>:
{
 80012f6:	b510      	push	{r4, lr}
  BSP_PB_Callback(BUTTON_USER);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fffb 	bl	80012f4 <BSP_PB_Callback>
}
 80012fe:	bd10      	pop	{r4, pc}

08001300 <MX_USART2_Init>:
{
 8001300:	b510      	push	{r4, lr}
  huart->Instance                = COM_USART[COM1];
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <MX_USART2_Init+0x30>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6003      	str	r3, [r0, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001308:	680b      	ldr	r3, [r1, #0]
 800130a:	6043      	str	r3, [r0, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800130c:	230c      	movs	r3, #12
 800130e:	6143      	str	r3, [r0, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001310:	894b      	ldrh	r3, [r1, #10]
 8001312:	6103      	str	r3, [r0, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001314:	684b      	ldr	r3, [r1, #4]
 8001316:	6083      	str	r3, [r0, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001318:	890b      	ldrh	r3, [r1, #8]
 800131a:	60c3      	str	r3, [r0, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 800131c:	898b      	ldrh	r3, [r1, #12]
 800131e:	6183      	str	r3, [r0, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	61c3      	str	r3, [r0, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	6243      	str	r3, [r0, #36]	@ 0x24
  return HAL_UART_Init(huart);
 800132a:	f7ff fed1 	bl	80010d0 <HAL_UART_Init>
}
 800132e:	bd10      	pop	{r4, pc}
 8001330:	20000008 	.word	0x20000008

08001334 <BSP_COM_Init>:
{
 8001334:	b570      	push	{r4, r5, r6, lr}
 8001336:	000d      	movs	r5, r1
  if (COM >= COMn)
 8001338:	2800      	cmp	r0, #0
 800133a:	d10d      	bne.n	8001358 <BSP_COM_Init+0x24>
    COM1_MspInit(&hcom_uart[COM]);
 800133c:	2494      	movs	r4, #148	@ 0x94
 800133e:	4344      	muls	r4, r0
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <BSP_COM_Init+0x30>)
 8001342:	18e4      	adds	r4, r4, r3
 8001344:	0020      	movs	r0, r4
 8001346:	f7ff ff09 	bl	800115c <COM1_MspInit>
    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800134a:	0029      	movs	r1, r5
 800134c:	0020      	movs	r0, r4
 800134e:	f7ff ffd7 	bl	8001300 <MX_USART2_Init>
 8001352:	2800      	cmp	r0, #0
 8001354:	d103      	bne.n	800135e <BSP_COM_Init+0x2a>
}
 8001356:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8001358:	2002      	movs	r0, #2
 800135a:	4240      	negs	r0, r0
 800135c:	e7fb      	b.n	8001356 <BSP_COM_Init+0x22>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800135e:	2004      	movs	r0, #4
 8001360:	4240      	negs	r0, r0
  return ret;
 8001362:	e7f8      	b.n	8001356 <BSP_COM_Init+0x22>
 8001364:	20000040 	.word	0x20000040

08001368 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001368:	4b02      	ldr	r3, [pc, #8]	@ (8001374 <SystemInit+0xc>)
 800136a:	2280      	movs	r2, #128	@ 0x80
 800136c:	0512      	lsls	r2, r2, #20
 800136e:	609a      	str	r2, [r3, #8]
#endif
}
 8001370:	4770      	bx	lr
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001378:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800137a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800137c:	f7ff fff4 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001380:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001382:	e003      	b.n	800138c <LoopCopyDataInit>

08001384 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001386:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001388:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800138a:	3104      	adds	r1, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800138c:	480a      	ldr	r0, [pc, #40]	@ (80013b8 <LoopForever+0xa>)
  ldr r3, =_edata
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <LoopForever+0xe>)
  adds r2, r0, r1
 8001390:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001392:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001394:	d3f6      	bcc.n	8001384 <CopyDataInit>
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LoopForever+0x12>)
  b LoopFillZerobss
 8001398:	e002      	b.n	80013a0 <LoopFillZerobss>

0800139a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  str  r3, [r2]
 800139c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139e:	3204      	adds	r2, #4

080013a0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <LoopForever+0x16>)
  cmp r2, r3
 80013a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013a4:	d3f9      	bcc.n	800139a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80013a6:	f000 f819 	bl	80013dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013aa:	f7fe ffad 	bl	8000308 <main>

080013ae <LoopForever>:

LoopForever:
    b LoopForever
 80013ae:	e7fe      	b.n	80013ae <LoopForever>
  ldr   r0, =_estack
 80013b0:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80013b4:	080014c8 	.word	0x080014c8
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013bc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80013c0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80013c4:	200000e0 	.word	0x200000e0

080013c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_IRQHandler>

080013ca <memset>:
 80013ca:	0003      	movs	r3, r0
 80013cc:	1882      	adds	r2, r0, r2
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d100      	bne.n	80013d4 <memset+0xa>
 80013d2:	4770      	bx	lr
 80013d4:	7019      	strb	r1, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	e7f9      	b.n	80013ce <memset+0x4>
	...

080013dc <__libc_init_array>:
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	2600      	movs	r6, #0
 80013e0:	4c0c      	ldr	r4, [pc, #48]	@ (8001414 <__libc_init_array+0x38>)
 80013e2:	4d0d      	ldr	r5, [pc, #52]	@ (8001418 <__libc_init_array+0x3c>)
 80013e4:	1b64      	subs	r4, r4, r5
 80013e6:	10a4      	asrs	r4, r4, #2
 80013e8:	42a6      	cmp	r6, r4
 80013ea:	d109      	bne.n	8001400 <__libc_init_array+0x24>
 80013ec:	2600      	movs	r6, #0
 80013ee:	f000 f819 	bl	8001424 <_init>
 80013f2:	4c0a      	ldr	r4, [pc, #40]	@ (800141c <__libc_init_array+0x40>)
 80013f4:	4d0a      	ldr	r5, [pc, #40]	@ (8001420 <__libc_init_array+0x44>)
 80013f6:	1b64      	subs	r4, r4, r5
 80013f8:	10a4      	asrs	r4, r4, #2
 80013fa:	42a6      	cmp	r6, r4
 80013fc:	d105      	bne.n	800140a <__libc_init_array+0x2e>
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
 8001400:	00b3      	lsls	r3, r6, #2
 8001402:	58eb      	ldr	r3, [r5, r3]
 8001404:	4798      	blx	r3
 8001406:	3601      	adds	r6, #1
 8001408:	e7ee      	b.n	80013e8 <__libc_init_array+0xc>
 800140a:	00b3      	lsls	r3, r6, #2
 800140c:	58eb      	ldr	r3, [r5, r3]
 800140e:	4798      	blx	r3
 8001410:	3601      	adds	r6, #1
 8001412:	e7f2      	b.n	80013fa <__libc_init_array+0x1e>
 8001414:	080014c0 	.word	0x080014c0
 8001418:	080014c0 	.word	0x080014c0
 800141c:	080014c4 	.word	0x080014c4
 8001420:	080014c0 	.word	0x080014c0

08001424 <_init>:
 8001424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800142a:	bc08      	pop	{r3}
 800142c:	469e      	mov	lr, r3
 800142e:	4770      	bx	lr

08001430 <_fini>:
 8001430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001436:	bc08      	pop	{r3}
 8001438:	469e      	mov	lr, r3
 800143a:	4770      	bx	lr
