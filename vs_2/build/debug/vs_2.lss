
build/debug/vs_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002704  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080027c4  080027c4  000037c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080028a0  080028a0  000038a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080028a4  080028a4  000038a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080028a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  20000068  08002910  00004068  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000026c  08002910  0000426c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c814  00000000  00000000  000040c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f9d  00000000  00000000  000108dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000860  00000000  00000000  00012880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000006c1  00000000  00000000  000130e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00009aba  00000000  00000000  000137a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00002894  00000000  00000000  0001d25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000012c0  00000000  00000000  0001faf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000485c  00000000  00000000  00020db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000198  00000000  00000000  0002560c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__gnu_thumb1_case_shi>:
 80000c0:	b403      	push	{r0, r1}
 80000c2:	4671      	mov	r1, lr
 80000c4:	0849      	lsrs	r1, r1, #1
 80000c6:	0040      	lsls	r0, r0, #1
 80000c8:	0049      	lsls	r1, r1, #1
 80000ca:	5e09      	ldrsh	r1, [r1, r0]
 80000cc:	0049      	lsls	r1, r1, #1
 80000ce:	448e      	add	lr, r1
 80000d0:	bc03      	pop	{r0, r1}
 80000d2:	4770      	bx	lr

080000d4 <__udivsi3>:
 80000d4:	2200      	movs	r2, #0
 80000d6:	0843      	lsrs	r3, r0, #1
 80000d8:	428b      	cmp	r3, r1
 80000da:	d374      	bcc.n	80001c6 <__udivsi3+0xf2>
 80000dc:	0903      	lsrs	r3, r0, #4
 80000de:	428b      	cmp	r3, r1
 80000e0:	d35f      	bcc.n	80001a2 <__udivsi3+0xce>
 80000e2:	0a03      	lsrs	r3, r0, #8
 80000e4:	428b      	cmp	r3, r1
 80000e6:	d344      	bcc.n	8000172 <__udivsi3+0x9e>
 80000e8:	0b03      	lsrs	r3, r0, #12
 80000ea:	428b      	cmp	r3, r1
 80000ec:	d328      	bcc.n	8000140 <__udivsi3+0x6c>
 80000ee:	0c03      	lsrs	r3, r0, #16
 80000f0:	428b      	cmp	r3, r1
 80000f2:	d30d      	bcc.n	8000110 <__udivsi3+0x3c>
 80000f4:	22ff      	movs	r2, #255	@ 0xff
 80000f6:	0209      	lsls	r1, r1, #8
 80000f8:	ba12      	rev	r2, r2
 80000fa:	0c03      	lsrs	r3, r0, #16
 80000fc:	428b      	cmp	r3, r1
 80000fe:	d302      	bcc.n	8000106 <__udivsi3+0x32>
 8000100:	1212      	asrs	r2, r2, #8
 8000102:	0209      	lsls	r1, r1, #8
 8000104:	d065      	beq.n	80001d2 <__udivsi3+0xfe>
 8000106:	0b03      	lsrs	r3, r0, #12
 8000108:	428b      	cmp	r3, r1
 800010a:	d319      	bcc.n	8000140 <__udivsi3+0x6c>
 800010c:	e000      	b.n	8000110 <__udivsi3+0x3c>
 800010e:	0a09      	lsrs	r1, r1, #8
 8000110:	0bc3      	lsrs	r3, r0, #15
 8000112:	428b      	cmp	r3, r1
 8000114:	d301      	bcc.n	800011a <__udivsi3+0x46>
 8000116:	03cb      	lsls	r3, r1, #15
 8000118:	1ac0      	subs	r0, r0, r3
 800011a:	4152      	adcs	r2, r2
 800011c:	0b83      	lsrs	r3, r0, #14
 800011e:	428b      	cmp	r3, r1
 8000120:	d301      	bcc.n	8000126 <__udivsi3+0x52>
 8000122:	038b      	lsls	r3, r1, #14
 8000124:	1ac0      	subs	r0, r0, r3
 8000126:	4152      	adcs	r2, r2
 8000128:	0b43      	lsrs	r3, r0, #13
 800012a:	428b      	cmp	r3, r1
 800012c:	d301      	bcc.n	8000132 <__udivsi3+0x5e>
 800012e:	034b      	lsls	r3, r1, #13
 8000130:	1ac0      	subs	r0, r0, r3
 8000132:	4152      	adcs	r2, r2
 8000134:	0b03      	lsrs	r3, r0, #12
 8000136:	428b      	cmp	r3, r1
 8000138:	d301      	bcc.n	800013e <__udivsi3+0x6a>
 800013a:	030b      	lsls	r3, r1, #12
 800013c:	1ac0      	subs	r0, r0, r3
 800013e:	4152      	adcs	r2, r2
 8000140:	0ac3      	lsrs	r3, r0, #11
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x76>
 8000146:	02cb      	lsls	r3, r1, #11
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0a83      	lsrs	r3, r0, #10
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x82>
 8000152:	028b      	lsls	r3, r1, #10
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0a43      	lsrs	r3, r0, #9
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x8e>
 800015e:	024b      	lsls	r3, r1, #9
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0a03      	lsrs	r3, r0, #8
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x9a>
 800016a:	020b      	lsls	r3, r1, #8
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	d2cd      	bcs.n	800010e <__udivsi3+0x3a>
 8000172:	09c3      	lsrs	r3, r0, #7
 8000174:	428b      	cmp	r3, r1
 8000176:	d301      	bcc.n	800017c <__udivsi3+0xa8>
 8000178:	01cb      	lsls	r3, r1, #7
 800017a:	1ac0      	subs	r0, r0, r3
 800017c:	4152      	adcs	r2, r2
 800017e:	0983      	lsrs	r3, r0, #6
 8000180:	428b      	cmp	r3, r1
 8000182:	d301      	bcc.n	8000188 <__udivsi3+0xb4>
 8000184:	018b      	lsls	r3, r1, #6
 8000186:	1ac0      	subs	r0, r0, r3
 8000188:	4152      	adcs	r2, r2
 800018a:	0943      	lsrs	r3, r0, #5
 800018c:	428b      	cmp	r3, r1
 800018e:	d301      	bcc.n	8000194 <__udivsi3+0xc0>
 8000190:	014b      	lsls	r3, r1, #5
 8000192:	1ac0      	subs	r0, r0, r3
 8000194:	4152      	adcs	r2, r2
 8000196:	0903      	lsrs	r3, r0, #4
 8000198:	428b      	cmp	r3, r1
 800019a:	d301      	bcc.n	80001a0 <__udivsi3+0xcc>
 800019c:	010b      	lsls	r3, r1, #4
 800019e:	1ac0      	subs	r0, r0, r3
 80001a0:	4152      	adcs	r2, r2
 80001a2:	08c3      	lsrs	r3, r0, #3
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xd8>
 80001a8:	00cb      	lsls	r3, r1, #3
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0883      	lsrs	r3, r0, #2
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xe4>
 80001b4:	008b      	lsls	r3, r1, #2
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0843      	lsrs	r3, r0, #1
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xf0>
 80001c0:	004b      	lsls	r3, r1, #1
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	1a41      	subs	r1, r0, r1
 80001c8:	d200      	bcs.n	80001cc <__udivsi3+0xf8>
 80001ca:	4601      	mov	r1, r0
 80001cc:	4152      	adcs	r2, r2
 80001ce:	4610      	mov	r0, r2
 80001d0:	4770      	bx	lr
 80001d2:	e7ff      	b.n	80001d4 <__udivsi3+0x100>
 80001d4:	b501      	push	{r0, lr}
 80001d6:	2000      	movs	r0, #0
 80001d8:	f000 f8f0 	bl	80003bc <__aeabi_idiv0>
 80001dc:	bd02      	pop	{r1, pc}
 80001de:	46c0      	nop			@ (mov r8, r8)

080001e0 <__aeabi_uidivmod>:
 80001e0:	2900      	cmp	r1, #0
 80001e2:	d0f7      	beq.n	80001d4 <__udivsi3+0x100>
 80001e4:	e776      	b.n	80000d4 <__udivsi3>
 80001e6:	4770      	bx	lr

080001e8 <__divsi3>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	430b      	orrs	r3, r1
 80001ec:	d47f      	bmi.n	80002ee <__divsi3+0x106>
 80001ee:	2200      	movs	r2, #0
 80001f0:	0843      	lsrs	r3, r0, #1
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d374      	bcc.n	80002e0 <__divsi3+0xf8>
 80001f6:	0903      	lsrs	r3, r0, #4
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d35f      	bcc.n	80002bc <__divsi3+0xd4>
 80001fc:	0a03      	lsrs	r3, r0, #8
 80001fe:	428b      	cmp	r3, r1
 8000200:	d344      	bcc.n	800028c <__divsi3+0xa4>
 8000202:	0b03      	lsrs	r3, r0, #12
 8000204:	428b      	cmp	r3, r1
 8000206:	d328      	bcc.n	800025a <__divsi3+0x72>
 8000208:	0c03      	lsrs	r3, r0, #16
 800020a:	428b      	cmp	r3, r1
 800020c:	d30d      	bcc.n	800022a <__divsi3+0x42>
 800020e:	22ff      	movs	r2, #255	@ 0xff
 8000210:	0209      	lsls	r1, r1, #8
 8000212:	ba12      	rev	r2, r2
 8000214:	0c03      	lsrs	r3, r0, #16
 8000216:	428b      	cmp	r3, r1
 8000218:	d302      	bcc.n	8000220 <__divsi3+0x38>
 800021a:	1212      	asrs	r2, r2, #8
 800021c:	0209      	lsls	r1, r1, #8
 800021e:	d065      	beq.n	80002ec <__divsi3+0x104>
 8000220:	0b03      	lsrs	r3, r0, #12
 8000222:	428b      	cmp	r3, r1
 8000224:	d319      	bcc.n	800025a <__divsi3+0x72>
 8000226:	e000      	b.n	800022a <__divsi3+0x42>
 8000228:	0a09      	lsrs	r1, r1, #8
 800022a:	0bc3      	lsrs	r3, r0, #15
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__divsi3+0x4c>
 8000230:	03cb      	lsls	r3, r1, #15
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0b83      	lsrs	r3, r0, #14
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__divsi3+0x58>
 800023c:	038b      	lsls	r3, r1, #14
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0b43      	lsrs	r3, r0, #13
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__divsi3+0x64>
 8000248:	034b      	lsls	r3, r1, #13
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0b03      	lsrs	r3, r0, #12
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__divsi3+0x70>
 8000254:	030b      	lsls	r3, r1, #12
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0ac3      	lsrs	r3, r0, #11
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x7c>
 8000260:	02cb      	lsls	r3, r1, #11
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0a83      	lsrs	r3, r0, #10
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x88>
 800026c:	028b      	lsls	r3, r1, #10
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0a43      	lsrs	r3, r0, #9
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x94>
 8000278:	024b      	lsls	r3, r1, #9
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0a03      	lsrs	r3, r0, #8
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0xa0>
 8000284:	020b      	lsls	r3, r1, #8
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	d2cd      	bcs.n	8000228 <__divsi3+0x40>
 800028c:	09c3      	lsrs	r3, r0, #7
 800028e:	428b      	cmp	r3, r1
 8000290:	d301      	bcc.n	8000296 <__divsi3+0xae>
 8000292:	01cb      	lsls	r3, r1, #7
 8000294:	1ac0      	subs	r0, r0, r3
 8000296:	4152      	adcs	r2, r2
 8000298:	0983      	lsrs	r3, r0, #6
 800029a:	428b      	cmp	r3, r1
 800029c:	d301      	bcc.n	80002a2 <__divsi3+0xba>
 800029e:	018b      	lsls	r3, r1, #6
 80002a0:	1ac0      	subs	r0, r0, r3
 80002a2:	4152      	adcs	r2, r2
 80002a4:	0943      	lsrs	r3, r0, #5
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d301      	bcc.n	80002ae <__divsi3+0xc6>
 80002aa:	014b      	lsls	r3, r1, #5
 80002ac:	1ac0      	subs	r0, r0, r3
 80002ae:	4152      	adcs	r2, r2
 80002b0:	0903      	lsrs	r3, r0, #4
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d301      	bcc.n	80002ba <__divsi3+0xd2>
 80002b6:	010b      	lsls	r3, r1, #4
 80002b8:	1ac0      	subs	r0, r0, r3
 80002ba:	4152      	adcs	r2, r2
 80002bc:	08c3      	lsrs	r3, r0, #3
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xde>
 80002c2:	00cb      	lsls	r3, r1, #3
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0883      	lsrs	r3, r0, #2
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xea>
 80002ce:	008b      	lsls	r3, r1, #2
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0843      	lsrs	r3, r0, #1
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xf6>
 80002da:	004b      	lsls	r3, r1, #1
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	1a41      	subs	r1, r0, r1
 80002e2:	d200      	bcs.n	80002e6 <__divsi3+0xfe>
 80002e4:	4601      	mov	r1, r0
 80002e6:	4152      	adcs	r2, r2
 80002e8:	4610      	mov	r0, r2
 80002ea:	4770      	bx	lr
 80002ec:	e05d      	b.n	80003aa <__divsi3+0x1c2>
 80002ee:	0fca      	lsrs	r2, r1, #31
 80002f0:	d000      	beq.n	80002f4 <__divsi3+0x10c>
 80002f2:	4249      	negs	r1, r1
 80002f4:	1003      	asrs	r3, r0, #32
 80002f6:	d300      	bcc.n	80002fa <__divsi3+0x112>
 80002f8:	4240      	negs	r0, r0
 80002fa:	4053      	eors	r3, r2
 80002fc:	2200      	movs	r2, #0
 80002fe:	469c      	mov	ip, r3
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d32d      	bcc.n	8000362 <__divsi3+0x17a>
 8000306:	0a03      	lsrs	r3, r0, #8
 8000308:	428b      	cmp	r3, r1
 800030a:	d312      	bcc.n	8000332 <__divsi3+0x14a>
 800030c:	22fc      	movs	r2, #252	@ 0xfc
 800030e:	0189      	lsls	r1, r1, #6
 8000310:	ba12      	rev	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d30c      	bcc.n	8000332 <__divsi3+0x14a>
 8000318:	0189      	lsls	r1, r1, #6
 800031a:	1192      	asrs	r2, r2, #6
 800031c:	428b      	cmp	r3, r1
 800031e:	d308      	bcc.n	8000332 <__divsi3+0x14a>
 8000320:	0189      	lsls	r1, r1, #6
 8000322:	1192      	asrs	r2, r2, #6
 8000324:	428b      	cmp	r3, r1
 8000326:	d304      	bcc.n	8000332 <__divsi3+0x14a>
 8000328:	0189      	lsls	r1, r1, #6
 800032a:	d03a      	beq.n	80003a2 <__divsi3+0x1ba>
 800032c:	1192      	asrs	r2, r2, #6
 800032e:	e000      	b.n	8000332 <__divsi3+0x14a>
 8000330:	0989      	lsrs	r1, r1, #6
 8000332:	09c3      	lsrs	r3, r0, #7
 8000334:	428b      	cmp	r3, r1
 8000336:	d301      	bcc.n	800033c <__divsi3+0x154>
 8000338:	01cb      	lsls	r3, r1, #7
 800033a:	1ac0      	subs	r0, r0, r3
 800033c:	4152      	adcs	r2, r2
 800033e:	0983      	lsrs	r3, r0, #6
 8000340:	428b      	cmp	r3, r1
 8000342:	d301      	bcc.n	8000348 <__divsi3+0x160>
 8000344:	018b      	lsls	r3, r1, #6
 8000346:	1ac0      	subs	r0, r0, r3
 8000348:	4152      	adcs	r2, r2
 800034a:	0943      	lsrs	r3, r0, #5
 800034c:	428b      	cmp	r3, r1
 800034e:	d301      	bcc.n	8000354 <__divsi3+0x16c>
 8000350:	014b      	lsls	r3, r1, #5
 8000352:	1ac0      	subs	r0, r0, r3
 8000354:	4152      	adcs	r2, r2
 8000356:	0903      	lsrs	r3, r0, #4
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x178>
 800035c:	010b      	lsls	r3, r1, #4
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	08c3      	lsrs	r3, r0, #3
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x184>
 8000368:	00cb      	lsls	r3, r1, #3
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0883      	lsrs	r3, r0, #2
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x190>
 8000374:	008b      	lsls	r3, r1, #2
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	d2d9      	bcs.n	8000330 <__divsi3+0x148>
 800037c:	0843      	lsrs	r3, r0, #1
 800037e:	428b      	cmp	r3, r1
 8000380:	d301      	bcc.n	8000386 <__divsi3+0x19e>
 8000382:	004b      	lsls	r3, r1, #1
 8000384:	1ac0      	subs	r0, r0, r3
 8000386:	4152      	adcs	r2, r2
 8000388:	1a41      	subs	r1, r0, r1
 800038a:	d200      	bcs.n	800038e <__divsi3+0x1a6>
 800038c:	4601      	mov	r1, r0
 800038e:	4663      	mov	r3, ip
 8000390:	4152      	adcs	r2, r2
 8000392:	105b      	asrs	r3, r3, #1
 8000394:	4610      	mov	r0, r2
 8000396:	d301      	bcc.n	800039c <__divsi3+0x1b4>
 8000398:	4240      	negs	r0, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d500      	bpl.n	80003a0 <__divsi3+0x1b8>
 800039e:	4249      	negs	r1, r1
 80003a0:	4770      	bx	lr
 80003a2:	4663      	mov	r3, ip
 80003a4:	105b      	asrs	r3, r3, #1
 80003a6:	d300      	bcc.n	80003aa <__divsi3+0x1c2>
 80003a8:	4240      	negs	r0, r0
 80003aa:	b501      	push	{r0, lr}
 80003ac:	2000      	movs	r0, #0
 80003ae:	f000 f805 	bl	80003bc <__aeabi_idiv0>
 80003b2:	bd02      	pop	{r1, pc}

080003b4 <__aeabi_idivmod>:
 80003b4:	2900      	cmp	r1, #0
 80003b6:	d0f8      	beq.n	80003aa <__divsi3+0x1c2>
 80003b8:	e716      	b.n	80001e8 <__divsi3>
 80003ba:	4770      	bx	lr

080003bc <__aeabi_idiv0>:
 80003bc:	4770      	bx	lr
 80003be:	46c0      	nop			@ (mov r8, r8)

080003c0 <__do_global_dtors_aux>:
 80003c0:	b510      	push	{r4, lr}
 80003c2:	4c06      	ldr	r4, [pc, #24]	@ (80003dc <__do_global_dtors_aux+0x1c>)
 80003c4:	7823      	ldrb	r3, [r4, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d107      	bne.n	80003da <__do_global_dtors_aux+0x1a>
 80003ca:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <__do_global_dtors_aux+0x20>)
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d002      	beq.n	80003d6 <__do_global_dtors_aux+0x16>
 80003d0:	4804      	ldr	r0, [pc, #16]	@ (80003e4 <__do_global_dtors_aux+0x24>)
 80003d2:	e000      	b.n	80003d6 <__do_global_dtors_aux+0x16>
 80003d4:	bf00      	nop
 80003d6:	2301      	movs	r3, #1
 80003d8:	7023      	strb	r3, [r4, #0]
 80003da:	bd10      	pop	{r4, pc}
 80003dc:	20000068 	.word	0x20000068
 80003e0:	00000000 	.word	0x00000000
 80003e4:	080027ac 	.word	0x080027ac

080003e8 <frame_dummy>:
 80003e8:	4b04      	ldr	r3, [pc, #16]	@ (80003fc <frame_dummy+0x14>)
 80003ea:	b510      	push	{r4, lr}
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d003      	beq.n	80003f8 <frame_dummy+0x10>
 80003f0:	4903      	ldr	r1, [pc, #12]	@ (8000400 <frame_dummy+0x18>)
 80003f2:	4804      	ldr	r0, [pc, #16]	@ (8000404 <frame_dummy+0x1c>)
 80003f4:	e000      	b.n	80003f8 <frame_dummy+0x10>
 80003f6:	bf00      	nop
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	00000000 	.word	0x00000000
 8000400:	2000006c 	.word	0x2000006c
 8000404:	080027ac 	.word	0x080027ac

08000408 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000408:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <MX_GPIO_Init+0x38>)
 800040c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800040e:	2204      	movs	r2, #4
 8000410:	4311      	orrs	r1, r2
 8000412:	6359      	str	r1, [r3, #52]	@ 0x34
 8000414:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000416:	400a      	ands	r2, r1
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800041e:	2220      	movs	r2, #32
 8000420:	4311      	orrs	r1, r2
 8000422:	6359      	str	r1, [r3, #52]	@ 0x34
 8000424:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000426:	400a      	ands	r2, r1
 8000428:	9202      	str	r2, [sp, #8]
 800042a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800042e:	2201      	movs	r2, #1
 8000430:	4311      	orrs	r1, r2
 8000432:	6359      	str	r1, [r3, #52]	@ 0x34
 8000434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000436:	401a      	ands	r2, r3
 8000438:	9203      	str	r2, [sp, #12]
 800043a:	9b03      	ldr	r3, [sp, #12]

}
 800043c:	b004      	add	sp, #16
 800043e:	4770      	bx	lr
 8000440:	40021000 	.word	0x40021000

08000444 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
 PUTCHAR_PROTOTYPE
 {
 8000444:	b500      	push	{lr}
 8000446:	b083      	sub	sp, #12
 8000448:	9001      	str	r0, [sp, #4]
   /* Place your implementation of fputc here */
   /* e.g. write a character to the USART1 and Loop until the end of transmission */
   HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800044a:	4804      	ldr	r0, [pc, #16]	@ (800045c <__io_putchar+0x18>)
 800044c:	4b04      	ldr	r3, [pc, #16]	@ (8000460 <__io_putchar+0x1c>)
 800044e:	2201      	movs	r2, #1
 8000450:	a901      	add	r1, sp, #4
 8000452:	f000 fef2 	bl	800123a <HAL_UART_Transmit>
 
   return ch;
 8000456:	9801      	ldr	r0, [sp, #4]
 }
 8000458:	b003      	add	sp, #12
 800045a:	bd00      	pop	{pc}
 800045c:	2000008c 	.word	0x2000008c
 8000460:	0000ffff 	.word	0x0000ffff

08000464 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000466:	e7fe      	b.n	8000466 <Error_Handler+0x2>

08000468 <SystemClock_Config>:
{
 8000468:	b510      	push	{r4, lr}
 800046a:	b08c      	sub	sp, #48	@ 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046c:	ac05      	add	r4, sp, #20
 800046e:	221c      	movs	r2, #28
 8000470:	2100      	movs	r1, #0
 8000472:	0020      	movs	r0, r4
 8000474:	f001 fb5e 	bl	8001b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	2214      	movs	r2, #20
 800047a:	2100      	movs	r1, #0
 800047c:	4668      	mov	r0, sp
 800047e:	f001 fb59 	bl	8001b34 <memset>
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000482:	4a13      	ldr	r2, [pc, #76]	@ (80004d0 <SystemClock_Config+0x68>)
 8000484:	6813      	ldr	r3, [r2, #0]
 8000486:	2107      	movs	r1, #7
 8000488:	438b      	bics	r3, r1
 800048a:	3906      	subs	r1, #6
 800048c:	430b      	orrs	r3, r1
 800048e:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000490:	2302      	movs	r3, #2
 8000492:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	33fe      	adds	r3, #254	@ 0xfe
 8000496:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049c:	3340      	adds	r3, #64	@ 0x40
 800049e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	0020      	movs	r0, r4
 80004a2:	f000 f9e3 	bl	800086c <HAL_RCC_OscConfig>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d10e      	bne.n	80004c8 <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	4668      	mov	r0, sp
 80004ac:	2307      	movs	r3, #7
 80004ae:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b0:	2300      	movs	r3, #0
 80004b2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004b6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004b8:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ba:	2101      	movs	r1, #1
 80004bc:	f000 fb62 	bl	8000b84 <HAL_RCC_ClockConfig>
 80004c0:	2800      	cmp	r0, #0
 80004c2:	d103      	bne.n	80004cc <SystemClock_Config+0x64>
}
 80004c4:	b00c      	add	sp, #48	@ 0x30
 80004c6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80004c8:	f7ff ffcc 	bl	8000464 <Error_Handler>
    Error_Handler();
 80004cc:	f7ff ffca 	bl	8000464 <Error_Handler>
 80004d0:	40022000 	.word	0x40022000

080004d4 <main>:
{
 80004d4:	b510      	push	{r4, lr}
 80004d6:	b082      	sub	sp, #8
  HAL_Init();
 80004d8:	f000 f84e 	bl	8000578 <HAL_Init>
  SystemClock_Config();
 80004dc:	f7ff ffc4 	bl	8000468 <SystemClock_Config>
  MX_GPIO_Init();
 80004e0:	f7ff ff92 	bl	8000408 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e4:	f001 f962 	bl	80017ac <MX_USART1_UART_Init>
    printf("Hello World\n\r");
 80004e8:	480a      	ldr	r0, [pc, #40]	@ (8000514 <main+0x40>)
 80004ea:	f001 fac7 	bl	8001a7c <iprintf>
    HAL_Delay(1000);
 80004ee:	20fa      	movs	r0, #250	@ 0xfa
 80004f0:	0080      	lsls	r0, r0, #2
 80004f2:	f000 f85f 	bl	80005b4 <HAL_Delay>
    HAL_UART_Receive(&huart1, &rxData, 1, HAL_MAX_DELAY);
 80004f6:	2301      	movs	r3, #1
 80004f8:	466a      	mov	r2, sp
 80004fa:	1dd4      	adds	r4, r2, #7
 80004fc:	4806      	ldr	r0, [pc, #24]	@ (8000518 <main+0x44>)
 80004fe:	425b      	negs	r3, r3
 8000500:	2201      	movs	r2, #1
 8000502:	0021      	movs	r1, r4
 8000504:	f000 ff16 	bl	8001334 <HAL_UART_Receive>
    printf("Received: %c\n\r", rxData);
 8000508:	7821      	ldrb	r1, [r4, #0]
 800050a:	4804      	ldr	r0, [pc, #16]	@ (800051c <main+0x48>)
 800050c:	f001 fab6 	bl	8001a7c <iprintf>
  while (1)
 8000510:	e7ea      	b.n	80004e8 <main+0x14>
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	080027c4 	.word	0x080027c4
 8000518:	2000008c 	.word	0x2000008c
 800051c:	080027d4 	.word	0x080027d4

08000520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b510      	push	{r4, lr}
 8000522:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <HAL_InitTick+0x4c>)
 8000526:	7819      	ldrb	r1, [r3, #0]
 8000528:	2900      	cmp	r1, #0
 800052a:	d101      	bne.n	8000530 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800052c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800052e:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000530:	20fa      	movs	r0, #250	@ 0xfa
 8000532:	0080      	lsls	r0, r0, #2
 8000534:	f7ff fdce 	bl	80000d4 <__udivsi3>
 8000538:	0001      	movs	r1, r0
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <HAL_InitTick+0x50>)
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	f7ff fdc9 	bl	80000d4 <__udivsi3>
 8000542:	f000 f899 	bl	8000678 <HAL_SYSTICK_Config>
 8000546:	2800      	cmp	r0, #0
 8000548:	d10d      	bne.n	8000566 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	2c03      	cmp	r4, #3
 800054c:	d901      	bls.n	8000552 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 800054e:	2001      	movs	r0, #1
 8000550:	e7ed      	b.n	800052e <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000552:	3001      	adds	r0, #1
 8000554:	2200      	movs	r2, #0
 8000556:	0021      	movs	r1, r4
 8000558:	4240      	negs	r0, r0
 800055a:	f000 f889 	bl	8000670 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800055e:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <HAL_InitTick+0x54>)
 8000560:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000562:	2000      	movs	r0, #0
 8000564:	e7e3      	b.n	800052e <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8000566:	2001      	movs	r0, #1
 8000568:	e7e1      	b.n	800052e <HAL_InitTick+0xe>
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	20000000 	.word	0x20000000
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004

08000578 <HAL_Init>:
{
 8000578:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800057a:	2003      	movs	r0, #3
 800057c:	f7ff ffd0 	bl	8000520 <HAL_InitTick>
 8000580:	1e04      	subs	r4, r0, #0
 8000582:	d002      	beq.n	800058a <HAL_Init+0x12>
    status = HAL_ERROR;
 8000584:	2401      	movs	r4, #1
}
 8000586:	0020      	movs	r0, r4
 8000588:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800058a:	f000 f957 	bl	800083c <HAL_MspInit>
 800058e:	e7fa      	b.n	8000586 <HAL_Init+0xe>

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000590:	4b03      	ldr	r3, [pc, #12]	@ (80005a0 <HAL_IncTick+0x10>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4a03      	ldr	r2, [pc, #12]	@ (80005a4 <HAL_IncTick+0x14>)
 8000596:	6811      	ldr	r1, [r2, #0]
 8000598:	185b      	adds	r3, r3, r1
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	4770      	bx	lr
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000084 	.word	0x20000084

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	@ (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	20000084 	.word	0x20000084

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff fff6 	bl	80005a8 <HAL_GetTick>
 80005bc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	1c63      	adds	r3, r4, #1
 80005c0:	d002      	beq.n	80005c8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c2:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <HAL_Delay+0x20>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005c8:	f7ff ffee 	bl	80005a8 <HAL_GetTick>
 80005cc:	1b40      	subs	r0, r0, r5
 80005ce:	42a0      	cmp	r0, r4
 80005d0:	d3fa      	bcc.n	80005c8 <HAL_Delay+0x14>
  {
  }
}
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	20000000 	.word	0x20000000

080005d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d8:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 80005da:	2800      	cmp	r0, #0
 80005dc:	db11      	blt.n	8000602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005de:	0883      	lsrs	r3, r0, #2
 80005e0:	4d13      	ldr	r5, [pc, #76]	@ (8000630 <__NVIC_SetPriority+0x58>)
 80005e2:	33c0      	adds	r3, #192	@ 0xc0
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	595c      	ldr	r4, [r3, r5]
 80005e8:	2203      	movs	r2, #3
 80005ea:	4010      	ands	r0, r2
 80005ec:	00c0      	lsls	r0, r0, #3
 80005ee:	32fc      	adds	r2, #252	@ 0xfc
 80005f0:	0016      	movs	r6, r2
 80005f2:	4086      	lsls	r6, r0
 80005f4:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005f6:	0189      	lsls	r1, r1, #6
 80005f8:	400a      	ands	r2, r1
 80005fa:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005fc:	4322      	orrs	r2, r4
 80005fe:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000600:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000602:	230f      	movs	r3, #15
 8000604:	4003      	ands	r3, r0
 8000606:	3b08      	subs	r3, #8
 8000608:	089b      	lsrs	r3, r3, #2
 800060a:	3306      	adds	r3, #6
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4a09      	ldr	r2, [pc, #36]	@ (8000634 <__NVIC_SetPriority+0x5c>)
 8000610:	4694      	mov	ip, r2
 8000612:	4463      	add	r3, ip
 8000614:	685c      	ldr	r4, [r3, #4]
 8000616:	2203      	movs	r2, #3
 8000618:	4010      	ands	r0, r2
 800061a:	00c0      	lsls	r0, r0, #3
 800061c:	32fc      	adds	r2, #252	@ 0xfc
 800061e:	0015      	movs	r5, r2
 8000620:	4085      	lsls	r5, r0
 8000622:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000624:	0189      	lsls	r1, r1, #6
 8000626:	400a      	ands	r2, r1
 8000628:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800062a:	4322      	orrs	r2, r4
 800062c:	605a      	str	r2, [r3, #4]
}
 800062e:	e7e7      	b.n	8000600 <__NVIC_SetPriority+0x28>
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000638:	3801      	subs	r0, #1
 800063a:	2380      	movs	r3, #128	@ 0x80
 800063c:	045b      	lsls	r3, r3, #17
 800063e:	4298      	cmp	r0, r3
 8000640:	d20f      	bcs.n	8000662 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000642:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <SysTick_Config+0x30>)
 8000644:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000646:	4809      	ldr	r0, [pc, #36]	@ (800066c <SysTick_Config+0x34>)
 8000648:	6a03      	ldr	r3, [r0, #32]
 800064a:	021b      	lsls	r3, r3, #8
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	21c0      	movs	r1, #192	@ 0xc0
 8000650:	0609      	lsls	r1, r1, #24
 8000652:	430b      	orrs	r3, r1
 8000654:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000656:	2300      	movs	r3, #0
 8000658:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	3307      	adds	r3, #7
 800065c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800065e:	2000      	movs	r0, #0
}
 8000660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2001      	movs	r0, #1
 8000664:	e7fc      	b.n	8000660 <SysTick_Config+0x28>
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000670:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000672:	f7ff ffb1 	bl	80005d8 <__NVIC_SetPriority>
}
 8000676:	bd10      	pop	{r4, pc}

08000678 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000678:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 800067a:	f7ff ffdd 	bl	8000638 <SysTick_Config>
}
 800067e:	bd10      	pop	{r4, pc}

08000680 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	46d6      	mov	lr, sl
 8000684:	464f      	mov	r7, r9
 8000686:	4646      	mov	r6, r8
 8000688:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800068a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800068c:	e03b      	b.n	8000706 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800068e:	2505      	movs	r5, #5
 8000690:	e000      	b.n	8000694 <HAL_GPIO_Init+0x14>
 8000692:	2500      	movs	r5, #0
 8000694:	40a5      	lsls	r5, r4
 8000696:	002c      	movs	r4, r5
 8000698:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 800069a:	4d63      	ldr	r5, [pc, #396]	@ (8000828 <HAL_GPIO_Init+0x1a8>)
 800069c:	3218      	adds	r2, #24
 800069e:	0092      	lsls	r2, r2, #2
 80006a0:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 80006a6:	464a      	mov	r2, r9
 80006a8:	43d2      	mvns	r2, r2
 80006aa:	003d      	movs	r5, r7
 80006ac:	464c      	mov	r4, r9
 80006ae:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006b0:	684c      	ldr	r4, [r1, #4]
 80006b2:	03e4      	lsls	r4, r4, #15
 80006b4:	d502      	bpl.n	80006bc <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 80006b6:	003d      	movs	r5, r7
 80006b8:	464c      	mov	r4, r9
 80006ba:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 80006bc:	4c5a      	ldr	r4, [pc, #360]	@ (8000828 <HAL_GPIO_Init+0x1a8>)
 80006be:	2780      	movs	r7, #128	@ 0x80
 80006c0:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 80006c2:	2584      	movs	r5, #132	@ 0x84
 80006c4:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 80006c6:	003d      	movs	r5, r7
 80006c8:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ca:	684c      	ldr	r4, [r1, #4]
 80006cc:	03a4      	lsls	r4, r4, #14
 80006ce:	d502      	bpl.n	80006d6 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 80006d0:	003d      	movs	r5, r7
 80006d2:	464c      	mov	r4, r9
 80006d4:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 80006d6:	4c54      	ldr	r4, [pc, #336]	@ (8000828 <HAL_GPIO_Init+0x1a8>)
 80006d8:	2784      	movs	r7, #132	@ 0x84
 80006da:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80006dc:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 80006de:	003d      	movs	r5, r7
 80006e0:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006e2:	684c      	ldr	r4, [r1, #4]
 80006e4:	02e4      	lsls	r4, r4, #11
 80006e6:	d502      	bpl.n	80006ee <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 80006e8:	003d      	movs	r5, r7
 80006ea:	464c      	mov	r4, r9
 80006ec:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 80006ee:	4c4e      	ldr	r4, [pc, #312]	@ (8000828 <HAL_GPIO_Init+0x1a8>)
 80006f0:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 80006f2:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 80006f4:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006f6:	684c      	ldr	r4, [r1, #4]
 80006f8:	02a4      	lsls	r4, r4, #10
 80006fa:	d501      	bpl.n	8000700 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 80006fc:	464a      	mov	r2, r9
 80006fe:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 8000700:	4c49      	ldr	r4, [pc, #292]	@ (8000828 <HAL_GPIO_Init+0x1a8>)
 8000702:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8000704:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000706:	680c      	ldr	r4, [r1, #0]
 8000708:	0022      	movs	r2, r4
 800070a:	40da      	lsrs	r2, r3
 800070c:	d100      	bne.n	8000710 <HAL_GPIO_Init+0x90>
 800070e:	e086      	b.n	800081e <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000710:	2201      	movs	r2, #1
 8000712:	409a      	lsls	r2, r3
 8000714:	0026      	movs	r6, r4
 8000716:	4016      	ands	r6, r2
 8000718:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 800071a:	4214      	tst	r4, r2
 800071c:	d0f2      	beq.n	8000704 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800071e:	684c      	ldr	r4, [r1, #4]
 8000720:	2c02      	cmp	r4, #2
 8000722:	d001      	beq.n	8000728 <HAL_GPIO_Init+0xa8>
 8000724:	2c12      	cmp	r4, #18
 8000726:	d118      	bne.n	800075a <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8000728:	08dd      	lsrs	r5, r3, #3
 800072a:	3508      	adds	r5, #8
 800072c:	00ad      	lsls	r5, r5, #2
 800072e:	582c      	ldr	r4, [r5, r0]
 8000730:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000732:	2707      	movs	r7, #7
 8000734:	401f      	ands	r7, r3
 8000736:	00bf      	lsls	r7, r7, #2
 8000738:	240f      	movs	r4, #15
 800073a:	46a2      	mov	sl, r4
 800073c:	0026      	movs	r6, r4
 800073e:	40be      	lsls	r6, r7
 8000740:	46b0      	mov	r8, r6
 8000742:	4666      	mov	r6, ip
 8000744:	4644      	mov	r4, r8
 8000746:	43a6      	bics	r6, r4
 8000748:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800074a:	690c      	ldr	r4, [r1, #16]
 800074c:	4656      	mov	r6, sl
 800074e:	4026      	ands	r6, r4
 8000750:	0034      	movs	r4, r6
 8000752:	40bc      	lsls	r4, r7
 8000754:	4666      	mov	r6, ip
 8000756:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8000758:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 800075a:	6804      	ldr	r4, [r0, #0]
 800075c:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800075e:	005d      	lsls	r5, r3, #1
 8000760:	2403      	movs	r4, #3
 8000762:	46a2      	mov	sl, r4
 8000764:	0027      	movs	r7, r4
 8000766:	40af      	lsls	r7, r5
 8000768:	46b8      	mov	r8, r7
 800076a:	43ff      	mvns	r7, r7
 800076c:	4666      	mov	r6, ip
 800076e:	4644      	mov	r4, r8
 8000770:	43a6      	bics	r6, r4
 8000772:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000774:	684c      	ldr	r4, [r1, #4]
 8000776:	4656      	mov	r6, sl
 8000778:	4026      	ands	r6, r4
 800077a:	0034      	movs	r4, r6
 800077c:	40ac      	lsls	r4, r5
 800077e:	4666      	mov	r6, ip
 8000780:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8000782:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000784:	684c      	ldr	r4, [r1, #4]
 8000786:	1e66      	subs	r6, r4, #1
 8000788:	2e01      	cmp	r6, #1
 800078a:	d903      	bls.n	8000794 <HAL_GPIO_Init+0x114>
 800078c:	2c11      	cmp	r4, #17
 800078e:	d001      	beq.n	8000794 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000790:	2c12      	cmp	r4, #18
 8000792:	d112      	bne.n	80007ba <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8000794:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000796:	403c      	ands	r4, r7
 8000798:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800079a:	68cc      	ldr	r4, [r1, #12]
 800079c:	40ac      	lsls	r4, r5
 800079e:	4666      	mov	r6, ip
 80007a0:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 80007a2:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 80007a4:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007a6:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007a8:	684a      	ldr	r2, [r1, #4]
 80007aa:	0912      	lsrs	r2, r2, #4
 80007ac:	4694      	mov	ip, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	4666      	mov	r6, ip
 80007b2:	4032      	ands	r2, r6
 80007b4:	409a      	lsls	r2, r3
 80007b6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 80007b8:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80007ba:	684a      	ldr	r2, [r1, #4]
 80007bc:	2a03      	cmp	r2, #3
 80007be:	d005      	beq.n	80007cc <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 80007c0:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80007c2:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80007c4:	688a      	ldr	r2, [r1, #8]
 80007c6:	40aa      	lsls	r2, r5
 80007c8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 80007ca:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007cc:	684a      	ldr	r2, [r1, #4]
 80007ce:	00d2      	lsls	r2, r2, #3
 80007d0:	d598      	bpl.n	8000704 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 80007d2:	089a      	lsrs	r2, r3, #2
 80007d4:	0014      	movs	r4, r2
 80007d6:	3418      	adds	r4, #24
 80007d8:	00a4      	lsls	r4, r4, #2
 80007da:	4d13      	ldr	r5, [pc, #76]	@ (8000828 <HAL_GPIO_Init+0x1a8>)
 80007dc:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80007de:	2403      	movs	r4, #3
 80007e0:	401c      	ands	r4, r3
 80007e2:	00e4      	lsls	r4, r4, #3
 80007e4:	250f      	movs	r5, #15
 80007e6:	40a5      	lsls	r5, r4
 80007e8:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80007ea:	25a0      	movs	r5, #160	@ 0xa0
 80007ec:	05ed      	lsls	r5, r5, #23
 80007ee:	42a8      	cmp	r0, r5
 80007f0:	d100      	bne.n	80007f4 <HAL_GPIO_Init+0x174>
 80007f2:	e74e      	b.n	8000692 <HAL_GPIO_Init+0x12>
 80007f4:	4d0d      	ldr	r5, [pc, #52]	@ (800082c <HAL_GPIO_Init+0x1ac>)
 80007f6:	42a8      	cmp	r0, r5
 80007f8:	d00b      	beq.n	8000812 <HAL_GPIO_Init+0x192>
 80007fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000830 <HAL_GPIO_Init+0x1b0>)
 80007fc:	42a8      	cmp	r0, r5
 80007fe:	d00a      	beq.n	8000816 <HAL_GPIO_Init+0x196>
 8000800:	4d0c      	ldr	r5, [pc, #48]	@ (8000834 <HAL_GPIO_Init+0x1b4>)
 8000802:	42a8      	cmp	r0, r5
 8000804:	d009      	beq.n	800081a <HAL_GPIO_Init+0x19a>
 8000806:	4d0c      	ldr	r5, [pc, #48]	@ (8000838 <HAL_GPIO_Init+0x1b8>)
 8000808:	42a8      	cmp	r0, r5
 800080a:	d100      	bne.n	800080e <HAL_GPIO_Init+0x18e>
 800080c:	e73f      	b.n	800068e <HAL_GPIO_Init+0xe>
 800080e:	2506      	movs	r5, #6
 8000810:	e740      	b.n	8000694 <HAL_GPIO_Init+0x14>
 8000812:	2501      	movs	r5, #1
 8000814:	e73e      	b.n	8000694 <HAL_GPIO_Init+0x14>
 8000816:	2502      	movs	r5, #2
 8000818:	e73c      	b.n	8000694 <HAL_GPIO_Init+0x14>
 800081a:	2503      	movs	r5, #3
 800081c:	e73a      	b.n	8000694 <HAL_GPIO_Init+0x14>
  }
}
 800081e:	bce0      	pop	{r5, r6, r7}
 8000820:	46ba      	mov	sl, r7
 8000822:	46b1      	mov	r9, r6
 8000824:	46a8      	mov	r8, r5
 8000826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000828:	40021800 	.word	0x40021800
 800082c:	50000400 	.word	0x50000400
 8000830:	50000800 	.word	0x50000800
 8000834:	50000c00 	.word	0x50000c00
 8000838:	50001400 	.word	0x50001400

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <HAL_MspInit+0x2c>)
 8000840:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000842:	2201      	movs	r2, #1
 8000844:	4311      	orrs	r1, r2
 8000846:	6419      	str	r1, [r3, #64]	@ 0x40
 8000848:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800084a:	400a      	ands	r2, r1
 800084c:	9200      	str	r2, [sp, #0]
 800084e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000852:	2180      	movs	r1, #128	@ 0x80
 8000854:	0549      	lsls	r1, r1, #21
 8000856:	430a      	orrs	r2, r1
 8000858:	63da      	str	r2, [r3, #60]	@ 0x3c
 800085a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800085c:	400b      	ands	r3, r1
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	b002      	add	sp, #8
 8000864:	4770      	bx	lr
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000870:	d100      	bne.n	8000874 <HAL_RCC_OscConfig+0x8>
 8000872:	e139      	b.n	8000ae8 <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000874:	6803      	ldr	r3, [r0, #0]
 8000876:	07db      	lsls	r3, r3, #31
 8000878:	d52c      	bpl.n	80008d4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800087a:	4ba1      	ldr	r3, [pc, #644]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	2338      	movs	r3, #56	@ 0x38
 8000880:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000882:	2b08      	cmp	r3, #8
 8000884:	d022      	beq.n	80008cc <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000886:	6843      	ldr	r3, [r0, #4]
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	0252      	lsls	r2, r2, #9
 800088c:	4293      	cmp	r3, r2
 800088e:	d02e      	beq.n	80008ee <HAL_RCC_OscConfig+0x82>
 8000890:	22a0      	movs	r2, #160	@ 0xa0
 8000892:	02d2      	lsls	r2, r2, #11
 8000894:	4293      	cmp	r3, r2
 8000896:	d031      	beq.n	80008fc <HAL_RCC_OscConfig+0x90>
 8000898:	4b99      	ldr	r3, [pc, #612]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4999      	ldr	r1, [pc, #612]	@ (8000b04 <HAL_RCC_OscConfig+0x298>)
 800089e:	400a      	ands	r2, r1
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4998      	ldr	r1, [pc, #608]	@ (8000b08 <HAL_RCC_OscConfig+0x29c>)
 80008a6:	400a      	ands	r2, r1
 80008a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008aa:	6863      	ldr	r3, [r4, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d031      	beq.n	8000914 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008b0:	f7ff fe7a 	bl	80005a8 <HAL_GetTick>
 80008b4:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80008b6:	4b92      	ldr	r3, [pc, #584]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	039b      	lsls	r3, r3, #14
 80008bc:	d40a      	bmi.n	80008d4 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80008be:	f7ff fe73 	bl	80005a8 <HAL_GetTick>
 80008c2:	1b40      	subs	r0, r0, r5
 80008c4:	2864      	cmp	r0, #100	@ 0x64
 80008c6:	d9f6      	bls.n	80008b6 <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 80008c8:	2003      	movs	r0, #3
 80008ca:	e10e      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80008cc:	6843      	ldr	r3, [r0, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d100      	bne.n	80008d4 <HAL_RCC_OscConfig+0x68>
 80008d2:	e10b      	b.n	8000aec <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	079b      	lsls	r3, r3, #30
 80008d8:	d547      	bpl.n	800096a <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008da:	4b89      	ldr	r3, [pc, #548]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80008e0:	421a      	tst	r2, r3
 80008e2:	d161      	bne.n	80009a8 <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80008e4:	68e3      	ldr	r3, [r4, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d122      	bne.n	8000930 <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 80008ea:	2001      	movs	r0, #1
 80008ec:	e0fd      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ee:	4a84      	ldr	r2, [pc, #528]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 80008f0:	6811      	ldr	r1, [r2, #0]
 80008f2:	2380      	movs	r3, #128	@ 0x80
 80008f4:	025b      	lsls	r3, r3, #9
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e7d6      	b.n	80008aa <HAL_RCC_OscConfig+0x3e>
 80008fc:	4b80      	ldr	r3, [pc, #512]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 80008fe:	6819      	ldr	r1, [r3, #0]
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	02d2      	lsls	r2, r2, #11
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	2280      	movs	r2, #128	@ 0x80
 800090c:	0252      	lsls	r2, r2, #9
 800090e:	430a      	orrs	r2, r1
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	e7ca      	b.n	80008aa <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8000914:	f7ff fe48 	bl	80005a8 <HAL_GetTick>
 8000918:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800091a:	4b79      	ldr	r3, [pc, #484]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	039b      	lsls	r3, r3, #14
 8000920:	d5d8      	bpl.n	80008d4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000922:	f7ff fe41 	bl	80005a8 <HAL_GetTick>
 8000926:	1b40      	subs	r0, r0, r5
 8000928:	2864      	cmp	r0, #100	@ 0x64
 800092a:	d9f6      	bls.n	800091a <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 800092c:	2003      	movs	r0, #3
 800092e:	e0dc      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000930:	4b73      	ldr	r3, [pc, #460]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	4975      	ldr	r1, [pc, #468]	@ (8000b0c <HAL_RCC_OscConfig+0x2a0>)
 8000936:	400a      	ands	r2, r1
 8000938:	6961      	ldr	r1, [r4, #20]
 800093a:	0209      	lsls	r1, r1, #8
 800093c:	430a      	orrs	r2, r1
 800093e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4973      	ldr	r1, [pc, #460]	@ (8000b10 <HAL_RCC_OscConfig+0x2a4>)
 8000944:	400a      	ands	r2, r1
 8000946:	6921      	ldr	r1, [r4, #16]
 8000948:	430a      	orrs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	0adb      	lsrs	r3, r3, #11
 8000950:	2207      	movs	r2, #7
 8000952:	401a      	ands	r2, r3
 8000954:	4b6f      	ldr	r3, [pc, #444]	@ (8000b14 <HAL_RCC_OscConfig+0x2a8>)
 8000956:	40d3      	lsrs	r3, r2
 8000958:	4a6f      	ldr	r2, [pc, #444]	@ (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 800095a:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800095c:	4b6f      	ldr	r3, [pc, #444]	@ (8000b1c <HAL_RCC_OscConfig+0x2b0>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	f7ff fdde 	bl	8000520 <HAL_InitTick>
 8000964:	2800      	cmp	r0, #0
 8000966:	d000      	beq.n	800096a <HAL_RCC_OscConfig+0xfe>
 8000968:	e0c2      	b.n	8000af0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800096a:	6823      	ldr	r3, [r4, #0]
 800096c:	071b      	lsls	r3, r3, #28
 800096e:	d557      	bpl.n	8000a20 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000970:	4b63      	ldr	r3, [pc, #396]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	2338      	movs	r3, #56	@ 0x38
 8000976:	4013      	ands	r3, r2
 8000978:	2b18      	cmp	r3, #24
 800097a:	d04e      	beq.n	8000a1a <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800097c:	69a3      	ldr	r3, [r4, #24]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d077      	beq.n	8000a72 <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000982:	4a5f      	ldr	r2, [pc, #380]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000984:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8000986:	2101      	movs	r1, #1
 8000988:	430b      	orrs	r3, r1
 800098a:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800098c:	f7ff fe0c 	bl	80005a8 <HAL_GetTick>
 8000990:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000992:	4b5b      	ldr	r3, [pc, #364]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000996:	079b      	lsls	r3, r3, #30
 8000998:	d442      	bmi.n	8000a20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800099a:	f7ff fe05 	bl	80005a8 <HAL_GetTick>
 800099e:	1b40      	subs	r0, r0, r5
 80009a0:	2802      	cmp	r0, #2
 80009a2:	d9f6      	bls.n	8000992 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80009a4:	2003      	movs	r0, #3
 80009a6:	e0a0      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009a8:	68e3      	ldr	r3, [r4, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d022      	beq.n	80009f4 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80009ae:	4a54      	ldr	r2, [pc, #336]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 80009b0:	6813      	ldr	r3, [r2, #0]
 80009b2:	4957      	ldr	r1, [pc, #348]	@ (8000b10 <HAL_RCC_OscConfig+0x2a4>)
 80009b4:	400b      	ands	r3, r1
 80009b6:	6921      	ldr	r1, [r4, #16]
 80009b8:	430b      	orrs	r3, r1
 80009ba:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 80009bc:	6811      	ldr	r1, [r2, #0]
 80009be:	2380      	movs	r3, #128	@ 0x80
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	430b      	orrs	r3, r1
 80009c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80009c6:	f7ff fdef 	bl	80005a8 <HAL_GetTick>
 80009ca:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009cc:	4b4c      	ldr	r3, [pc, #304]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	055b      	lsls	r3, r3, #21
 80009d2:	d406      	bmi.n	80009e2 <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80009d4:	f7ff fde8 	bl	80005a8 <HAL_GetTick>
 80009d8:	1b40      	subs	r0, r0, r5
 80009da:	2802      	cmp	r0, #2
 80009dc:	d9f6      	bls.n	80009cc <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 80009de:	2003      	movs	r0, #3
 80009e0:	e083      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e2:	4947      	ldr	r1, [pc, #284]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 80009e4:	684b      	ldr	r3, [r1, #4]
 80009e6:	4a49      	ldr	r2, [pc, #292]	@ (8000b0c <HAL_RCC_OscConfig+0x2a0>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	6962      	ldr	r2, [r4, #20]
 80009ec:	0212      	lsls	r2, r2, #8
 80009ee:	4313      	orrs	r3, r2
 80009f0:	604b      	str	r3, [r1, #4]
 80009f2:	e7ba      	b.n	800096a <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 80009f4:	4a42      	ldr	r2, [pc, #264]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	4949      	ldr	r1, [pc, #292]	@ (8000b20 <HAL_RCC_OscConfig+0x2b4>)
 80009fa:	400b      	ands	r3, r1
 80009fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80009fe:	f7ff fdd3 	bl	80005a8 <HAL_GetTick>
 8000a02:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000a04:	4b3e      	ldr	r3, [pc, #248]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	055b      	lsls	r3, r3, #21
 8000a0a:	d5ae      	bpl.n	800096a <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000a0c:	f7ff fdcc 	bl	80005a8 <HAL_GetTick>
 8000a10:	1b40      	subs	r0, r0, r5
 8000a12:	2802      	cmp	r0, #2
 8000a14:	d9f6      	bls.n	8000a04 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8000a16:	2003      	movs	r0, #3
 8000a18:	e067      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000a1a:	69a3      	ldr	r3, [r4, #24]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d069      	beq.n	8000af4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	075b      	lsls	r3, r3, #29
 8000a24:	d568      	bpl.n	8000af8 <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000a26:	4b36      	ldr	r3, [pc, #216]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	2338      	movs	r3, #56	@ 0x38
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	2b20      	cmp	r3, #32
 8000a30:	d032      	beq.n	8000a98 <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a32:	68a3      	ldr	r3, [r4, #8]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d034      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x236>
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	d038      	beq.n	8000aae <HAL_RCC_OscConfig+0x242>
 8000a3c:	4b30      	ldr	r3, [pc, #192]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000a3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000a40:	2101      	movs	r1, #1
 8000a42:	438a      	bics	r2, r1
 8000a44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000a46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000a48:	3103      	adds	r1, #3
 8000a4a:	438a      	bics	r2, r1
 8000a4c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a4e:	68a3      	ldr	r3, [r4, #8]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d038      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a54:	f7ff fda8 	bl	80005a8 <HAL_GetTick>
 8000a58:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000a5a:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a5e:	079b      	lsls	r3, r3, #30
 8000a60:	d42f      	bmi.n	8000ac2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a62:	f7ff fda1 	bl	80005a8 <HAL_GetTick>
 8000a66:	1b00      	subs	r0, r0, r4
 8000a68:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <HAL_RCC_OscConfig+0x2b8>)
 8000a6a:	4298      	cmp	r0, r3
 8000a6c:	d9f5      	bls.n	8000a5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000a6e:	2003      	movs	r0, #3
 8000a70:	e03b      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8000a72:	4a23      	ldr	r2, [pc, #140]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000a74:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8000a76:	2101      	movs	r1, #1
 8000a78:	438b      	bics	r3, r1
 8000a7a:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000a7c:	f7ff fd94 	bl	80005a8 <HAL_GetTick>
 8000a80:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a86:	079b      	lsls	r3, r3, #30
 8000a88:	d5ca      	bpl.n	8000a20 <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000a8a:	f7ff fd8d 	bl	80005a8 <HAL_GetTick>
 8000a8e:	1b40      	subs	r0, r0, r5
 8000a90:	2802      	cmp	r0, #2
 8000a92:	d9f6      	bls.n	8000a82 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8000a94:	2003      	movs	r0, #3
 8000a96:	e028      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000a98:	68a3      	ldr	r3, [r4, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d02e      	beq.n	8000afc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	e023      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa2:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000aa4:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000aac:	e7cf      	b.n	8000a4e <HAL_RCC_OscConfig+0x1e2>
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000ab0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000ab8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000aba:	3903      	subs	r1, #3
 8000abc:	430a      	orrs	r2, r1
 8000abe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000ac0:	e7c5      	b.n	8000a4e <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	e011      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8000ac6:	f7ff fd6f 	bl	80005a8 <HAL_GetTick>
 8000aca:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <HAL_RCC_OscConfig+0x294>)
 8000ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ad0:	079b      	lsls	r3, r3, #30
 8000ad2:	d507      	bpl.n	8000ae4 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ad4:	f7ff fd68 	bl	80005a8 <HAL_GetTick>
 8000ad8:	1b00      	subs	r0, r0, r4
 8000ada:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <HAL_RCC_OscConfig+0x2b8>)
 8000adc:	4298      	cmp	r0, r3
 8000ade:	d9f5      	bls.n	8000acc <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	e002      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	e000      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8000ae8:	2001      	movs	r0, #1
}
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000aec:	2001      	movs	r0, #1
 8000aee:	e7fc      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 8000af0:	2001      	movs	r0, #1
 8000af2:	e7fa      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8000af4:	2001      	movs	r0, #1
 8000af6:	e7f8      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8000af8:	2000      	movs	r0, #0
 8000afa:	e7f6      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8000afc:	2001      	movs	r0, #1
 8000afe:	e7f4      	b.n	8000aea <HAL_RCC_OscConfig+0x27e>
 8000b00:	40021000 	.word	0x40021000
 8000b04:	fffeffff 	.word	0xfffeffff
 8000b08:	fffbffff 	.word	0xfffbffff
 8000b0c:	ffff80ff 	.word	0xffff80ff
 8000b10:	ffffc7ff 	.word	0xffffc7ff
 8000b14:	02dc6c00 	.word	0x02dc6c00
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000004 	.word	0x20000004
 8000b20:	fffffeff 	.word	0xfffffeff
 8000b24:	00001388 	.word	0x00001388

08000b28 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <HAL_RCC_GetSysClockFreq+0x54>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	2238      	movs	r2, #56	@ 0x38
 8000b2e:	421a      	tst	r2, r3
 8000b30:	d107      	bne.n	8000b42 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000b32:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <HAL_RCC_GetSysClockFreq+0x54>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	0ad2      	lsrs	r2, r2, #11
 8000b38:	2307      	movs	r3, #7
 8000b3a:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000b3c:	4810      	ldr	r0, [pc, #64]	@ (8000b80 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b3e:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8000b40:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <HAL_RCC_GetSysClockFreq+0x54>)
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	2338      	movs	r3, #56	@ 0x38
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d010      	beq.n	8000b70 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <HAL_RCC_GetSysClockFreq+0x54>)
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	2338      	movs	r3, #56	@ 0x38
 8000b54:	4013      	ands	r3, r2
 8000b56:	2b20      	cmp	r3, #32
 8000b58:	d00c      	beq.n	8000b74 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_RCC_GetSysClockFreq+0x54>)
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	2338      	movs	r3, #56	@ 0x38
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b18      	cmp	r3, #24
 8000b64:	d001      	beq.n	8000b6a <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8000b66:	2000      	movs	r0, #0
  return sysclockfreq;
 8000b68:	e7ea      	b.n	8000b40 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8000b6a:	20fa      	movs	r0, #250	@ 0xfa
 8000b6c:	01c0      	lsls	r0, r0, #7
 8000b6e:	e7e7      	b.n	8000b40 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8000b70:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b72:	e7e5      	b.n	8000b40 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8000b74:	2080      	movs	r0, #128	@ 0x80
 8000b76:	0200      	lsls	r0, r0, #8
 8000b78:	e7e2      	b.n	8000b40 <HAL_RCC_GetSysClockFreq+0x18>
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	02dc6c00 	.word	0x02dc6c00

08000b84 <HAL_RCC_ClockConfig>:
{
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	0004      	movs	r4, r0
 8000b88:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d100      	bne.n	8000b90 <HAL_RCC_ClockConfig+0xc>
 8000b8e:	e0a4      	b.n	8000cda <HAL_RCC_ClockConfig+0x156>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b90:	4b54      	ldr	r3, [pc, #336]	@ (8000ce4 <HAL_RCC_ClockConfig+0x160>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	2307      	movs	r3, #7
 8000b96:	4013      	ands	r3, r2
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d321      	bcc.n	8000be0 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	079a      	lsls	r2, r3, #30
 8000ba0:	d510      	bpl.n	8000bc4 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ba2:	075b      	lsls	r3, r3, #29
 8000ba4:	d507      	bpl.n	8000bb6 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000ba6:	4950      	ldr	r1, [pc, #320]	@ (8000ce8 <HAL_RCC_ClockConfig+0x164>)
 8000ba8:	688a      	ldr	r2, [r1, #8]
 8000baa:	4b50      	ldr	r3, [pc, #320]	@ (8000cec <HAL_RCC_ClockConfig+0x168>)
 8000bac:	401a      	ands	r2, r3
 8000bae:	23b0      	movs	r3, #176	@ 0xb0
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bb6:	4a4c      	ldr	r2, [pc, #304]	@ (8000ce8 <HAL_RCC_ClockConfig+0x164>)
 8000bb8:	6893      	ldr	r3, [r2, #8]
 8000bba:	494d      	ldr	r1, [pc, #308]	@ (8000cf0 <HAL_RCC_ClockConfig+0x16c>)
 8000bbc:	400b      	ands	r3, r1
 8000bbe:	68e1      	ldr	r1, [r4, #12]
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	07db      	lsls	r3, r3, #31
 8000bc8:	d54c      	bpl.n	8000c64 <HAL_RCC_ClockConfig+0xe0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bca:	6863      	ldr	r3, [r4, #4]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d01e      	beq.n	8000c0e <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d139      	bne.n	8000c48 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000bd4:	4a44      	ldr	r2, [pc, #272]	@ (8000ce8 <HAL_RCC_ClockConfig+0x164>)
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	0552      	lsls	r2, r2, #21
 8000bda:	d41c      	bmi.n	8000c16 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8000bdc:	2001      	movs	r0, #1
 8000bde:	e064      	b.n	8000caa <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000be0:	4a40      	ldr	r2, [pc, #256]	@ (8000ce4 <HAL_RCC_ClockConfig+0x160>)
 8000be2:	6813      	ldr	r3, [r2, #0]
 8000be4:	2107      	movs	r1, #7
 8000be6:	438b      	bics	r3, r1
 8000be8:	432b      	orrs	r3, r5
 8000bea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000bec:	f7ff fcdc 	bl	80005a8 <HAL_GetTick>
 8000bf0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce4 <HAL_RCC_ClockConfig+0x160>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	42ab      	cmp	r3, r5
 8000bfc:	d0ce      	beq.n	8000b9c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000bfe:	f7ff fcd3 	bl	80005a8 <HAL_GetTick>
 8000c02:	1b80      	subs	r0, r0, r6
 8000c04:	4a3b      	ldr	r2, [pc, #236]	@ (8000cf4 <HAL_RCC_ClockConfig+0x170>)
 8000c06:	4290      	cmp	r0, r2
 8000c08:	d9f3      	bls.n	8000bf2 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	e04d      	b.n	8000caa <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c0e:	4a36      	ldr	r2, [pc, #216]	@ (8000ce8 <HAL_RCC_ClockConfig+0x164>)
 8000c10:	6812      	ldr	r2, [r2, #0]
 8000c12:	0392      	lsls	r2, r2, #14
 8000c14:	d563      	bpl.n	8000cde <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000c16:	4934      	ldr	r1, [pc, #208]	@ (8000ce8 <HAL_RCC_ClockConfig+0x164>)
 8000c18:	688a      	ldr	r2, [r1, #8]
 8000c1a:	2007      	movs	r0, #7
 8000c1c:	4382      	bics	r2, r0
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000c22:	f7ff fcc1 	bl	80005a8 <HAL_GetTick>
 8000c26:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <HAL_RCC_ClockConfig+0x164>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	2238      	movs	r2, #56	@ 0x38
 8000c2e:	401a      	ands	r2, r3
 8000c30:	6863      	ldr	r3, [r4, #4]
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d015      	beq.n	8000c64 <HAL_RCC_ClockConfig+0xe0>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000c38:	f7ff fcb6 	bl	80005a8 <HAL_GetTick>
 8000c3c:	1b80      	subs	r0, r0, r6
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf4 <HAL_RCC_ClockConfig+0x170>)
 8000c40:	4298      	cmp	r0, r3
 8000c42:	d9f1      	bls.n	8000c28 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8000c44:	2003      	movs	r0, #3
 8000c46:	e030      	b.n	8000caa <HAL_RCC_ClockConfig+0x126>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d005      	beq.n	8000c58 <HAL_RCC_ClockConfig+0xd4>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000c4c:	4a26      	ldr	r2, [pc, #152]	@ (8000ce8 <HAL_RCC_ClockConfig+0x164>)
 8000c4e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000c50:	0792      	lsls	r2, r2, #30
 8000c52:	d4e0      	bmi.n	8000c16 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8000c54:	2001      	movs	r0, #1
 8000c56:	e028      	b.n	8000caa <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000c58:	4a23      	ldr	r2, [pc, #140]	@ (8000ce8 <HAL_RCC_ClockConfig+0x164>)
 8000c5a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8000c5c:	0792      	lsls	r2, r2, #30
 8000c5e:	d4da      	bmi.n	8000c16 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8000c60:	2001      	movs	r0, #1
 8000c62:	e022      	b.n	8000caa <HAL_RCC_ClockConfig+0x126>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <HAL_RCC_ClockConfig+0x160>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	2307      	movs	r3, #7
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	42ab      	cmp	r3, r5
 8000c6e:	d81d      	bhi.n	8000cac <HAL_RCC_ClockConfig+0x128>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	075b      	lsls	r3, r3, #29
 8000c74:	d506      	bpl.n	8000c84 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <HAL_RCC_ClockConfig+0x164>)
 8000c78:	6893      	ldr	r3, [r2, #8]
 8000c7a:	491f      	ldr	r1, [pc, #124]	@ (8000cf8 <HAL_RCC_ClockConfig+0x174>)
 8000c7c:	400b      	ands	r3, r1
 8000c7e:	6921      	ldr	r1, [r4, #16]
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000c84:	f7ff ff50 	bl	8000b28 <HAL_RCC_GetSysClockFreq>
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <HAL_RCC_ClockConfig+0x164>)
 8000c8a:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000c8c:	0a12      	lsrs	r2, r2, #8
 8000c8e:	230f      	movs	r3, #15
 8000c90:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000c92:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <HAL_RCC_ClockConfig+0x178>)
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000c98:	231f      	movs	r3, #31
 8000c9a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000c9c:	40d8      	lsrs	r0, r3
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_RCC_ClockConfig+0x17c>)
 8000ca0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8000ca2:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <HAL_RCC_ClockConfig+0x180>)
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	f7ff fc3b 	bl	8000520 <HAL_InitTick>
}
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <HAL_RCC_ClockConfig+0x160>)
 8000cae:	6813      	ldr	r3, [r2, #0]
 8000cb0:	2107      	movs	r1, #7
 8000cb2:	438b      	bics	r3, r1
 8000cb4:	432b      	orrs	r3, r5
 8000cb6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000cb8:	f7ff fc76 	bl	80005a8 <HAL_GetTick>
 8000cbc:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_RCC_ClockConfig+0x160>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	42ab      	cmp	r3, r5
 8000cc8:	d0d2      	beq.n	8000c70 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000cca:	f7ff fc6d 	bl	80005a8 <HAL_GetTick>
 8000cce:	1b80      	subs	r0, r0, r6
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <HAL_RCC_ClockConfig+0x170>)
 8000cd2:	4298      	cmp	r0, r3
 8000cd4:	d9f3      	bls.n	8000cbe <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	e7e7      	b.n	8000caa <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 8000cda:	2001      	movs	r0, #1
 8000cdc:	e7e5      	b.n	8000caa <HAL_RCC_ClockConfig+0x126>
        return HAL_ERROR;
 8000cde:	2001      	movs	r0, #1
 8000ce0:	e7e3      	b.n	8000caa <HAL_RCC_ClockConfig+0x126>
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	40022000 	.word	0x40022000
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	ffff84ff 	.word	0xffff84ff
 8000cf0:	fffff0ff 	.word	0xfffff0ff
 8000cf4:	00001388 	.word	0x00001388
 8000cf8:	ffff8fff 	.word	0xffff8fff
 8000cfc:	0800282c 	.word	0x0800282c
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d08:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000d0a:	f7ff ff0d 	bl	8000b28 <HAL_RCC_GetSysClockFreq>
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <HAL_RCC_GetHCLKFreq+0x24>)
 8000d10:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000d12:	0a12      	lsrs	r2, r2, #8
 8000d14:	230f      	movs	r3, #15
 8000d16:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000d18:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <HAL_RCC_GetHCLKFreq+0x28>)
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000d1e:	231f      	movs	r3, #31
 8000d20:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8000d22:	40d8      	lsrs	r0, r3
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_RCC_GetHCLKFreq+0x2c>)
 8000d26:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8000d28:	bd10      	pop	{r4, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	0800282c 	.word	0x0800282c
 8000d34:	20000008 	.word	0x20000008

08000d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d38:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8000d3a:	f7ff ffe5 	bl	8000d08 <HAL_RCC_GetHCLKFreq>
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	0b12      	lsrs	r2, r2, #12
 8000d44:	2307      	movs	r3, #7
 8000d46:	4013      	ands	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	589a      	ldr	r2, [r3, r2]
 8000d4e:	231f      	movs	r3, #31
 8000d50:	4013      	ands	r3, r2
 8000d52:	40d8      	lsrs	r0, r3
}
 8000d54:	bd10      	pop	{r4, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	0800280c 	.word	0x0800280c

08000d60 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000d60:	b570      	push	{r4, r5, r6, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000d66:	6803      	ldr	r3, [r0, #0]
 8000d68:	065b      	lsls	r3, r3, #25
 8000d6a:	d550      	bpl.n	8000e0e <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d6c:	4b42      	ldr	r3, [pc, #264]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	d435      	bmi.n	8000de0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d74:	4b40      	ldr	r3, [pc, #256]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d78:	2180      	movs	r1, #128	@ 0x80
 8000d7a:	0549      	lsls	r1, r1, #21
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d82:	400b      	ands	r3, r1
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d88:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000d8c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8000d8e:	22c0      	movs	r2, #192	@ 0xc0
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	000b      	movs	r3, r1
 8000d94:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8000d96:	4211      	tst	r1, r2
 8000d98:	d035      	beq.n	8000e06 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000d9a:	69a2      	ldr	r2, [r4, #24]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d00d      	beq.n	8000dbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8000da0:	4a35      	ldr	r2, [pc, #212]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000da2:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000da4:	4935      	ldr	r1, [pc, #212]	@ (8000e7c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8000da6:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000da8:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8000daa:	2180      	movs	r1, #128	@ 0x80
 8000dac:	0249      	lsls	r1, r1, #9
 8000dae:	4301      	orrs	r1, r0
 8000db0:	65d1      	str	r1, [r2, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000db2:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8000db4:	4832      	ldr	r0, [pc, #200]	@ (8000e80 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8000db6:	4001      	ands	r1, r0
 8000db8:	65d1      	str	r1, [r2, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8000dba:	65d3      	str	r3, [r2, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8000dbc:	07db      	lsls	r3, r3, #31
 8000dbe:	d411      	bmi.n	8000de4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000dc2:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000dc4:	492d      	ldr	r1, [pc, #180]	@ (8000e7c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8000dc6:	400b      	ands	r3, r1
 8000dc8:	69a1      	ldr	r1, [r4, #24]
 8000dca:	430b      	orrs	r3, r1
 8000dcc:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8000dce:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000dd0:	2d01      	cmp	r5, #1
 8000dd2:	d11d      	bne.n	8000e10 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dd4:	4a28      	ldr	r2, [pc, #160]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000dd6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000dd8:	492a      	ldr	r1, [pc, #168]	@ (8000e84 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000dda:	400b      	ands	r3, r1
 8000ddc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000dde:	e017      	b.n	8000e10 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    FlagStatus       pwrclkchanged = RESET;
 8000de0:	2500      	movs	r5, #0
 8000de2:	e7d2      	b.n	8000d8a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 8000de4:	f7ff fbe0 	bl	80005a8 <HAL_GetTick>
 8000de8:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000dea:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dee:	079b      	lsls	r3, r3, #30
 8000df0:	d407      	bmi.n	8000e02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000df2:	f7ff fbd9 	bl	80005a8 <HAL_GetTick>
 8000df6:	1b80      	subs	r0, r0, r6
 8000df8:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8000dfa:	4298      	cmp	r0, r3
 8000dfc:	d9f5      	bls.n	8000dea <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 8000dfe:	2003      	movs	r0, #3
 8000e00:	e002      	b.n	8000e08 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8000e02:	2000      	movs	r0, #0
 8000e04:	e000      	b.n	8000e08 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8000e06:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	d1e1      	bne.n	8000dd0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8000e0c:	e7d8      	b.n	8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8000e0e:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	07db      	lsls	r3, r3, #31
 8000e14:	d506      	bpl.n	8000e24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000e16:	4a18      	ldr	r2, [pc, #96]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000e18:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	438b      	bics	r3, r1
 8000e1e:	68a1      	ldr	r1, [r4, #8]
 8000e20:	430b      	orrs	r3, r1
 8000e22:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	079b      	lsls	r3, r3, #30
 8000e28:	d506      	bpl.n	8000e38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000e2a:	4a13      	ldr	r2, [pc, #76]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000e2c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8000e2e:	4917      	ldr	r1, [pc, #92]	@ (8000e8c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8000e30:	400b      	ands	r3, r1
 8000e32:	68e1      	ldr	r1, [r4, #12]
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	069b      	lsls	r3, r3, #26
 8000e3c:	d506      	bpl.n	8000e4c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000e40:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	6961      	ldr	r1, [r4, #20]
 8000e48:	430b      	orrs	r3, r1
 8000e4a:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	075b      	lsls	r3, r3, #29
 8000e50:	d506      	bpl.n	8000e60 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8000e52:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000e54:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8000e56:	490e      	ldr	r1, [pc, #56]	@ (8000e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8000e58:	400b      	ands	r3, r1
 8000e5a:	6921      	ldr	r1, [r4, #16]
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	6553      	str	r3, [r2, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	061b      	lsls	r3, r3, #24
 8000e64:	d506      	bpl.n	8000e74 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8000e66:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000e68:	6813      	ldr	r3, [r2, #0]
 8000e6a:	21e0      	movs	r1, #224	@ 0xe0
 8000e6c:	438b      	bics	r3, r1
 8000e6e:	6861      	ldr	r1, [r4, #4]
 8000e70:	430b      	orrs	r3, r1
 8000e72:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8000e74:	b002      	add	sp, #8
 8000e76:	bd70      	pop	{r4, r5, r6, pc}
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	fffffcff 	.word	0xfffffcff
 8000e80:	fffeffff 	.word	0xfffeffff
 8000e84:	efffffff 	.word	0xefffffff
 8000e88:	00001388 	.word	0x00001388
 8000e8c:	ffffcfff 	.word	0xffffcfff
 8000e90:	ffff3fff 	.word	0xffff3fff

08000e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8000e94:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000e96:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8000ea0:	6801      	ldr	r1, [r0, #0]
 8000ea2:	680b      	ldr	r3, [r1, #0]
 8000ea4:	4d12      	ldr	r5, [pc, #72]	@ (8000ef0 <UART_EndRxTransfer+0x5c>)
 8000ea6:	402b      	ands	r3, r5
 8000ea8:	600b      	str	r3, [r1, #0]
 8000eaa:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000eae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000eb2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8000eb6:	6802      	ldr	r2, [r0, #0]
 8000eb8:	6893      	ldr	r3, [r2, #8]
 8000eba:	4c0e      	ldr	r4, [pc, #56]	@ (8000ef4 <UART_EndRxTransfer+0x60>)
 8000ebc:	4023      	ands	r3, r4
 8000ebe:	6093      	str	r3, [r2, #8]
 8000ec0:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000ec4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d006      	beq.n	8000ed8 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000eca:	238c      	movs	r3, #140	@ 0x8c
 8000ecc:	2220      	movs	r2, #32
 8000ece:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8000ed4:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8000ed6:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000ed8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000edc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000ee0:	6802      	ldr	r2, [r0, #0]
 8000ee2:	6813      	ldr	r3, [r2, #0]
 8000ee4:	2410      	movs	r4, #16
 8000ee6:	43a3      	bics	r3, r4
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	f381 8810 	msr	PRIMASK, r1
}
 8000eee:	e7ec      	b.n	8000eca <UART_EndRxTransfer+0x36>
 8000ef0:	fffffedf 	.word	0xfffffedf
 8000ef4:	effffffe 	.word	0xeffffffe

08000ef8 <UART_SetConfig>:
{
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000efc:	6883      	ldr	r3, [r0, #8]
 8000efe:	6902      	ldr	r2, [r0, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	6942      	ldr	r2, [r0, #20]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	69c2      	ldr	r2, [r0, #28]
 8000f08:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000f0a:	6801      	ldr	r1, [r0, #0]
 8000f0c:	680a      	ldr	r2, [r1, #0]
 8000f0e:	4862      	ldr	r0, [pc, #392]	@ (8001098 <UART_SetConfig+0x1a0>)
 8000f10:	4002      	ands	r2, r0
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f16:	6822      	ldr	r2, [r4, #0]
 8000f18:	6853      	ldr	r3, [r2, #4]
 8000f1a:	4960      	ldr	r1, [pc, #384]	@ (800109c <UART_SetConfig+0x1a4>)
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	68e1      	ldr	r1, [r4, #12]
 8000f20:	430b      	orrs	r3, r1
 8000f22:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000f24:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8000f26:	6a22      	ldr	r2, [r4, #32]
 8000f28:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000f2a:	6821      	ldr	r1, [r4, #0]
 8000f2c:	688b      	ldr	r3, [r1, #8]
 8000f2e:	485c      	ldr	r0, [pc, #368]	@ (80010a0 <UART_SetConfig+0x1a8>)
 8000f30:	4003      	ands	r3, r0
 8000f32:	4313      	orrs	r3, r2
 8000f34:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8000f36:	6822      	ldr	r2, [r4, #0]
 8000f38:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	438b      	bics	r3, r1
 8000f3e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000f40:	430b      	orrs	r3, r1
 8000f42:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	4a57      	ldr	r2, [pc, #348]	@ (80010a4 <UART_SetConfig+0x1ac>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d030      	beq.n	8000fae <UART_SetConfig+0xb6>
 8000f4c:	4a56      	ldr	r2, [pc, #344]	@ (80010a8 <UART_SetConfig+0x1b0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d03e      	beq.n	8000fd0 <UART_SetConfig+0xd8>
 8000f52:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f54:	69e0      	ldr	r0, [r4, #28]
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	0212      	lsls	r2, r2, #8
 8000f5a:	4290      	cmp	r0, r2
 8000f5c:	d042      	beq.n	8000fe4 <UART_SetConfig+0xec>
    switch (clocksource)
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d100      	bne.n	8000f64 <UART_SetConfig+0x6c>
 8000f62:	e089      	b.n	8001078 <UART_SetConfig+0x180>
 8000f64:	d87b      	bhi.n	800105e <UART_SetConfig+0x166>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d100      	bne.n	8000f6c <UART_SetConfig+0x74>
 8000f6a:	e07f      	b.n	800106c <UART_SetConfig+0x174>
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d174      	bne.n	800105a <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8000f70:	4b4e      	ldr	r3, [pc, #312]	@ (80010ac <UART_SetConfig+0x1b4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	095b      	lsrs	r3, r3, #5
 8000f76:	2107      	movs	r1, #7
 8000f78:	4019      	ands	r1, r3
 8000f7a:	3101      	adds	r1, #1
 8000f7c:	484c      	ldr	r0, [pc, #304]	@ (80010b0 <UART_SetConfig+0x1b8>)
 8000f7e:	f7ff f8a9 	bl	80000d4 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8000f82:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000f84:	4b4b      	ldr	r3, [pc, #300]	@ (80010b4 <UART_SetConfig+0x1bc>)
 8000f86:	0052      	lsls	r2, r2, #1
 8000f88:	5ad1      	ldrh	r1, [r2, r3]
 8000f8a:	f7ff f8a3 	bl	80000d4 <__udivsi3>
 8000f8e:	6861      	ldr	r1, [r4, #4]
 8000f90:	084b      	lsrs	r3, r1, #1
 8000f92:	18c0      	adds	r0, r0, r3
 8000f94:	f7ff f89e 	bl	80000d4 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8000f98:	0002      	movs	r2, r0
 8000f9a:	3a10      	subs	r2, #16
 8000f9c:	4b46      	ldr	r3, [pc, #280]	@ (80010b8 <UART_SetConfig+0x1c0>)
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d86f      	bhi.n	8001082 <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	0400      	lsls	r0, r0, #16
 8000fa6:	0c00      	lsrs	r0, r0, #16
 8000fa8:	60d8      	str	r0, [r3, #12]
 8000faa:	2000      	movs	r0, #0
 8000fac:	e06a      	b.n	8001084 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000fae:	4b3f      	ldr	r3, [pc, #252]	@ (80010ac <UART_SetConfig+0x1b4>)
 8000fb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d00c      	beq.n	8000fd4 <UART_SetConfig+0xdc>
 8000fba:	d805      	bhi.n	8000fc8 <UART_SetConfig+0xd0>
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00b      	beq.n	8000fd8 <UART_SetConfig+0xe0>
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d10b      	bne.n	8000fdc <UART_SetConfig+0xe4>
 8000fc4:	3303      	adds	r3, #3
 8000fc6:	e7c5      	b.n	8000f54 <UART_SetConfig+0x5c>
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d109      	bne.n	8000fe0 <UART_SetConfig+0xe8>
 8000fcc:	3305      	adds	r3, #5
 8000fce:	e7c1      	b.n	8000f54 <UART_SetConfig+0x5c>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e7bf      	b.n	8000f54 <UART_SetConfig+0x5c>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e7bd      	b.n	8000f54 <UART_SetConfig+0x5c>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e7bb      	b.n	8000f54 <UART_SetConfig+0x5c>
 8000fdc:	2310      	movs	r3, #16
 8000fde:	e7b9      	b.n	8000f54 <UART_SetConfig+0x5c>
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	e7b7      	b.n	8000f54 <UART_SetConfig+0x5c>
    switch (clocksource)
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d035      	beq.n	8001054 <UART_SetConfig+0x15c>
 8000fe8:	d82a      	bhi.n	8001040 <UART_SetConfig+0x148>
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d02c      	beq.n	8001048 <UART_SetConfig+0x150>
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d124      	bne.n	800103c <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80010ac <UART_SetConfig+0x1b4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	3101      	adds	r1, #1
 8000ffe:	482c      	ldr	r0, [pc, #176]	@ (80010b0 <UART_SetConfig+0x1b8>)
 8001000:	f7ff f868 	bl	80000d4 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001004:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001006:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <UART_SetConfig+0x1bc>)
 8001008:	0052      	lsls	r2, r2, #1
 800100a:	5ad1      	ldrh	r1, [r2, r3]
 800100c:	f7ff f862 	bl	80000d4 <__udivsi3>
 8001010:	0040      	lsls	r0, r0, #1
 8001012:	6861      	ldr	r1, [r4, #4]
 8001014:	084b      	lsrs	r3, r1, #1
 8001016:	18c0      	adds	r0, r0, r3
 8001018:	f7ff f85c 	bl	80000d4 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800101c:	0002      	movs	r2, r0
 800101e:	3a10      	subs	r2, #16
 8001020:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <UART_SetConfig+0x1c0>)
 8001022:	429a      	cmp	r2, r3
 8001024:	d82b      	bhi.n	800107e <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001026:	b282      	uxth	r2, r0
 8001028:	230f      	movs	r3, #15
 800102a:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800102c:	0840      	lsrs	r0, r0, #1
 800102e:	3b08      	subs	r3, #8
 8001030:	4003      	ands	r3, r0
 8001032:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8001034:	6822      	ldr	r2, [r4, #0]
 8001036:	60d3      	str	r3, [r2, #12]
 8001038:	2000      	movs	r0, #0
 800103a:	e023      	b.n	8001084 <UART_SetConfig+0x18c>
    switch (clocksource)
 800103c:	2001      	movs	r0, #1
 800103e:	e021      	b.n	8001084 <UART_SetConfig+0x18c>
 8001040:	2b08      	cmp	r3, #8
 8001042:	d0df      	beq.n	8001004 <UART_SetConfig+0x10c>
 8001044:	2001      	movs	r0, #1
 8001046:	e01d      	b.n	8001084 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001048:	f7ff fe76 	bl	8000d38 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800104c:	2800      	cmp	r0, #0
 800104e:	d1d9      	bne.n	8001004 <UART_SetConfig+0x10c>
 8001050:	2000      	movs	r0, #0
 8001052:	e017      	b.n	8001084 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001054:	f7ff fd68 	bl	8000b28 <HAL_RCC_GetSysClockFreq>
        break;
 8001058:	e7f8      	b.n	800104c <UART_SetConfig+0x154>
    switch (clocksource)
 800105a:	2001      	movs	r0, #1
 800105c:	e012      	b.n	8001084 <UART_SetConfig+0x18c>
 800105e:	2b08      	cmp	r3, #8
 8001060:	d102      	bne.n	8001068 <UART_SetConfig+0x170>
 8001062:	2080      	movs	r0, #128	@ 0x80
 8001064:	0200      	lsls	r0, r0, #8
 8001066:	e78c      	b.n	8000f82 <UART_SetConfig+0x8a>
 8001068:	2001      	movs	r0, #1
 800106a:	e00b      	b.n	8001084 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800106c:	f7ff fe64 	bl	8000d38 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001070:	2800      	cmp	r0, #0
 8001072:	d186      	bne.n	8000f82 <UART_SetConfig+0x8a>
 8001074:	2000      	movs	r0, #0
 8001076:	e005      	b.n	8001084 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001078:	f7ff fd56 	bl	8000b28 <HAL_RCC_GetSysClockFreq>
        break;
 800107c:	e7f8      	b.n	8001070 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 800107e:	2001      	movs	r0, #1
 8001080:	e000      	b.n	8001084 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 8001082:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	226a      	movs	r2, #106	@ 0x6a
 8001088:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 800108a:	3a02      	subs	r2, #2
 800108c:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800108e:	2300      	movs	r3, #0
 8001090:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8001092:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8001094:	bd10      	pop	{r4, pc}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	cfff69f3 	.word	0xcfff69f3
 800109c:	ffffcfff 	.word	0xffffcfff
 80010a0:	11fff4ff 	.word	0x11fff4ff
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40004400 	.word	0x40004400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	02dc6c00 	.word	0x02dc6c00
 80010b4:	080027e4 	.word	0x080027e4
 80010b8:	0000ffef 	.word	0x0000ffef

080010bc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80010bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80010be:	071b      	lsls	r3, r3, #28
 80010c0:	d506      	bpl.n	80010d0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80010c2:	6802      	ldr	r2, [r0, #0]
 80010c4:	6853      	ldr	r3, [r2, #4]
 80010c6:	492c      	ldr	r1, [pc, #176]	@ (8001178 <UART_AdvFeatureConfig+0xbc>)
 80010c8:	400b      	ands	r3, r1
 80010ca:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80010d0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80010d2:	07db      	lsls	r3, r3, #31
 80010d4:	d506      	bpl.n	80010e4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80010d6:	6802      	ldr	r2, [r0, #0]
 80010d8:	6853      	ldr	r3, [r2, #4]
 80010da:	4928      	ldr	r1, [pc, #160]	@ (800117c <UART_AdvFeatureConfig+0xc0>)
 80010dc:	400b      	ands	r3, r1
 80010de:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80010e0:	430b      	orrs	r3, r1
 80010e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80010e4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80010e6:	079b      	lsls	r3, r3, #30
 80010e8:	d506      	bpl.n	80010f8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80010ea:	6802      	ldr	r2, [r0, #0]
 80010ec:	6853      	ldr	r3, [r2, #4]
 80010ee:	4924      	ldr	r1, [pc, #144]	@ (8001180 <UART_AdvFeatureConfig+0xc4>)
 80010f0:	400b      	ands	r3, r1
 80010f2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80010f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80010fa:	075b      	lsls	r3, r3, #29
 80010fc:	d506      	bpl.n	800110c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80010fe:	6802      	ldr	r2, [r0, #0]
 8001100:	6853      	ldr	r3, [r2, #4]
 8001102:	4920      	ldr	r1, [pc, #128]	@ (8001184 <UART_AdvFeatureConfig+0xc8>)
 8001104:	400b      	ands	r3, r1
 8001106:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001108:	430b      	orrs	r3, r1
 800110a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800110c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800110e:	06db      	lsls	r3, r3, #27
 8001110:	d506      	bpl.n	8001120 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001112:	6802      	ldr	r2, [r0, #0]
 8001114:	6893      	ldr	r3, [r2, #8]
 8001116:	491c      	ldr	r1, [pc, #112]	@ (8001188 <UART_AdvFeatureConfig+0xcc>)
 8001118:	400b      	ands	r3, r1
 800111a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800111c:	430b      	orrs	r3, r1
 800111e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001120:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001122:	069b      	lsls	r3, r3, #26
 8001124:	d506      	bpl.n	8001134 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001126:	6802      	ldr	r2, [r0, #0]
 8001128:	6893      	ldr	r3, [r2, #8]
 800112a:	4918      	ldr	r1, [pc, #96]	@ (800118c <UART_AdvFeatureConfig+0xd0>)
 800112c:	400b      	ands	r3, r1
 800112e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001130:	430b      	orrs	r3, r1
 8001132:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001134:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001136:	065b      	lsls	r3, r3, #25
 8001138:	d50b      	bpl.n	8001152 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800113a:	6802      	ldr	r2, [r0, #0]
 800113c:	6853      	ldr	r3, [r2, #4]
 800113e:	4914      	ldr	r1, [pc, #80]	@ (8001190 <UART_AdvFeatureConfig+0xd4>)
 8001140:	400b      	ands	r3, r1
 8001142:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001144:	430b      	orrs	r3, r1
 8001146:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001148:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	035b      	lsls	r3, r3, #13
 800114e:	429a      	cmp	r2, r3
 8001150:	d00a      	beq.n	8001168 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001152:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001154:	061b      	lsls	r3, r3, #24
 8001156:	d506      	bpl.n	8001166 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001158:	6802      	ldr	r2, [r0, #0]
 800115a:	6853      	ldr	r3, [r2, #4]
 800115c:	490d      	ldr	r1, [pc, #52]	@ (8001194 <UART_AdvFeatureConfig+0xd8>)
 800115e:	400b      	ands	r3, r1
 8001160:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8001162:	430b      	orrs	r3, r1
 8001164:	6053      	str	r3, [r2, #4]
}
 8001166:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001168:	6802      	ldr	r2, [r0, #0]
 800116a:	6853      	ldr	r3, [r2, #4]
 800116c:	490a      	ldr	r1, [pc, #40]	@ (8001198 <UART_AdvFeatureConfig+0xdc>)
 800116e:	400b      	ands	r3, r1
 8001170:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001172:	430b      	orrs	r3, r1
 8001174:	6053      	str	r3, [r2, #4]
 8001176:	e7ec      	b.n	8001152 <UART_AdvFeatureConfig+0x96>
 8001178:	ffff7fff 	.word	0xffff7fff
 800117c:	fffdffff 	.word	0xfffdffff
 8001180:	fffeffff 	.word	0xfffeffff
 8001184:	fffbffff 	.word	0xfffbffff
 8001188:	ffffefff 	.word	0xffffefff
 800118c:	ffffdfff 	.word	0xffffdfff
 8001190:	ffefffff 	.word	0xffefffff
 8001194:	fff7ffff 	.word	0xfff7ffff
 8001198:	ff9fffff 	.word	0xff9fffff

0800119c <UART_WaitOnFlagUntilTimeout>:
{
 800119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119e:	46ce      	mov	lr, r9
 80011a0:	4647      	mov	r7, r8
 80011a2:	b580      	push	{r7, lr}
 80011a4:	0006      	movs	r6, r0
 80011a6:	000d      	movs	r5, r1
 80011a8:	0017      	movs	r7, r2
 80011aa:	4699      	mov	r9, r3
 80011ac:	9b08      	ldr	r3, [sp, #32]
 80011ae:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011b0:	6833      	ldr	r3, [r6, #0]
 80011b2:	69dc      	ldr	r4, [r3, #28]
 80011b4:	402c      	ands	r4, r5
 80011b6:	1b64      	subs	r4, r4, r5
 80011b8:	4263      	negs	r3, r4
 80011ba:	415c      	adcs	r4, r3
 80011bc:	42bc      	cmp	r4, r7
 80011be:	d133      	bne.n	8001228 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 80011c0:	4643      	mov	r3, r8
 80011c2:	3301      	adds	r3, #1
 80011c4:	d0f4      	beq.n	80011b0 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011c6:	f7ff f9ef 	bl	80005a8 <HAL_GetTick>
 80011ca:	464b      	mov	r3, r9
 80011cc:	1ac0      	subs	r0, r0, r3
 80011ce:	4540      	cmp	r0, r8
 80011d0:	d82f      	bhi.n	8001232 <UART_WaitOnFlagUntilTimeout+0x96>
 80011d2:	4643      	mov	r3, r8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d02e      	beq.n	8001236 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80011d8:	6832      	ldr	r2, [r6, #0]
 80011da:	6813      	ldr	r3, [r2, #0]
 80011dc:	075b      	lsls	r3, r3, #29
 80011de:	d5e7      	bpl.n	80011b0 <UART_WaitOnFlagUntilTimeout+0x14>
 80011e0:	2d80      	cmp	r5, #128	@ 0x80
 80011e2:	d0e5      	beq.n	80011b0 <UART_WaitOnFlagUntilTimeout+0x14>
 80011e4:	2d40      	cmp	r5, #64	@ 0x40
 80011e6:	d0e3      	beq.n	80011b0 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80011e8:	69d3      	ldr	r3, [r2, #28]
 80011ea:	071b      	lsls	r3, r3, #28
 80011ec:	d410      	bmi.n	8001210 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80011ee:	69d3      	ldr	r3, [r2, #28]
 80011f0:	051b      	lsls	r3, r3, #20
 80011f2:	d5dd      	bpl.n	80011b0 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 80011fa:	0030      	movs	r0, r6
 80011fc:	f7ff fe4a 	bl	8000e94 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001200:	2390      	movs	r3, #144	@ 0x90
 8001202:	2220      	movs	r2, #32
 8001204:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8001206:	3b0c      	subs	r3, #12
 8001208:	2200      	movs	r2, #0
 800120a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 800120c:	2003      	movs	r0, #3
 800120e:	e00c      	b.n	800122a <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001210:	2408      	movs	r4, #8
 8001212:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8001214:	0030      	movs	r0, r6
 8001216:	f7ff fe3d 	bl	8000e94 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800121a:	2390      	movs	r3, #144	@ 0x90
 800121c:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 800121e:	3b0c      	subs	r3, #12
 8001220:	2200      	movs	r2, #0
 8001222:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8001224:	2001      	movs	r0, #1
 8001226:	e000      	b.n	800122a <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8001228:	2000      	movs	r0, #0
}
 800122a:	bcc0      	pop	{r6, r7}
 800122c:	46b9      	mov	r9, r7
 800122e:	46b0      	mov	r8, r6
 8001230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001232:	2003      	movs	r0, #3
 8001234:	e7f9      	b.n	800122a <UART_WaitOnFlagUntilTimeout+0x8e>
 8001236:	2003      	movs	r0, #3
 8001238:	e7f7      	b.n	800122a <UART_WaitOnFlagUntilTimeout+0x8e>

0800123a <HAL_UART_Transmit>:
{
 800123a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123c:	46c6      	mov	lr, r8
 800123e:	b500      	push	{lr}
 8001240:	b082      	sub	sp, #8
 8001242:	0004      	movs	r4, r0
 8001244:	000d      	movs	r5, r1
 8001246:	4690      	mov	r8, r2
 8001248:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800124a:	2388      	movs	r3, #136	@ 0x88
 800124c:	58c3      	ldr	r3, [r0, r3]
 800124e:	2b20      	cmp	r3, #32
 8001250:	d165      	bne.n	800131e <HAL_UART_Transmit+0xe4>
    if ((pData == NULL) || (Size == 0U))
 8001252:	2900      	cmp	r1, #0
 8001254:	d068      	beq.n	8001328 <HAL_UART_Transmit+0xee>
 8001256:	2a00      	cmp	r2, #0
 8001258:	d068      	beq.n	800132c <HAL_UART_Transmit+0xf2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800125a:	6882      	ldr	r2, [r0, #8]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	015b      	lsls	r3, r3, #5
 8001260:	429a      	cmp	r2, r3
 8001262:	d104      	bne.n	800126e <HAL_UART_Transmit+0x34>
 8001264:	6903      	ldr	r3, [r0, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 800126a:	07cb      	lsls	r3, r1, #31
 800126c:	d460      	bmi.n	8001330 <HAL_UART_Transmit+0xf6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800126e:	2390      	movs	r3, #144	@ 0x90
 8001270:	2200      	movs	r2, #0
 8001272:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001274:	3b08      	subs	r3, #8
 8001276:	3221      	adds	r2, #33	@ 0x21
 8001278:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800127a:	f7ff f995 	bl	80005a8 <HAL_GetTick>
 800127e:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8001280:	2354      	movs	r3, #84	@ 0x54
 8001282:	4642      	mov	r2, r8
 8001284:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8001286:	3302      	adds	r3, #2
 8001288:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800128a:	68a2      	ldr	r2, [r4, #8]
 800128c:	2380      	movs	r3, #128	@ 0x80
 800128e:	015b      	lsls	r3, r3, #5
 8001290:	429a      	cmp	r2, r3
 8001292:	d002      	beq.n	800129a <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8001294:	2300      	movs	r3, #0
 8001296:	4698      	mov	r8, r3
 8001298:	e018      	b.n	80012cc <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800129a:	6923      	ldr	r3, [r4, #16]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d029      	beq.n	80012f4 <HAL_UART_Transmit+0xba>
      pdata16bits = NULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	4698      	mov	r8, r3
 80012a4:	e012      	b.n	80012cc <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 80012a6:	2388      	movs	r3, #136	@ 0x88
 80012a8:	2220      	movs	r2, #32
 80012aa:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 80012ac:	2003      	movs	r0, #3
 80012ae:	e037      	b.n	8001320 <HAL_UART_Transmit+0xe6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80012b0:	4643      	mov	r3, r8
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	6822      	ldr	r2, [r4, #0]
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	0ddb      	lsrs	r3, r3, #23
 80012ba:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 80012bc:	2302      	movs	r3, #2
 80012be:	469c      	mov	ip, r3
 80012c0:	44e0      	add	r8, ip
      huart->TxXferCount--;
 80012c2:	2356      	movs	r3, #86	@ 0x56
 80012c4:	5ae2      	ldrh	r2, [r4, r3]
 80012c6:	3a01      	subs	r2, #1
 80012c8:	b292      	uxth	r2, r2
 80012ca:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 80012cc:	2356      	movs	r3, #86	@ 0x56
 80012ce:	5ae3      	ldrh	r3, [r4, r3]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d012      	beq.n	80012fa <HAL_UART_Transmit+0xc0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012d4:	9600      	str	r6, [sp, #0]
 80012d6:	003b      	movs	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	2180      	movs	r1, #128	@ 0x80
 80012dc:	0020      	movs	r0, r4
 80012de:	f7ff ff5d 	bl	800119c <UART_WaitOnFlagUntilTimeout>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d1df      	bne.n	80012a6 <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 80012e6:	2d00      	cmp	r5, #0
 80012e8:	d0e2      	beq.n	80012b0 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80012ea:	782a      	ldrb	r2, [r5, #0]
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80012f0:	3501      	adds	r5, #1
 80012f2:	e7e6      	b.n	80012c2 <HAL_UART_Transmit+0x88>
      pdata16bits = (const uint16_t *) pData;
 80012f4:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80012f6:	2500      	movs	r5, #0
 80012f8:	e7e8      	b.n	80012cc <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012fa:	9600      	str	r6, [sp, #0]
 80012fc:	003b      	movs	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	2140      	movs	r1, #64	@ 0x40
 8001302:	0020      	movs	r0, r4
 8001304:	f7ff ff4a 	bl	800119c <UART_WaitOnFlagUntilTimeout>
 8001308:	2800      	cmp	r0, #0
 800130a:	d103      	bne.n	8001314 <HAL_UART_Transmit+0xda>
    huart->gState = HAL_UART_STATE_READY;
 800130c:	2388      	movs	r3, #136	@ 0x88
 800130e:	2220      	movs	r2, #32
 8001310:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8001312:	e005      	b.n	8001320 <HAL_UART_Transmit+0xe6>
      huart->gState = HAL_UART_STATE_READY;
 8001314:	2388      	movs	r3, #136	@ 0x88
 8001316:	2220      	movs	r2, #32
 8001318:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 800131a:	2003      	movs	r0, #3
 800131c:	e000      	b.n	8001320 <HAL_UART_Transmit+0xe6>
    return HAL_BUSY;
 800131e:	2002      	movs	r0, #2
}
 8001320:	b002      	add	sp, #8
 8001322:	bc80      	pop	{r7}
 8001324:	46b8      	mov	r8, r7
 8001326:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8001328:	2001      	movs	r0, #1
 800132a:	e7f9      	b.n	8001320 <HAL_UART_Transmit+0xe6>
 800132c:	2001      	movs	r0, #1
 800132e:	e7f7      	b.n	8001320 <HAL_UART_Transmit+0xe6>
        return  HAL_ERROR;
 8001330:	2001      	movs	r0, #1
 8001332:	e7f5      	b.n	8001320 <HAL_UART_Transmit+0xe6>

08001334 <HAL_UART_Receive>:
{
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	46c6      	mov	lr, r8
 8001338:	b500      	push	{lr}
 800133a:	b084      	sub	sp, #16
 800133c:	0004      	movs	r4, r0
 800133e:	000e      	movs	r6, r1
 8001340:	0015      	movs	r5, r2
 8001342:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001344:	238c      	movs	r3, #140	@ 0x8c
 8001346:	58c3      	ldr	r3, [r0, r3]
 8001348:	2b20      	cmp	r3, #32
 800134a:	d000      	beq.n	800134e <HAL_UART_Receive+0x1a>
 800134c:	e08a      	b.n	8001464 <HAL_UART_Receive+0x130>
    if ((pData == NULL) || (Size == 0U))
 800134e:	2900      	cmp	r1, #0
 8001350:	d100      	bne.n	8001354 <HAL_UART_Receive+0x20>
 8001352:	e08c      	b.n	800146e <HAL_UART_Receive+0x13a>
 8001354:	2a00      	cmp	r2, #0
 8001356:	d100      	bne.n	800135a <HAL_UART_Receive+0x26>
 8001358:	e08b      	b.n	8001472 <HAL_UART_Receive+0x13e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800135a:	6882      	ldr	r2, [r0, #8]
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	015b      	lsls	r3, r3, #5
 8001360:	429a      	cmp	r2, r3
 8001362:	d105      	bne.n	8001370 <HAL_UART_Receive+0x3c>
 8001364:	6903      	ldr	r3, [r0, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <HAL_UART_Receive+0x3c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800136a:	07cb      	lsls	r3, r1, #31
 800136c:	d500      	bpl.n	8001370 <HAL_UART_Receive+0x3c>
 800136e:	e082      	b.n	8001476 <HAL_UART_Receive+0x142>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001370:	2300      	movs	r3, #0
 8001372:	2290      	movs	r2, #144	@ 0x90
 8001374:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001376:	3a04      	subs	r2, #4
 8001378:	2122      	movs	r1, #34	@ 0x22
 800137a:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800137c:	66e3      	str	r3, [r4, #108]	@ 0x6c
    tickstart = HAL_GetTick();
 800137e:	f7ff f913 	bl	80005a8 <HAL_GetTick>
 8001382:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 8001384:	235c      	movs	r3, #92	@ 0x5c
 8001386:	52e5      	strh	r5, [r4, r3]
    huart->RxXferCount = Size;
 8001388:	3302      	adds	r3, #2
 800138a:	52e5      	strh	r5, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 800138c:	68a3      	ldr	r3, [r4, #8]
 800138e:	2280      	movs	r2, #128	@ 0x80
 8001390:	0152      	lsls	r2, r2, #5
 8001392:	4293      	cmp	r3, r2
 8001394:	d008      	beq.n	80013a8 <HAL_UART_Receive+0x74>
 8001396:	2b00      	cmp	r3, #0
 8001398:	d115      	bne.n	80013c6 <HAL_UART_Receive+0x92>
 800139a:	6922      	ldr	r2, [r4, #16]
 800139c:	2a00      	cmp	r2, #0
 800139e:	d10e      	bne.n	80013be <HAL_UART_Receive+0x8a>
 80013a0:	3260      	adds	r2, #96	@ 0x60
 80013a2:	21ff      	movs	r1, #255	@ 0xff
 80013a4:	52a1      	strh	r1, [r4, r2]
 80013a6:	e015      	b.n	80013d4 <HAL_UART_Receive+0xa0>
 80013a8:	6922      	ldr	r2, [r4, #16]
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d103      	bne.n	80013b6 <HAL_UART_Receive+0x82>
 80013ae:	3260      	adds	r2, #96	@ 0x60
 80013b0:	4932      	ldr	r1, [pc, #200]	@ (800147c <HAL_UART_Receive+0x148>)
 80013b2:	52a1      	strh	r1, [r4, r2]
 80013b4:	e00e      	b.n	80013d4 <HAL_UART_Receive+0xa0>
 80013b6:	2260      	movs	r2, #96	@ 0x60
 80013b8:	21ff      	movs	r1, #255	@ 0xff
 80013ba:	52a1      	strh	r1, [r4, r2]
 80013bc:	e00a      	b.n	80013d4 <HAL_UART_Receive+0xa0>
 80013be:	2260      	movs	r2, #96	@ 0x60
 80013c0:	217f      	movs	r1, #127	@ 0x7f
 80013c2:	52a1      	strh	r1, [r4, r2]
 80013c4:	e006      	b.n	80013d4 <HAL_UART_Receive+0xa0>
 80013c6:	2280      	movs	r2, #128	@ 0x80
 80013c8:	0552      	lsls	r2, r2, #21
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00b      	beq.n	80013e6 <HAL_UART_Receive+0xb2>
 80013ce:	2260      	movs	r2, #96	@ 0x60
 80013d0:	2100      	movs	r1, #0
 80013d2:	52a1      	strh	r1, [r4, r2]
    uhMask = huart->Mask;
 80013d4:	2260      	movs	r2, #96	@ 0x60
 80013d6:	5aa2      	ldrh	r2, [r4, r2]
 80013d8:	9203      	str	r2, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	0152      	lsls	r2, r2, #5
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00c      	beq.n	80013fc <HAL_UART_Receive+0xc8>
      pdata16bits = NULL;
 80013e2:	2500      	movs	r5, #0
 80013e4:	e01f      	b.n	8001426 <HAL_UART_Receive+0xf2>
    UART_MASK_COMPUTATION(huart);
 80013e6:	6922      	ldr	r2, [r4, #16]
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d103      	bne.n	80013f4 <HAL_UART_Receive+0xc0>
 80013ec:	3260      	adds	r2, #96	@ 0x60
 80013ee:	217f      	movs	r1, #127	@ 0x7f
 80013f0:	52a1      	strh	r1, [r4, r2]
 80013f2:	e7ef      	b.n	80013d4 <HAL_UART_Receive+0xa0>
 80013f4:	2260      	movs	r2, #96	@ 0x60
 80013f6:	213f      	movs	r1, #63	@ 0x3f
 80013f8:	52a1      	strh	r1, [r4, r2]
 80013fa:	e7eb      	b.n	80013d4 <HAL_UART_Receive+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013fc:	6923      	ldr	r3, [r4, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d028      	beq.n	8001454 <HAL_UART_Receive+0x120>
      pdata16bits = NULL;
 8001402:	2500      	movs	r5, #0
 8001404:	e00f      	b.n	8001426 <HAL_UART_Receive+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8001406:	238c      	movs	r3, #140	@ 0x8c
 8001408:	2220      	movs	r2, #32
 800140a:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 800140c:	2003      	movs	r0, #3
 800140e:	e02a      	b.n	8001466 <HAL_UART_Receive+0x132>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001414:	9a03      	ldr	r2, [sp, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	802b      	strh	r3, [r5, #0]
        pdata16bits++;
 800141a:	3502      	adds	r5, #2
      huart->RxXferCount--;
 800141c:	235e      	movs	r3, #94	@ 0x5e
 800141e:	5ae2      	ldrh	r2, [r4, r3]
 8001420:	3a01      	subs	r2, #1
 8001422:	b292      	uxth	r2, r2
 8001424:	52e2      	strh	r2, [r4, r3]
    while (huart->RxXferCount > 0U)
 8001426:	235e      	movs	r3, #94	@ 0x5e
 8001428:	5ae3      	ldrh	r3, [r4, r3]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d015      	beq.n	800145a <HAL_UART_Receive+0x126>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800142e:	9700      	str	r7, [sp, #0]
 8001430:	4643      	mov	r3, r8
 8001432:	2200      	movs	r2, #0
 8001434:	2120      	movs	r1, #32
 8001436:	0020      	movs	r0, r4
 8001438:	f7ff feb0 	bl	800119c <UART_WaitOnFlagUntilTimeout>
 800143c:	2800      	cmp	r0, #0
 800143e:	d1e2      	bne.n	8001406 <HAL_UART_Receive+0xd2>
      if (pdata8bits == NULL)
 8001440:	2e00      	cmp	r6, #0
 8001442:	d0e5      	beq.n	8001410 <HAL_UART_Receive+0xdc>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001448:	466a      	mov	r2, sp
 800144a:	7b12      	ldrb	r2, [r2, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	7033      	strb	r3, [r6, #0]
        pdata8bits++;
 8001450:	3601      	adds	r6, #1
 8001452:	e7e3      	b.n	800141c <HAL_UART_Receive+0xe8>
      pdata16bits = (uint16_t *) pData;
 8001454:	0035      	movs	r5, r6
      pdata8bits  = NULL;
 8001456:	2600      	movs	r6, #0
 8001458:	e7e5      	b.n	8001426 <HAL_UART_Receive+0xf2>
    huart->RxState = HAL_UART_STATE_READY;
 800145a:	338c      	adds	r3, #140	@ 0x8c
 800145c:	2220      	movs	r2, #32
 800145e:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8001460:	2000      	movs	r0, #0
 8001462:	e000      	b.n	8001466 <HAL_UART_Receive+0x132>
    return HAL_BUSY;
 8001464:	2002      	movs	r0, #2
}
 8001466:	b004      	add	sp, #16
 8001468:	bc80      	pop	{r7}
 800146a:	46b8      	mov	r8, r7
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800146e:	2001      	movs	r0, #1
 8001470:	e7f9      	b.n	8001466 <HAL_UART_Receive+0x132>
 8001472:	2001      	movs	r0, #1
 8001474:	e7f7      	b.n	8001466 <HAL_UART_Receive+0x132>
        return  HAL_ERROR;
 8001476:	2001      	movs	r0, #1
 8001478:	e7f5      	b.n	8001466 <HAL_UART_Receive+0x132>
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	000001ff 	.word	0x000001ff

08001480 <UART_CheckIdleState>:
{
 8001480:	b530      	push	{r4, r5, lr}
 8001482:	b083      	sub	sp, #12
 8001484:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001486:	2390      	movs	r3, #144	@ 0x90
 8001488:	2200      	movs	r2, #0
 800148a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800148c:	f7ff f88c 	bl	80005a8 <HAL_GetTick>
 8001490:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	071b      	lsls	r3, r3, #28
 8001498:	d410      	bmi.n	80014bc <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	075b      	lsls	r3, r3, #29
 80014a0:	d42b      	bmi.n	80014fa <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 80014a2:	2320      	movs	r3, #32
 80014a4:	2288      	movs	r2, #136	@ 0x88
 80014a6:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80014a8:	3204      	adds	r2, #4
 80014aa:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014ac:	2300      	movs	r3, #0
 80014ae:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014b0:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80014b2:	3a08      	subs	r2, #8
 80014b4:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80014b6:	2000      	movs	r0, #0
}
 80014b8:	b003      	add	sp, #12
 80014ba:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80014bc:	2180      	movs	r1, #128	@ 0x80
 80014be:	4b23      	ldr	r3, [pc, #140]	@ (800154c <UART_CheckIdleState+0xcc>)
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	0003      	movs	r3, r0
 80014c4:	2200      	movs	r2, #0
 80014c6:	0389      	lsls	r1, r1, #14
 80014c8:	0020      	movs	r0, r4
 80014ca:	f7ff fe67 	bl	800119c <UART_WaitOnFlagUntilTimeout>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d0e3      	beq.n	800149a <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80014d2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d6:	2301      	movs	r3, #1
 80014d8:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80014dc:	6822      	ldr	r2, [r4, #0]
 80014de:	6813      	ldr	r3, [r2, #0]
 80014e0:	2080      	movs	r0, #128	@ 0x80
 80014e2:	4383      	bics	r3, r0
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80014ea:	2388      	movs	r3, #136	@ 0x88
 80014ec:	2220      	movs	r2, #32
 80014ee:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 80014f0:	3b04      	subs	r3, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 80014f6:	387d      	subs	r0, #125	@ 0x7d
 80014f8:	e7de      	b.n	80014b8 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <UART_CheckIdleState+0xcc>)
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	002b      	movs	r3, r5
 8001502:	2200      	movs	r2, #0
 8001504:	03c9      	lsls	r1, r1, #15
 8001506:	0020      	movs	r0, r4
 8001508:	f7ff fe48 	bl	800119c <UART_WaitOnFlagUntilTimeout>
 800150c:	2800      	cmp	r0, #0
 800150e:	d0c8      	beq.n	80014a2 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001510:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001514:	2201      	movs	r2, #1
 8001516:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800151a:	6821      	ldr	r1, [r4, #0]
 800151c:	680b      	ldr	r3, [r1, #0]
 800151e:	4d0c      	ldr	r5, [pc, #48]	@ (8001550 <UART_CheckIdleState+0xd0>)
 8001520:	402b      	ands	r3, r5
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001528:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800152c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001530:	6821      	ldr	r1, [r4, #0]
 8001532:	688b      	ldr	r3, [r1, #8]
 8001534:	4393      	bics	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
 8001538:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800153c:	238c      	movs	r3, #140	@ 0x8c
 800153e:	321f      	adds	r2, #31
 8001540:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8001542:	3b08      	subs	r3, #8
 8001544:	2200      	movs	r2, #0
 8001546:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001548:	2003      	movs	r0, #3
 800154a:	e7b5      	b.n	80014b8 <UART_CheckIdleState+0x38>
 800154c:	01ffffff 	.word	0x01ffffff
 8001550:	fffffedf 	.word	0xfffffedf

08001554 <HAL_UART_Init>:
{
 8001554:	b510      	push	{r4, lr}
 8001556:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001558:	d030      	beq.n	80015bc <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 800155a:	2388      	movs	r3, #136	@ 0x88
 800155c:	58c3      	ldr	r3, [r0, r3]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d022      	beq.n	80015a8 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8001562:	2388      	movs	r3, #136	@ 0x88
 8001564:	2224      	movs	r2, #36	@ 0x24
 8001566:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8001568:	6822      	ldr	r2, [r4, #0]
 800156a:	6813      	ldr	r3, [r2, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	438b      	bics	r3, r1
 8001570:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001572:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11d      	bne.n	80015b4 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001578:	0020      	movs	r0, r4
 800157a:	f7ff fcbd 	bl	8000ef8 <UART_SetConfig>
 800157e:	2801      	cmp	r0, #1
 8001580:	d011      	beq.n	80015a6 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001582:	6822      	ldr	r2, [r4, #0]
 8001584:	6853      	ldr	r3, [r2, #4]
 8001586:	490e      	ldr	r1, [pc, #56]	@ (80015c0 <HAL_UART_Init+0x6c>)
 8001588:	400b      	ands	r3, r1
 800158a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800158c:	6822      	ldr	r2, [r4, #0]
 800158e:	6893      	ldr	r3, [r2, #8]
 8001590:	212a      	movs	r1, #42	@ 0x2a
 8001592:	438b      	bics	r3, r1
 8001594:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001596:	6822      	ldr	r2, [r4, #0]
 8001598:	6813      	ldr	r3, [r2, #0]
 800159a:	3929      	subs	r1, #41	@ 0x29
 800159c:	430b      	orrs	r3, r1
 800159e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80015a0:	0020      	movs	r0, r4
 80015a2:	f7ff ff6d 	bl	8001480 <UART_CheckIdleState>
}
 80015a6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80015a8:	3384      	adds	r3, #132	@ 0x84
 80015aa:	2200      	movs	r2, #0
 80015ac:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80015ae:	f000 f935 	bl	800181c <HAL_UART_MspInit>
 80015b2:	e7d6      	b.n	8001562 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80015b4:	0020      	movs	r0, r4
 80015b6:	f7ff fd81 	bl	80010bc <UART_AdvFeatureConfig>
 80015ba:	e7dd      	b.n	8001578 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 80015bc:	2001      	movs	r0, #1
 80015be:	e7f2      	b.n	80015a6 <HAL_UART_Init+0x52>
 80015c0:	ffffb7ff 	.word	0xffffb7ff

080015c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c6:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80015c8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 80015ce:	3301      	adds	r3, #1
 80015d0:	226a      	movs	r2, #106	@ 0x6a
 80015d2:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 80015d4:	3a02      	subs	r2, #2
 80015d6:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80015d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80015da:	6802      	ldr	r2, [r0, #0]
 80015dc:	6895      	ldr	r5, [r2, #8]
 80015de:	0e6d      	lsrs	r5, r5, #25
 80015e0:	2307      	movs	r3, #7
 80015e2:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80015e4:	6892      	ldr	r2, [r2, #8]
 80015e6:	0f52      	lsrs	r2, r2, #29
 80015e8:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80015ea:	4f08      	ldr	r7, [pc, #32]	@ (800160c <UARTEx_SetNbDataToProcess+0x48>)
 80015ec:	5cf8      	ldrb	r0, [r7, r3]
 80015ee:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80015f0:	4e07      	ldr	r6, [pc, #28]	@ (8001610 <UARTEx_SetNbDataToProcess+0x4c>)
 80015f2:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80015f4:	f7fe fdf8 	bl	80001e8 <__divsi3>
 80015f8:	236a      	movs	r3, #106	@ 0x6a
 80015fa:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80015fc:	5d78      	ldrb	r0, [r7, r5]
 80015fe:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8001600:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8001602:	f7fe fdf1 	bl	80001e8 <__divsi3>
 8001606:	2368      	movs	r3, #104	@ 0x68
 8001608:	52e0      	strh	r0, [r4, r3]
}
 800160a:	e7e5      	b.n	80015d8 <UARTEx_SetNbDataToProcess+0x14>
 800160c:	08002804 	.word	0x08002804
 8001610:	080027fc 	.word	0x080027fc

08001614 <HAL_UARTEx_DisableFifoMode>:
{
 8001614:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8001616:	2384      	movs	r3, #132	@ 0x84
 8001618:	5cc3      	ldrb	r3, [r0, r3]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d015      	beq.n	800164a <HAL_UARTEx_DisableFifoMode+0x36>
 800161e:	2484      	movs	r4, #132	@ 0x84
 8001620:	2601      	movs	r6, #1
 8001622:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8001624:	2588      	movs	r5, #136	@ 0x88
 8001626:	2324      	movs	r3, #36	@ 0x24
 8001628:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800162a:	6802      	ldr	r2, [r0, #0]
 800162c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800162e:	6811      	ldr	r1, [r2, #0]
 8001630:	43b1      	bics	r1, r6
 8001632:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8001634:	4a06      	ldr	r2, [pc, #24]	@ (8001650 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8001636:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8001638:	2200      	movs	r2, #0
 800163a:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800163c:	6801      	ldr	r1, [r0, #0]
 800163e:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001640:	2320      	movs	r3, #32
 8001642:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8001644:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8001646:	2000      	movs	r0, #0
}
 8001648:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800164a:	2002      	movs	r0, #2
 800164c:	e7fc      	b.n	8001648 <HAL_UARTEx_DisableFifoMode+0x34>
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	dfffffff 	.word	0xdfffffff

08001654 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	0004      	movs	r4, r0
 8001658:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800165a:	2384      	movs	r3, #132	@ 0x84
 800165c:	5cc3      	ldrb	r3, [r0, r3]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d01b      	beq.n	800169a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8001662:	2584      	movs	r5, #132	@ 0x84
 8001664:	2001      	movs	r0, #1
 8001666:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8001668:	2688      	movs	r6, #136	@ 0x88
 800166a:	2324      	movs	r3, #36	@ 0x24
 800166c:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	4381      	bics	r1, r0
 8001676:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8001678:	6820      	ldr	r0, [r4, #0]
 800167a:	6883      	ldr	r3, [r0, #8]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	08d9      	lsrs	r1, r3, #3
 8001680:	4311      	orrs	r1, r2
 8001682:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8001684:	0020      	movs	r0, r4
 8001686:	f7ff ff9d 	bl	80015c4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800168e:	2320      	movs	r3, #32
 8001690:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8001692:	2300      	movs	r3, #0
 8001694:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001696:	2000      	movs	r0, #0
}
 8001698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800169a:	2002      	movs	r0, #2
 800169c:	e7fc      	b.n	8001698 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

080016a0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80016a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a2:	0004      	movs	r4, r0
 80016a4:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80016a6:	2284      	movs	r2, #132	@ 0x84
 80016a8:	5c82      	ldrb	r2, [r0, r2]
 80016aa:	2a01      	cmp	r2, #1
 80016ac:	d01b      	beq.n	80016e6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80016ae:	2584      	movs	r5, #132	@ 0x84
 80016b0:	2001      	movs	r0, #1
 80016b2:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80016b4:	2688      	movs	r6, #136	@ 0x88
 80016b6:	2224      	movs	r2, #36	@ 0x24
 80016b8:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80016ba:	6822      	ldr	r2, [r4, #0]
 80016bc:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80016be:	6811      	ldr	r1, [r2, #0]
 80016c0:	4381      	bics	r1, r0
 80016c2:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80016c4:	6822      	ldr	r2, [r4, #0]
 80016c6:	6891      	ldr	r1, [r2, #8]
 80016c8:	4808      	ldr	r0, [pc, #32]	@ (80016ec <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 80016ca:	4001      	ands	r1, r0
 80016cc:	4319      	orrs	r1, r3
 80016ce:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80016d0:	0020      	movs	r0, r4
 80016d2:	f7ff ff77 	bl	80015c4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80016da:	2320      	movs	r3, #32
 80016dc:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80016de:	2300      	movs	r3, #0
 80016e0:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80016e2:	2000      	movs	r0, #0
}
 80016e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80016e6:	2002      	movs	r0, #2
 80016e8:	e7fc      	b.n	80016e4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	f1ffffff 	.word	0xf1ffffff

080016f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler>

080016f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler>

080016f4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fa:	f7fe ff49 	bl	8000590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fe:	bd10      	pop	{r4, pc}

08001700 <EXTI4_15_IRQHandler>:
  /* USER CODE END EXTI4_15_IRQn 0 */
  
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001700:	4770      	bx	lr

08001702 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001702:	b570      	push	{r4, r5, r6, lr}
 8001704:	000c      	movs	r4, r1
 8001706:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	2500      	movs	r5, #0
 800170a:	e004      	b.n	8001716 <_read+0x14>
  {
    *ptr++ = __io_getchar();
 800170c:	e000      	b.n	8001710 <_read+0xe>
 800170e:	bf00      	nop
 8001710:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001714:	3401      	adds	r4, #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001716:	42b5      	cmp	r5, r6
 8001718:	dbf8      	blt.n	800170c <_read+0xa>
  }

  return len;
}
 800171a:	0030      	movs	r0, r6
 800171c:	bd70      	pop	{r4, r5, r6, pc}

0800171e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800171e:	b570      	push	{r4, r5, r6, lr}
 8001720:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	2400      	movs	r4, #0
 8001724:	e005      	b.n	8001732 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001726:	1c4d      	adds	r5, r1, #1
 8001728:	7808      	ldrb	r0, [r1, #0]
 800172a:	f7fe fe8b 	bl	8000444 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8001730:	0029      	movs	r1, r5
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	42b4      	cmp	r4, r6
 8001734:	dbf7      	blt.n	8001726 <_write+0x8>
  }
  return len;
}
 8001736:	0030      	movs	r0, r6
 8001738:	bd70      	pop	{r4, r5, r6, pc}

0800173a <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 800173a:	2001      	movs	r0, #1
}
 800173c:	4240      	negs	r0, r0
 800173e:	4770      	bx	lr

08001740 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001740:	2380      	movs	r3, #128	@ 0x80
 8001742:	019b      	lsls	r3, r3, #6
 8001744:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001746:	2000      	movs	r0, #0
 8001748:	4770      	bx	lr

0800174a <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800174a:	2001      	movs	r0, #1
 800174c:	4770      	bx	lr

0800174e <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800174e:	2000      	movs	r0, #0
 8001750:	4770      	bx	lr
	...

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b510      	push	{r4, lr}
 8001756:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a0c      	ldr	r2, [pc, #48]	@ (800178c <_sbrk+0x38>)
 800175a:	490d      	ldr	r1, [pc, #52]	@ (8001790 <_sbrk+0x3c>)
 800175c:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175e:	490d      	ldr	r1, [pc, #52]	@ (8001794 <_sbrk+0x40>)
 8001760:	6809      	ldr	r1, [r1, #0]
 8001762:	2900      	cmp	r1, #0
 8001764:	d007      	beq.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001766:	490b      	ldr	r1, [pc, #44]	@ (8001794 <_sbrk+0x40>)
 8001768:	6808      	ldr	r0, [r1, #0]
 800176a:	18c3      	adds	r3, r0, r3
 800176c:	4293      	cmp	r3, r2
 800176e:	d806      	bhi.n	800177e <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001770:	4a08      	ldr	r2, [pc, #32]	@ (8001794 <_sbrk+0x40>)
 8001772:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001774:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001776:	4907      	ldr	r1, [pc, #28]	@ (8001794 <_sbrk+0x40>)
 8001778:	4807      	ldr	r0, [pc, #28]	@ (8001798 <_sbrk+0x44>)
 800177a:	6008      	str	r0, [r1, #0]
 800177c:	e7f3      	b.n	8001766 <_sbrk+0x12>
    errno = ENOMEM;
 800177e:	f000 fa2f 	bl	8001be0 <__errno>
 8001782:	230c      	movs	r3, #12
 8001784:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001786:	2001      	movs	r0, #1
 8001788:	4240      	negs	r0, r0
 800178a:	e7f3      	b.n	8001774 <_sbrk+0x20>
 800178c:	20003000 	.word	0x20003000
 8001790:	00000400 	.word	0x00000400
 8001794:	20000088 	.word	0x20000088
 8001798:	20000270 	.word	0x20000270

0800179c <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800179c:	4b02      	ldr	r3, [pc, #8]	@ (80017a8 <SystemInit+0xc>)
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	0512      	lsls	r2, r2, #20
 80017a2:	609a      	str	r2, [r3, #8]
#endif
}
 80017a4:	4770      	bx	lr
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017ac:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART2;
 80017ae:	4819      	ldr	r0, [pc, #100]	@ (8001814 <MX_USART1_UART_Init+0x68>)
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <MX_USART1_UART_Init+0x6c>)
 80017b2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80017b4:	23e1      	movs	r3, #225	@ 0xe1
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	2300      	movs	r3, #0
 80017bc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017be:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c2:	220c      	movs	r2, #12
 80017c4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017cc:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ce:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d0:	f7ff fec0 	bl	8001554 <HAL_UART_Init>
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d111      	bne.n	80017fc <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d8:	480e      	ldr	r0, [pc, #56]	@ (8001814 <MX_USART1_UART_Init+0x68>)
 80017da:	2100      	movs	r1, #0
 80017dc:	f7ff ff3a 	bl	8001654 <HAL_UARTEx_SetTxFifoThreshold>
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d10e      	bne.n	8001802 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e4:	480b      	ldr	r0, [pc, #44]	@ (8001814 <MX_USART1_UART_Init+0x68>)
 80017e6:	2100      	movs	r1, #0
 80017e8:	f7ff ff5a 	bl	80016a0 <HAL_UARTEx_SetRxFifoThreshold>
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d10b      	bne.n	8001808 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017f0:	4808      	ldr	r0, [pc, #32]	@ (8001814 <MX_USART1_UART_Init+0x68>)
 80017f2:	f7ff ff0f 	bl	8001614 <HAL_UARTEx_DisableFifoMode>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	d109      	bne.n	800180e <MX_USART1_UART_Init+0x62>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017fa:	bd10      	pop	{r4, pc}
    Error_Handler();
 80017fc:	f7fe fe32 	bl	8000464 <Error_Handler>
 8001800:	e7ea      	b.n	80017d8 <MX_USART1_UART_Init+0x2c>
    Error_Handler();
 8001802:	f7fe fe2f 	bl	8000464 <Error_Handler>
 8001806:	e7ed      	b.n	80017e4 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 8001808:	f7fe fe2c 	bl	8000464 <Error_Handler>
 800180c:	e7f0      	b.n	80017f0 <MX_USART1_UART_Init+0x44>
    Error_Handler();
 800180e:	f7fe fe29 	bl	8000464 <Error_Handler>
}
 8001812:	e7f2      	b.n	80017fa <MX_USART1_UART_Init+0x4e>
 8001814:	2000008c 	.word	0x2000008c
 8001818:	40004400 	.word	0x40004400

0800181c <HAL_UART_MspInit>:

//   return ch;
// }

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800181c:	b510      	push	{r4, lr}
 800181e:	b08e      	sub	sp, #56	@ 0x38
 8001820:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	2214      	movs	r2, #20
 8001824:	2100      	movs	r1, #0
 8001826:	a809      	add	r0, sp, #36	@ 0x24
 8001828:	f000 f984 	bl	8001b34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800182c:	221c      	movs	r2, #28
 800182e:	2100      	movs	r1, #0
 8001830:	a802      	add	r0, sp, #8
 8001832:	f000 f97f 	bl	8001b34 <memset>
  if(uartHandle->Instance==USART1)
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <HAL_UART_MspInit+0x7c>)
 800183a:	429a      	cmp	r2, r3
 800183c:	d001      	beq.n	8001842 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800183e:	b00e      	add	sp, #56	@ 0x38
 8001840:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001842:	2301      	movs	r3, #1
 8001844:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001846:	a802      	add	r0, sp, #8
 8001848:	f7ff fa8a 	bl	8000d60 <HAL_RCCEx_PeriphCLKConfig>
 800184c:	2800      	cmp	r0, #0
 800184e:	d120      	bne.n	8001892 <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_UART_MspInit+0x80>)
 8001852:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001854:	2180      	movs	r1, #128	@ 0x80
 8001856:	01c9      	lsls	r1, r1, #7
 8001858:	430a      	orrs	r2, r1
 800185a:	641a      	str	r2, [r3, #64]	@ 0x40
 800185c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800185e:	400a      	ands	r2, r1
 8001860:	9200      	str	r2, [sp, #0]
 8001862:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001866:	2201      	movs	r2, #1
 8001868:	4311      	orrs	r1, r2
 800186a:	6359      	str	r1, [r3, #52]	@ 0x34
 800186c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186e:	401a      	ands	r2, r3
 8001870:	9201      	str	r2, [sp, #4]
 8001872:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001874:	a909      	add	r1, sp, #36	@ 0x24
 8001876:	2303      	movs	r3, #3
 8001878:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	3b01      	subs	r3, #1
 800187c:	604b      	str	r3, [r1, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	608b      	str	r3, [r1, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	60cb      	str	r3, [r1, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001884:	3304      	adds	r3, #4
 8001886:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	20a0      	movs	r0, #160	@ 0xa0
 800188a:	05c0      	lsls	r0, r0, #23
 800188c:	f7fe fef8 	bl	8000680 <HAL_GPIO_Init>
}
 8001890:	e7d5      	b.n	800183e <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001892:	f7fe fde7 	bl	8000464 <Error_Handler>
 8001896:	e7db      	b.n	8001850 <HAL_UART_MspInit+0x34>
 8001898:	40013800 	.word	0x40013800
 800189c:	40021000 	.word	0x40021000

080018a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018a0:	480d      	ldr	r0, [pc, #52]	@ (80018d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a4:	f7ff ff7a 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018aa:	e003      	b.n	80018b4 <LoopCopyDataInit>

080018ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80018ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018b2:	3104      	adds	r1, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018b4:	480a      	ldr	r0, [pc, #40]	@ (80018e0 <LoopForever+0xa>)
  ldr r3, =_edata
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <LoopForever+0xe>)
  adds r2, r0, r1
 80018b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018bc:	d3f6      	bcc.n	80018ac <CopyDataInit>
  ldr r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <LoopForever+0x12>)
  b LoopFillZerobss
 80018c0:	e002      	b.n	80018c8 <LoopFillZerobss>

080018c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  str  r3, [r2]
 80018c4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c6:	3204      	adds	r2, #4

080018c8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <LoopForever+0x16>)
  cmp r2, r3
 80018ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018cc:	d3f9      	bcc.n	80018c2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80018ce:	f000 f98d 	bl	8001bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d2:	f7fe fdff 	bl	80004d4 <main>

080018d6 <LoopForever>:

LoopForever:
    b LoopForever
 80018d6:	e7fe      	b.n	80018d6 <LoopForever>
  ldr   r0, =_estack
 80018d8:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80018dc:	080028a8 	.word	0x080028a8
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018e4:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80018e8:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80018ec:	2000026c 	.word	0x2000026c

080018f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC1_IRQHandler>
	...

080018f4 <std>:
 80018f4:	2300      	movs	r3, #0
 80018f6:	b510      	push	{r4, lr}
 80018f8:	0004      	movs	r4, r0
 80018fa:	6003      	str	r3, [r0, #0]
 80018fc:	6043      	str	r3, [r0, #4]
 80018fe:	6083      	str	r3, [r0, #8]
 8001900:	8181      	strh	r1, [r0, #12]
 8001902:	6643      	str	r3, [r0, #100]	@ 0x64
 8001904:	81c2      	strh	r2, [r0, #14]
 8001906:	6103      	str	r3, [r0, #16]
 8001908:	6143      	str	r3, [r0, #20]
 800190a:	6183      	str	r3, [r0, #24]
 800190c:	0019      	movs	r1, r3
 800190e:	2208      	movs	r2, #8
 8001910:	305c      	adds	r0, #92	@ 0x5c
 8001912:	f000 f90f 	bl	8001b34 <memset>
 8001916:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <std+0x50>)
 8001918:	6224      	str	r4, [r4, #32]
 800191a:	6263      	str	r3, [r4, #36]	@ 0x24
 800191c:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <std+0x54>)
 800191e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001920:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <std+0x58>)
 8001922:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001924:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <std+0x5c>)
 8001926:	6323      	str	r3, [r4, #48]	@ 0x30
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <std+0x60>)
 800192a:	429c      	cmp	r4, r3
 800192c:	d005      	beq.n	800193a <std+0x46>
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <std+0x64>)
 8001930:	429c      	cmp	r4, r3
 8001932:	d002      	beq.n	800193a <std+0x46>
 8001934:	4b09      	ldr	r3, [pc, #36]	@ (800195c <std+0x68>)
 8001936:	429c      	cmp	r4, r3
 8001938:	d103      	bne.n	8001942 <std+0x4e>
 800193a:	0020      	movs	r0, r4
 800193c:	3058      	adds	r0, #88	@ 0x58
 800193e:	f000 f979 	bl	8001c34 <__retarget_lock_init_recursive>
 8001942:	bd10      	pop	{r4, pc}
 8001944:	08001a9d 	.word	0x08001a9d
 8001948:	08001ac5 	.word	0x08001ac5
 800194c:	08001afd 	.word	0x08001afd
 8001950:	08001b29 	.word	0x08001b29
 8001954:	20000120 	.word	0x20000120
 8001958:	20000188 	.word	0x20000188
 800195c:	200001f0 	.word	0x200001f0

08001960 <stdio_exit_handler>:
 8001960:	b510      	push	{r4, lr}
 8001962:	4a03      	ldr	r2, [pc, #12]	@ (8001970 <stdio_exit_handler+0x10>)
 8001964:	4903      	ldr	r1, [pc, #12]	@ (8001974 <stdio_exit_handler+0x14>)
 8001966:	4804      	ldr	r0, [pc, #16]	@ (8001978 <stdio_exit_handler+0x18>)
 8001968:	f000 f86c 	bl	8001a44 <_fwalk_sglue>
 800196c:	bd10      	pop	{r4, pc}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	2000000c 	.word	0x2000000c
 8001974:	080024d1 	.word	0x080024d1
 8001978:	2000001c 	.word	0x2000001c

0800197c <cleanup_stdio>:
 800197c:	6841      	ldr	r1, [r0, #4]
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <cleanup_stdio+0x30>)
 8001980:	b510      	push	{r4, lr}
 8001982:	0004      	movs	r4, r0
 8001984:	4299      	cmp	r1, r3
 8001986:	d001      	beq.n	800198c <cleanup_stdio+0x10>
 8001988:	f000 fda2 	bl	80024d0 <_fflush_r>
 800198c:	68a1      	ldr	r1, [r4, #8]
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <cleanup_stdio+0x34>)
 8001990:	4299      	cmp	r1, r3
 8001992:	d002      	beq.n	800199a <cleanup_stdio+0x1e>
 8001994:	0020      	movs	r0, r4
 8001996:	f000 fd9b 	bl	80024d0 <_fflush_r>
 800199a:	68e1      	ldr	r1, [r4, #12]
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <cleanup_stdio+0x38>)
 800199e:	4299      	cmp	r1, r3
 80019a0:	d002      	beq.n	80019a8 <cleanup_stdio+0x2c>
 80019a2:	0020      	movs	r0, r4
 80019a4:	f000 fd94 	bl	80024d0 <_fflush_r>
 80019a8:	bd10      	pop	{r4, pc}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	20000120 	.word	0x20000120
 80019b0:	20000188 	.word	0x20000188
 80019b4:	200001f0 	.word	0x200001f0

080019b8 <global_stdio_init.part.0>:
 80019b8:	b510      	push	{r4, lr}
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <global_stdio_init.part.0+0x28>)
 80019bc:	4a09      	ldr	r2, [pc, #36]	@ (80019e4 <global_stdio_init.part.0+0x2c>)
 80019be:	2104      	movs	r1, #4
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	4809      	ldr	r0, [pc, #36]	@ (80019e8 <global_stdio_init.part.0+0x30>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	f7ff ff95 	bl	80018f4 <std>
 80019ca:	2201      	movs	r2, #1
 80019cc:	2109      	movs	r1, #9
 80019ce:	4807      	ldr	r0, [pc, #28]	@ (80019ec <global_stdio_init.part.0+0x34>)
 80019d0:	f7ff ff90 	bl	80018f4 <std>
 80019d4:	2202      	movs	r2, #2
 80019d6:	2112      	movs	r1, #18
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <global_stdio_init.part.0+0x38>)
 80019da:	f7ff ff8b 	bl	80018f4 <std>
 80019de:	bd10      	pop	{r4, pc}
 80019e0:	20000258 	.word	0x20000258
 80019e4:	08001961 	.word	0x08001961
 80019e8:	20000120 	.word	0x20000120
 80019ec:	20000188 	.word	0x20000188
 80019f0:	200001f0 	.word	0x200001f0

080019f4 <__sfp_lock_acquire>:
 80019f4:	b510      	push	{r4, lr}
 80019f6:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <__sfp_lock_acquire+0xc>)
 80019f8:	f000 f91d 	bl	8001c36 <__retarget_lock_acquire_recursive>
 80019fc:	bd10      	pop	{r4, pc}
 80019fe:	46c0      	nop			@ (mov r8, r8)
 8001a00:	20000261 	.word	0x20000261

08001a04 <__sfp_lock_release>:
 8001a04:	b510      	push	{r4, lr}
 8001a06:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <__sfp_lock_release+0xc>)
 8001a08:	f000 f916 	bl	8001c38 <__retarget_lock_release_recursive>
 8001a0c:	bd10      	pop	{r4, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	20000261 	.word	0x20000261

08001a14 <__sinit>:
 8001a14:	b510      	push	{r4, lr}
 8001a16:	0004      	movs	r4, r0
 8001a18:	f7ff ffec 	bl	80019f4 <__sfp_lock_acquire>
 8001a1c:	6a23      	ldr	r3, [r4, #32]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <__sinit+0x14>
 8001a22:	f7ff ffef 	bl	8001a04 <__sfp_lock_release>
 8001a26:	bd10      	pop	{r4, pc}
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <__sinit+0x28>)
 8001a2a:	6223      	str	r3, [r4, #32]
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <__sinit+0x2c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f6      	bne.n	8001a22 <__sinit+0xe>
 8001a34:	f7ff ffc0 	bl	80019b8 <global_stdio_init.part.0>
 8001a38:	e7f3      	b.n	8001a22 <__sinit+0xe>
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	0800197d 	.word	0x0800197d
 8001a40:	20000258 	.word	0x20000258

08001a44 <_fwalk_sglue>:
 8001a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a46:	0014      	movs	r4, r2
 8001a48:	2600      	movs	r6, #0
 8001a4a:	9000      	str	r0, [sp, #0]
 8001a4c:	9101      	str	r1, [sp, #4]
 8001a4e:	68a5      	ldr	r5, [r4, #8]
 8001a50:	6867      	ldr	r7, [r4, #4]
 8001a52:	3f01      	subs	r7, #1
 8001a54:	d504      	bpl.n	8001a60 <_fwalk_sglue+0x1c>
 8001a56:	6824      	ldr	r4, [r4, #0]
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d1f8      	bne.n	8001a4e <_fwalk_sglue+0xa>
 8001a5c:	0030      	movs	r0, r6
 8001a5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001a60:	89ab      	ldrh	r3, [r5, #12]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d908      	bls.n	8001a78 <_fwalk_sglue+0x34>
 8001a66:	220e      	movs	r2, #14
 8001a68:	5eab      	ldrsh	r3, [r5, r2]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	d004      	beq.n	8001a78 <_fwalk_sglue+0x34>
 8001a6e:	0029      	movs	r1, r5
 8001a70:	9800      	ldr	r0, [sp, #0]
 8001a72:	9b01      	ldr	r3, [sp, #4]
 8001a74:	4798      	blx	r3
 8001a76:	4306      	orrs	r6, r0
 8001a78:	3568      	adds	r5, #104	@ 0x68
 8001a7a:	e7ea      	b.n	8001a52 <_fwalk_sglue+0xe>

08001a7c <iprintf>:
 8001a7c:	b40f      	push	{r0, r1, r2, r3}
 8001a7e:	b507      	push	{r0, r1, r2, lr}
 8001a80:	4905      	ldr	r1, [pc, #20]	@ (8001a98 <iprintf+0x1c>)
 8001a82:	ab04      	add	r3, sp, #16
 8001a84:	6808      	ldr	r0, [r1, #0]
 8001a86:	cb04      	ldmia	r3!, {r2}
 8001a88:	6881      	ldr	r1, [r0, #8]
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	f000 f9fa 	bl	8001e84 <_vfiprintf_r>
 8001a90:	b003      	add	sp, #12
 8001a92:	bc08      	pop	{r3}
 8001a94:	b004      	add	sp, #16
 8001a96:	4718      	bx	r3
 8001a98:	20000018 	.word	0x20000018

08001a9c <__sread>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	000c      	movs	r4, r1
 8001aa0:	250e      	movs	r5, #14
 8001aa2:	5f49      	ldrsh	r1, [r1, r5]
 8001aa4:	f000 f874 	bl	8001b90 <_read_r>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	db03      	blt.n	8001ab4 <__sread+0x18>
 8001aac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001aae:	181b      	adds	r3, r3, r0
 8001ab0:	6563      	str	r3, [r4, #84]	@ 0x54
 8001ab2:	bd70      	pop	{r4, r5, r6, pc}
 8001ab4:	89a3      	ldrh	r3, [r4, #12]
 8001ab6:	4a02      	ldr	r2, [pc, #8]	@ (8001ac0 <__sread+0x24>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	81a3      	strh	r3, [r4, #12]
 8001abc:	e7f9      	b.n	8001ab2 <__sread+0x16>
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	ffffefff 	.word	0xffffefff

08001ac4 <__swrite>:
 8001ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac6:	001f      	movs	r7, r3
 8001ac8:	898b      	ldrh	r3, [r1, #12]
 8001aca:	0005      	movs	r5, r0
 8001acc:	000c      	movs	r4, r1
 8001ace:	0016      	movs	r6, r2
 8001ad0:	05db      	lsls	r3, r3, #23
 8001ad2:	d505      	bpl.n	8001ae0 <__swrite+0x1c>
 8001ad4:	230e      	movs	r3, #14
 8001ad6:	5ec9      	ldrsh	r1, [r1, r3]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2302      	movs	r3, #2
 8001adc:	f000 f844 	bl	8001b68 <_lseek_r>
 8001ae0:	89a3      	ldrh	r3, [r4, #12]
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <__swrite+0x34>)
 8001ae4:	0028      	movs	r0, r5
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	81a3      	strh	r3, [r4, #12]
 8001aea:	0032      	movs	r2, r6
 8001aec:	230e      	movs	r3, #14
 8001aee:	5ee1      	ldrsh	r1, [r4, r3]
 8001af0:	003b      	movs	r3, r7
 8001af2:	f000 f861 	bl	8001bb8 <_write_r>
 8001af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001af8:	ffffefff 	.word	0xffffefff

08001afc <__sseek>:
 8001afc:	b570      	push	{r4, r5, r6, lr}
 8001afe:	000c      	movs	r4, r1
 8001b00:	250e      	movs	r5, #14
 8001b02:	5f49      	ldrsh	r1, [r1, r5]
 8001b04:	f000 f830 	bl	8001b68 <_lseek_r>
 8001b08:	220c      	movs	r2, #12
 8001b0a:	5ea3      	ldrsh	r3, [r4, r2]
 8001b0c:	1c42      	adds	r2, r0, #1
 8001b0e:	d103      	bne.n	8001b18 <__sseek+0x1c>
 8001b10:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <__sseek+0x28>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	81a3      	strh	r3, [r4, #12]
 8001b16:	bd70      	pop	{r4, r5, r6, pc}
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	0152      	lsls	r2, r2, #5
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	81a3      	strh	r3, [r4, #12]
 8001b20:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b22:	e7f8      	b.n	8001b16 <__sseek+0x1a>
 8001b24:	ffffefff 	.word	0xffffefff

08001b28 <__sclose>:
 8001b28:	b510      	push	{r4, lr}
 8001b2a:	230e      	movs	r3, #14
 8001b2c:	5ec9      	ldrsh	r1, [r1, r3]
 8001b2e:	f000 f809 	bl	8001b44 <_close_r>
 8001b32:	bd10      	pop	{r4, pc}

08001b34 <memset>:
 8001b34:	0003      	movs	r3, r0
 8001b36:	1882      	adds	r2, r0, r2
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d100      	bne.n	8001b3e <memset+0xa>
 8001b3c:	4770      	bx	lr
 8001b3e:	7019      	strb	r1, [r3, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	e7f9      	b.n	8001b38 <memset+0x4>

08001b44 <_close_r>:
 8001b44:	2300      	movs	r3, #0
 8001b46:	b570      	push	{r4, r5, r6, lr}
 8001b48:	4d06      	ldr	r5, [pc, #24]	@ (8001b64 <_close_r+0x20>)
 8001b4a:	0004      	movs	r4, r0
 8001b4c:	0008      	movs	r0, r1
 8001b4e:	602b      	str	r3, [r5, #0]
 8001b50:	f7ff fdf3 	bl	800173a <_close>
 8001b54:	1c43      	adds	r3, r0, #1
 8001b56:	d103      	bne.n	8001b60 <_close_r+0x1c>
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d000      	beq.n	8001b60 <_close_r+0x1c>
 8001b5e:	6023      	str	r3, [r4, #0]
 8001b60:	bd70      	pop	{r4, r5, r6, pc}
 8001b62:	46c0      	nop			@ (mov r8, r8)
 8001b64:	2000025c 	.word	0x2000025c

08001b68 <_lseek_r>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	0004      	movs	r4, r0
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	0011      	movs	r1, r2
 8001b70:	001a      	movs	r2, r3
 8001b72:	2300      	movs	r3, #0
 8001b74:	4d05      	ldr	r5, [pc, #20]	@ (8001b8c <_lseek_r+0x24>)
 8001b76:	602b      	str	r3, [r5, #0]
 8001b78:	f7ff fde9 	bl	800174e <_lseek>
 8001b7c:	1c43      	adds	r3, r0, #1
 8001b7e:	d103      	bne.n	8001b88 <_lseek_r+0x20>
 8001b80:	682b      	ldr	r3, [r5, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d000      	beq.n	8001b88 <_lseek_r+0x20>
 8001b86:	6023      	str	r3, [r4, #0]
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	2000025c 	.word	0x2000025c

08001b90 <_read_r>:
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	0004      	movs	r4, r0
 8001b94:	0008      	movs	r0, r1
 8001b96:	0011      	movs	r1, r2
 8001b98:	001a      	movs	r2, r3
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	4d05      	ldr	r5, [pc, #20]	@ (8001bb4 <_read_r+0x24>)
 8001b9e:	602b      	str	r3, [r5, #0]
 8001ba0:	f7ff fdaf 	bl	8001702 <_read>
 8001ba4:	1c43      	adds	r3, r0, #1
 8001ba6:	d103      	bne.n	8001bb0 <_read_r+0x20>
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d000      	beq.n	8001bb0 <_read_r+0x20>
 8001bae:	6023      	str	r3, [r4, #0]
 8001bb0:	bd70      	pop	{r4, r5, r6, pc}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	2000025c 	.word	0x2000025c

08001bb8 <_write_r>:
 8001bb8:	b570      	push	{r4, r5, r6, lr}
 8001bba:	0004      	movs	r4, r0
 8001bbc:	0008      	movs	r0, r1
 8001bbe:	0011      	movs	r1, r2
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	4d05      	ldr	r5, [pc, #20]	@ (8001bdc <_write_r+0x24>)
 8001bc6:	602b      	str	r3, [r5, #0]
 8001bc8:	f7ff fda9 	bl	800171e <_write>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	d103      	bne.n	8001bd8 <_write_r+0x20>
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d000      	beq.n	8001bd8 <_write_r+0x20>
 8001bd6:	6023      	str	r3, [r4, #0]
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	2000025c 	.word	0x2000025c

08001be0 <__errno>:
 8001be0:	4b01      	ldr	r3, [pc, #4]	@ (8001be8 <__errno+0x8>)
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	4770      	bx	lr
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	20000018 	.word	0x20000018

08001bec <__libc_init_array>:
 8001bec:	b570      	push	{r4, r5, r6, lr}
 8001bee:	2600      	movs	r6, #0
 8001bf0:	4c0c      	ldr	r4, [pc, #48]	@ (8001c24 <__libc_init_array+0x38>)
 8001bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8001c28 <__libc_init_array+0x3c>)
 8001bf4:	1b64      	subs	r4, r4, r5
 8001bf6:	10a4      	asrs	r4, r4, #2
 8001bf8:	42a6      	cmp	r6, r4
 8001bfa:	d109      	bne.n	8001c10 <__libc_init_array+0x24>
 8001bfc:	2600      	movs	r6, #0
 8001bfe:	f000 fdd5 	bl	80027ac <_init>
 8001c02:	4c0a      	ldr	r4, [pc, #40]	@ (8001c2c <__libc_init_array+0x40>)
 8001c04:	4d0a      	ldr	r5, [pc, #40]	@ (8001c30 <__libc_init_array+0x44>)
 8001c06:	1b64      	subs	r4, r4, r5
 8001c08:	10a4      	asrs	r4, r4, #2
 8001c0a:	42a6      	cmp	r6, r4
 8001c0c:	d105      	bne.n	8001c1a <__libc_init_array+0x2e>
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
 8001c10:	00b3      	lsls	r3, r6, #2
 8001c12:	58eb      	ldr	r3, [r5, r3]
 8001c14:	4798      	blx	r3
 8001c16:	3601      	adds	r6, #1
 8001c18:	e7ee      	b.n	8001bf8 <__libc_init_array+0xc>
 8001c1a:	00b3      	lsls	r3, r6, #2
 8001c1c:	58eb      	ldr	r3, [r5, r3]
 8001c1e:	4798      	blx	r3
 8001c20:	3601      	adds	r6, #1
 8001c22:	e7f2      	b.n	8001c0a <__libc_init_array+0x1e>
 8001c24:	080028a0 	.word	0x080028a0
 8001c28:	080028a0 	.word	0x080028a0
 8001c2c:	080028a4 	.word	0x080028a4
 8001c30:	080028a0 	.word	0x080028a0

08001c34 <__retarget_lock_init_recursive>:
 8001c34:	4770      	bx	lr

08001c36 <__retarget_lock_acquire_recursive>:
 8001c36:	4770      	bx	lr

08001c38 <__retarget_lock_release_recursive>:
 8001c38:	4770      	bx	lr
	...

08001c3c <_free_r>:
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	0005      	movs	r5, r0
 8001c40:	1e0c      	subs	r4, r1, #0
 8001c42:	d010      	beq.n	8001c66 <_free_r+0x2a>
 8001c44:	3c04      	subs	r4, #4
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	da00      	bge.n	8001c4e <_free_r+0x12>
 8001c4c:	18e4      	adds	r4, r4, r3
 8001c4e:	0028      	movs	r0, r5
 8001c50:	f000 f8e0 	bl	8001e14 <__malloc_lock>
 8001c54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ccc <_free_r+0x90>)
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <_free_r+0x2c>
 8001c5c:	6063      	str	r3, [r4, #4]
 8001c5e:	6014      	str	r4, [r2, #0]
 8001c60:	0028      	movs	r0, r5
 8001c62:	f000 f8df 	bl	8001e24 <__malloc_unlock>
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
 8001c68:	42a3      	cmp	r3, r4
 8001c6a:	d908      	bls.n	8001c7e <_free_r+0x42>
 8001c6c:	6820      	ldr	r0, [r4, #0]
 8001c6e:	1821      	adds	r1, r4, r0
 8001c70:	428b      	cmp	r3, r1
 8001c72:	d1f3      	bne.n	8001c5c <_free_r+0x20>
 8001c74:	6819      	ldr	r1, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	1809      	adds	r1, r1, r0
 8001c7a:	6021      	str	r1, [r4, #0]
 8001c7c:	e7ee      	b.n	8001c5c <_free_r+0x20>
 8001c7e:	001a      	movs	r2, r3
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <_free_r+0x4e>
 8001c86:	42a3      	cmp	r3, r4
 8001c88:	d9f9      	bls.n	8001c7e <_free_r+0x42>
 8001c8a:	6811      	ldr	r1, [r2, #0]
 8001c8c:	1850      	adds	r0, r2, r1
 8001c8e:	42a0      	cmp	r0, r4
 8001c90:	d10b      	bne.n	8001caa <_free_r+0x6e>
 8001c92:	6820      	ldr	r0, [r4, #0]
 8001c94:	1809      	adds	r1, r1, r0
 8001c96:	1850      	adds	r0, r2, r1
 8001c98:	6011      	str	r1, [r2, #0]
 8001c9a:	4283      	cmp	r3, r0
 8001c9c:	d1e0      	bne.n	8001c60 <_free_r+0x24>
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	1841      	adds	r1, r0, r1
 8001ca4:	6011      	str	r1, [r2, #0]
 8001ca6:	6053      	str	r3, [r2, #4]
 8001ca8:	e7da      	b.n	8001c60 <_free_r+0x24>
 8001caa:	42a0      	cmp	r0, r4
 8001cac:	d902      	bls.n	8001cb4 <_free_r+0x78>
 8001cae:	230c      	movs	r3, #12
 8001cb0:	602b      	str	r3, [r5, #0]
 8001cb2:	e7d5      	b.n	8001c60 <_free_r+0x24>
 8001cb4:	6820      	ldr	r0, [r4, #0]
 8001cb6:	1821      	adds	r1, r4, r0
 8001cb8:	428b      	cmp	r3, r1
 8001cba:	d103      	bne.n	8001cc4 <_free_r+0x88>
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	1809      	adds	r1, r1, r0
 8001cc2:	6021      	str	r1, [r4, #0]
 8001cc4:	6063      	str	r3, [r4, #4]
 8001cc6:	6054      	str	r4, [r2, #4]
 8001cc8:	e7ca      	b.n	8001c60 <_free_r+0x24>
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	20000268 	.word	0x20000268

08001cd0 <sbrk_aligned>:
 8001cd0:	b570      	push	{r4, r5, r6, lr}
 8001cd2:	4e0f      	ldr	r6, [pc, #60]	@ (8001d10 <sbrk_aligned+0x40>)
 8001cd4:	000d      	movs	r5, r1
 8001cd6:	6831      	ldr	r1, [r6, #0]
 8001cd8:	0004      	movs	r4, r0
 8001cda:	2900      	cmp	r1, #0
 8001cdc:	d102      	bne.n	8001ce4 <sbrk_aligned+0x14>
 8001cde:	f000 fcbf 	bl	8002660 <_sbrk_r>
 8001ce2:	6030      	str	r0, [r6, #0]
 8001ce4:	0029      	movs	r1, r5
 8001ce6:	0020      	movs	r0, r4
 8001ce8:	f000 fcba 	bl	8002660 <_sbrk_r>
 8001cec:	1c43      	adds	r3, r0, #1
 8001cee:	d103      	bne.n	8001cf8 <sbrk_aligned+0x28>
 8001cf0:	2501      	movs	r5, #1
 8001cf2:	426d      	negs	r5, r5
 8001cf4:	0028      	movs	r0, r5
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	1cc5      	adds	r5, r0, #3
 8001cfc:	439d      	bics	r5, r3
 8001cfe:	42a8      	cmp	r0, r5
 8001d00:	d0f8      	beq.n	8001cf4 <sbrk_aligned+0x24>
 8001d02:	1a29      	subs	r1, r5, r0
 8001d04:	0020      	movs	r0, r4
 8001d06:	f000 fcab 	bl	8002660 <_sbrk_r>
 8001d0a:	3001      	adds	r0, #1
 8001d0c:	d1f2      	bne.n	8001cf4 <sbrk_aligned+0x24>
 8001d0e:	e7ef      	b.n	8001cf0 <sbrk_aligned+0x20>
 8001d10:	20000264 	.word	0x20000264

08001d14 <_malloc_r>:
 8001d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d16:	2203      	movs	r2, #3
 8001d18:	1ccb      	adds	r3, r1, #3
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	3308      	adds	r3, #8
 8001d1e:	0005      	movs	r5, r0
 8001d20:	001f      	movs	r7, r3
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d234      	bcs.n	8001d90 <_malloc_r+0x7c>
 8001d26:	270c      	movs	r7, #12
 8001d28:	42b9      	cmp	r1, r7
 8001d2a:	d833      	bhi.n	8001d94 <_malloc_r+0x80>
 8001d2c:	0028      	movs	r0, r5
 8001d2e:	f000 f871 	bl	8001e14 <__malloc_lock>
 8001d32:	4e37      	ldr	r6, [pc, #220]	@ (8001e10 <_malloc_r+0xfc>)
 8001d34:	6833      	ldr	r3, [r6, #0]
 8001d36:	001c      	movs	r4, r3
 8001d38:	2c00      	cmp	r4, #0
 8001d3a:	d12f      	bne.n	8001d9c <_malloc_r+0x88>
 8001d3c:	0039      	movs	r1, r7
 8001d3e:	0028      	movs	r0, r5
 8001d40:	f7ff ffc6 	bl	8001cd0 <sbrk_aligned>
 8001d44:	0004      	movs	r4, r0
 8001d46:	1c43      	adds	r3, r0, #1
 8001d48:	d15f      	bne.n	8001e0a <_malloc_r+0xf6>
 8001d4a:	6834      	ldr	r4, [r6, #0]
 8001d4c:	9400      	str	r4, [sp, #0]
 8001d4e:	9b00      	ldr	r3, [sp, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d14a      	bne.n	8001dea <_malloc_r+0xd6>
 8001d54:	2c00      	cmp	r4, #0
 8001d56:	d052      	beq.n	8001dfe <_malloc_r+0xea>
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	0028      	movs	r0, r5
 8001d5c:	18e3      	adds	r3, r4, r3
 8001d5e:	9900      	ldr	r1, [sp, #0]
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	f000 fc7d 	bl	8002660 <_sbrk_r>
 8001d66:	9b01      	ldr	r3, [sp, #4]
 8001d68:	4283      	cmp	r3, r0
 8001d6a:	d148      	bne.n	8001dfe <_malloc_r+0xea>
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	0028      	movs	r0, r5
 8001d70:	1aff      	subs	r7, r7, r3
 8001d72:	0039      	movs	r1, r7
 8001d74:	f7ff ffac 	bl	8001cd0 <sbrk_aligned>
 8001d78:	3001      	adds	r0, #1
 8001d7a:	d040      	beq.n	8001dfe <_malloc_r+0xea>
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	19db      	adds	r3, r3, r7
 8001d80:	6023      	str	r3, [r4, #0]
 8001d82:	6833      	ldr	r3, [r6, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	d133      	bne.n	8001df2 <_malloc_r+0xde>
 8001d8a:	9b00      	ldr	r3, [sp, #0]
 8001d8c:	6033      	str	r3, [r6, #0]
 8001d8e:	e019      	b.n	8001dc4 <_malloc_r+0xb0>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	dac9      	bge.n	8001d28 <_malloc_r+0x14>
 8001d94:	230c      	movs	r3, #12
 8001d96:	602b      	str	r3, [r5, #0]
 8001d98:	2000      	movs	r0, #0
 8001d9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d9c:	6821      	ldr	r1, [r4, #0]
 8001d9e:	1bc9      	subs	r1, r1, r7
 8001da0:	d420      	bmi.n	8001de4 <_malloc_r+0xd0>
 8001da2:	290b      	cmp	r1, #11
 8001da4:	d90a      	bls.n	8001dbc <_malloc_r+0xa8>
 8001da6:	19e2      	adds	r2, r4, r7
 8001da8:	6027      	str	r7, [r4, #0]
 8001daa:	42a3      	cmp	r3, r4
 8001dac:	d104      	bne.n	8001db8 <_malloc_r+0xa4>
 8001dae:	6032      	str	r2, [r6, #0]
 8001db0:	6863      	ldr	r3, [r4, #4]
 8001db2:	6011      	str	r1, [r2, #0]
 8001db4:	6053      	str	r3, [r2, #4]
 8001db6:	e005      	b.n	8001dc4 <_malloc_r+0xb0>
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	e7f9      	b.n	8001db0 <_malloc_r+0x9c>
 8001dbc:	6862      	ldr	r2, [r4, #4]
 8001dbe:	42a3      	cmp	r3, r4
 8001dc0:	d10e      	bne.n	8001de0 <_malloc_r+0xcc>
 8001dc2:	6032      	str	r2, [r6, #0]
 8001dc4:	0028      	movs	r0, r5
 8001dc6:	f000 f82d 	bl	8001e24 <__malloc_unlock>
 8001dca:	0020      	movs	r0, r4
 8001dcc:	2207      	movs	r2, #7
 8001dce:	300b      	adds	r0, #11
 8001dd0:	1d23      	adds	r3, r4, #4
 8001dd2:	4390      	bics	r0, r2
 8001dd4:	1ac2      	subs	r2, r0, r3
 8001dd6:	4298      	cmp	r0, r3
 8001dd8:	d0df      	beq.n	8001d9a <_malloc_r+0x86>
 8001dda:	1a1b      	subs	r3, r3, r0
 8001ddc:	50a3      	str	r3, [r4, r2]
 8001dde:	e7dc      	b.n	8001d9a <_malloc_r+0x86>
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	e7ef      	b.n	8001dc4 <_malloc_r+0xb0>
 8001de4:	0023      	movs	r3, r4
 8001de6:	6864      	ldr	r4, [r4, #4]
 8001de8:	e7a6      	b.n	8001d38 <_malloc_r+0x24>
 8001dea:	9c00      	ldr	r4, [sp, #0]
 8001dec:	6863      	ldr	r3, [r4, #4]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	e7ad      	b.n	8001d4e <_malloc_r+0x3a>
 8001df2:	001a      	movs	r2, r3
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	42a3      	cmp	r3, r4
 8001df8:	d1fb      	bne.n	8001df2 <_malloc_r+0xde>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e7da      	b.n	8001db4 <_malloc_r+0xa0>
 8001dfe:	230c      	movs	r3, #12
 8001e00:	0028      	movs	r0, r5
 8001e02:	602b      	str	r3, [r5, #0]
 8001e04:	f000 f80e 	bl	8001e24 <__malloc_unlock>
 8001e08:	e7c6      	b.n	8001d98 <_malloc_r+0x84>
 8001e0a:	6007      	str	r7, [r0, #0]
 8001e0c:	e7da      	b.n	8001dc4 <_malloc_r+0xb0>
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	20000268 	.word	0x20000268

08001e14 <__malloc_lock>:
 8001e14:	b510      	push	{r4, lr}
 8001e16:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <__malloc_lock+0xc>)
 8001e18:	f7ff ff0d 	bl	8001c36 <__retarget_lock_acquire_recursive>
 8001e1c:	bd10      	pop	{r4, pc}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	20000260 	.word	0x20000260

08001e24 <__malloc_unlock>:
 8001e24:	b510      	push	{r4, lr}
 8001e26:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <__malloc_unlock+0xc>)
 8001e28:	f7ff ff06 	bl	8001c38 <__retarget_lock_release_recursive>
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	20000260 	.word	0x20000260

08001e34 <__sfputc_r>:
 8001e34:	6893      	ldr	r3, [r2, #8]
 8001e36:	b510      	push	{r4, lr}
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	6093      	str	r3, [r2, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da04      	bge.n	8001e4a <__sfputc_r+0x16>
 8001e40:	6994      	ldr	r4, [r2, #24]
 8001e42:	42a3      	cmp	r3, r4
 8001e44:	db07      	blt.n	8001e56 <__sfputc_r+0x22>
 8001e46:	290a      	cmp	r1, #10
 8001e48:	d005      	beq.n	8001e56 <__sfputc_r+0x22>
 8001e4a:	6813      	ldr	r3, [r2, #0]
 8001e4c:	1c58      	adds	r0, r3, #1
 8001e4e:	6010      	str	r0, [r2, #0]
 8001e50:	7019      	strb	r1, [r3, #0]
 8001e52:	0008      	movs	r0, r1
 8001e54:	bd10      	pop	{r4, pc}
 8001e56:	f000 fb66 	bl	8002526 <__swbuf_r>
 8001e5a:	0001      	movs	r1, r0
 8001e5c:	e7f9      	b.n	8001e52 <__sfputc_r+0x1e>

08001e5e <__sfputs_r>:
 8001e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e60:	0006      	movs	r6, r0
 8001e62:	000f      	movs	r7, r1
 8001e64:	0014      	movs	r4, r2
 8001e66:	18d5      	adds	r5, r2, r3
 8001e68:	42ac      	cmp	r4, r5
 8001e6a:	d101      	bne.n	8001e70 <__sfputs_r+0x12>
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	e007      	b.n	8001e80 <__sfputs_r+0x22>
 8001e70:	7821      	ldrb	r1, [r4, #0]
 8001e72:	003a      	movs	r2, r7
 8001e74:	0030      	movs	r0, r6
 8001e76:	f7ff ffdd 	bl	8001e34 <__sfputc_r>
 8001e7a:	3401      	adds	r4, #1
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	d1f3      	bne.n	8001e68 <__sfputs_r+0xa>
 8001e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e84 <_vfiprintf_r>:
 8001e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e86:	b09f      	sub	sp, #124	@ 0x7c
 8001e88:	000d      	movs	r5, r1
 8001e8a:	0016      	movs	r6, r2
 8001e8c:	001c      	movs	r4, r3
 8001e8e:	9002      	str	r0, [sp, #8]
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d004      	beq.n	8001e9e <_vfiprintf_r+0x1a>
 8001e94:	6a03      	ldr	r3, [r0, #32]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <_vfiprintf_r+0x1a>
 8001e9a:	f7ff fdbb 	bl	8001a14 <__sinit>
 8001e9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ea0:	07db      	lsls	r3, r3, #31
 8001ea2:	d405      	bmi.n	8001eb0 <_vfiprintf_r+0x2c>
 8001ea4:	89ab      	ldrh	r3, [r5, #12]
 8001ea6:	059b      	lsls	r3, r3, #22
 8001ea8:	d402      	bmi.n	8001eb0 <_vfiprintf_r+0x2c>
 8001eaa:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001eac:	f7ff fec3 	bl	8001c36 <__retarget_lock_acquire_recursive>
 8001eb0:	89ab      	ldrh	r3, [r5, #12]
 8001eb2:	071b      	lsls	r3, r3, #28
 8001eb4:	d502      	bpl.n	8001ebc <_vfiprintf_r+0x38>
 8001eb6:	692b      	ldr	r3, [r5, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d113      	bne.n	8001ee4 <_vfiprintf_r+0x60>
 8001ebc:	0029      	movs	r1, r5
 8001ebe:	9802      	ldr	r0, [sp, #8]
 8001ec0:	f000 fb74 	bl	80025ac <__swsetup_r>
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d00d      	beq.n	8001ee4 <_vfiprintf_r+0x60>
 8001ec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001eca:	07db      	lsls	r3, r3, #31
 8001ecc:	d503      	bpl.n	8001ed6 <_vfiprintf_r+0x52>
 8001ece:	2001      	movs	r0, #1
 8001ed0:	4240      	negs	r0, r0
 8001ed2:	b01f      	add	sp, #124	@ 0x7c
 8001ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed6:	89ab      	ldrh	r3, [r5, #12]
 8001ed8:	059b      	lsls	r3, r3, #22
 8001eda:	d4f8      	bmi.n	8001ece <_vfiprintf_r+0x4a>
 8001edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ede:	f7ff feab 	bl	8001c38 <__retarget_lock_release_recursive>
 8001ee2:	e7f4      	b.n	8001ece <_vfiprintf_r+0x4a>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2129      	movs	r1, #41	@ 0x29
 8001ee8:	aa02      	add	r2, sp, #8
 8001eea:	1852      	adds	r2, r2, r1
 8001eec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001eee:	3320      	adds	r3, #32
 8001ef0:	7013      	strb	r3, [r2, #0]
 8001ef2:	3101      	adds	r1, #1
 8001ef4:	aa02      	add	r2, sp, #8
 8001ef6:	3310      	adds	r3, #16
 8001ef8:	1852      	adds	r2, r2, r1
 8001efa:	7013      	strb	r3, [r2, #0]
 8001efc:	9405      	str	r4, [sp, #20]
 8001efe:	0034      	movs	r4, r6
 8001f00:	7823      	ldrb	r3, [r4, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <_vfiprintf_r+0x86>
 8001f06:	2b25      	cmp	r3, #37	@ 0x25
 8001f08:	d148      	bne.n	8001f9c <_vfiprintf_r+0x118>
 8001f0a:	1ba7      	subs	r7, r4, r6
 8001f0c:	42b4      	cmp	r4, r6
 8001f0e:	d00b      	beq.n	8001f28 <_vfiprintf_r+0xa4>
 8001f10:	003b      	movs	r3, r7
 8001f12:	0032      	movs	r2, r6
 8001f14:	0029      	movs	r1, r5
 8001f16:	9802      	ldr	r0, [sp, #8]
 8001f18:	f7ff ffa1 	bl	8001e5e <__sfputs_r>
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	d100      	bne.n	8001f22 <_vfiprintf_r+0x9e>
 8001f20:	e0ae      	b.n	8002080 <_vfiprintf_r+0x1fc>
 8001f22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001f24:	19db      	adds	r3, r3, r7
 8001f26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001f28:	7823      	ldrb	r3, [r4, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d100      	bne.n	8001f30 <_vfiprintf_r+0xac>
 8001f2e:	e0a7      	b.n	8002080 <_vfiprintf_r+0x1fc>
 8001f30:	2201      	movs	r2, #1
 8001f32:	2153      	movs	r1, #83	@ 0x53
 8001f34:	2300      	movs	r3, #0
 8001f36:	4252      	negs	r2, r2
 8001f38:	9207      	str	r2, [sp, #28]
 8001f3a:	aa02      	add	r2, sp, #8
 8001f3c:	1852      	adds	r2, r2, r1
 8001f3e:	1c66      	adds	r6, r4, #1
 8001f40:	9306      	str	r3, [sp, #24]
 8001f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f44:	9308      	str	r3, [sp, #32]
 8001f46:	7013      	strb	r3, [r2, #0]
 8001f48:	931c      	str	r3, [sp, #112]	@ 0x70
 8001f4a:	4f59      	ldr	r7, [pc, #356]	@ (80020b0 <_vfiprintf_r+0x22c>)
 8001f4c:	7831      	ldrb	r1, [r6, #0]
 8001f4e:	2205      	movs	r2, #5
 8001f50:	0038      	movs	r0, r7
 8001f52:	f000 fb97 	bl	8002684 <memchr>
 8001f56:	1c74      	adds	r4, r6, #1
 8001f58:	9906      	ldr	r1, [sp, #24]
 8001f5a:	ab06      	add	r3, sp, #24
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d11f      	bne.n	8001fa0 <_vfiprintf_r+0x11c>
 8001f60:	06ca      	lsls	r2, r1, #27
 8001f62:	d504      	bpl.n	8001f6e <_vfiprintf_r+0xea>
 8001f64:	2753      	movs	r7, #83	@ 0x53
 8001f66:	2220      	movs	r2, #32
 8001f68:	a802      	add	r0, sp, #8
 8001f6a:	19c0      	adds	r0, r0, r7
 8001f6c:	7002      	strb	r2, [r0, #0]
 8001f6e:	070a      	lsls	r2, r1, #28
 8001f70:	d504      	bpl.n	8001f7c <_vfiprintf_r+0xf8>
 8001f72:	2753      	movs	r7, #83	@ 0x53
 8001f74:	222b      	movs	r2, #43	@ 0x2b
 8001f76:	a802      	add	r0, sp, #8
 8001f78:	19c0      	adds	r0, r0, r7
 8001f7a:	7002      	strb	r2, [r0, #0]
 8001f7c:	7832      	ldrb	r2, [r6, #0]
 8001f7e:	2a2a      	cmp	r2, #42	@ 0x2a
 8001f80:	d015      	beq.n	8001fae <_vfiprintf_r+0x12a>
 8001f82:	0034      	movs	r4, r6
 8001f84:	2000      	movs	r0, #0
 8001f86:	270a      	movs	r7, #10
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	7821      	ldrb	r1, [r4, #0]
 8001f8c:	1c66      	adds	r6, r4, #1
 8001f8e:	3930      	subs	r1, #48	@ 0x30
 8001f90:	2909      	cmp	r1, #9
 8001f92:	d950      	bls.n	8002036 <_vfiprintf_r+0x1b2>
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d011      	beq.n	8001fbc <_vfiprintf_r+0x138>
 8001f98:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f9a:	e00f      	b.n	8001fbc <_vfiprintf_r+0x138>
 8001f9c:	3401      	adds	r4, #1
 8001f9e:	e7af      	b.n	8001f00 <_vfiprintf_r+0x7c>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	1bc0      	subs	r0, r0, r7
 8001fa4:	4083      	lsls	r3, r0
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	0026      	movs	r6, r4
 8001faa:	9306      	str	r3, [sp, #24]
 8001fac:	e7cd      	b.n	8001f4a <_vfiprintf_r+0xc6>
 8001fae:	9a05      	ldr	r2, [sp, #20]
 8001fb0:	1d10      	adds	r0, r2, #4
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	9005      	str	r0, [sp, #20]
 8001fb6:	2a00      	cmp	r2, #0
 8001fb8:	db37      	blt.n	800202a <_vfiprintf_r+0x1a6>
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	7822      	ldrb	r2, [r4, #0]
 8001fbe:	2a2e      	cmp	r2, #46	@ 0x2e
 8001fc0:	d10c      	bne.n	8001fdc <_vfiprintf_r+0x158>
 8001fc2:	7862      	ldrb	r2, [r4, #1]
 8001fc4:	2a2a      	cmp	r2, #42	@ 0x2a
 8001fc6:	d13b      	bne.n	8002040 <_vfiprintf_r+0x1bc>
 8001fc8:	9a05      	ldr	r2, [sp, #20]
 8001fca:	3402      	adds	r4, #2
 8001fcc:	1d11      	adds	r1, r2, #4
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	9105      	str	r1, [sp, #20]
 8001fd2:	2a00      	cmp	r2, #0
 8001fd4:	da01      	bge.n	8001fda <_vfiprintf_r+0x156>
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4252      	negs	r2, r2
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	4e35      	ldr	r6, [pc, #212]	@ (80020b4 <_vfiprintf_r+0x230>)
 8001fde:	2203      	movs	r2, #3
 8001fe0:	0030      	movs	r0, r6
 8001fe2:	7821      	ldrb	r1, [r4, #0]
 8001fe4:	f000 fb4e 	bl	8002684 <memchr>
 8001fe8:	af06      	add	r7, sp, #24
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d006      	beq.n	8001ffc <_vfiprintf_r+0x178>
 8001fee:	2340      	movs	r3, #64	@ 0x40
 8001ff0:	1b80      	subs	r0, r0, r6
 8001ff2:	4083      	lsls	r3, r0
 8001ff4:	9a06      	ldr	r2, [sp, #24]
 8001ff6:	3401      	adds	r4, #1
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	9306      	str	r3, [sp, #24]
 8001ffc:	7821      	ldrb	r1, [r4, #0]
 8001ffe:	2206      	movs	r2, #6
 8002000:	482d      	ldr	r0, [pc, #180]	@ (80020b8 <_vfiprintf_r+0x234>)
 8002002:	1c66      	adds	r6, r4, #1
 8002004:	7639      	strb	r1, [r7, #24]
 8002006:	f000 fb3d 	bl	8002684 <memchr>
 800200a:	2800      	cmp	r0, #0
 800200c:	d047      	beq.n	800209e <_vfiprintf_r+0x21a>
 800200e:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <_vfiprintf_r+0x238>)
 8002010:	2b00      	cmp	r3, #0
 8002012:	d129      	bne.n	8002068 <_vfiprintf_r+0x1e4>
 8002014:	2207      	movs	r2, #7
 8002016:	9b05      	ldr	r3, [sp, #20]
 8002018:	3307      	adds	r3, #7
 800201a:	4393      	bics	r3, r2
 800201c:	3308      	adds	r3, #8
 800201e:	9305      	str	r3, [sp, #20]
 8002020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002022:	9903      	ldr	r1, [sp, #12]
 8002024:	185b      	adds	r3, r3, r1
 8002026:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002028:	e769      	b.n	8001efe <_vfiprintf_r+0x7a>
 800202a:	4252      	negs	r2, r2
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	2202      	movs	r2, #2
 8002030:	430a      	orrs	r2, r1
 8002032:	9206      	str	r2, [sp, #24]
 8002034:	e7c2      	b.n	8001fbc <_vfiprintf_r+0x138>
 8002036:	437a      	muls	r2, r7
 8002038:	0034      	movs	r4, r6
 800203a:	2001      	movs	r0, #1
 800203c:	1852      	adds	r2, r2, r1
 800203e:	e7a4      	b.n	8001f8a <_vfiprintf_r+0x106>
 8002040:	2200      	movs	r2, #0
 8002042:	200a      	movs	r0, #10
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	0011      	movs	r1, r2
 8002048:	0013      	movs	r3, r2
 800204a:	3401      	adds	r4, #1
 800204c:	7822      	ldrb	r2, [r4, #0]
 800204e:	1c66      	adds	r6, r4, #1
 8002050:	3a30      	subs	r2, #48	@ 0x30
 8002052:	2a09      	cmp	r2, #9
 8002054:	d903      	bls.n	800205e <_vfiprintf_r+0x1da>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0c0      	beq.n	8001fdc <_vfiprintf_r+0x158>
 800205a:	9107      	str	r1, [sp, #28]
 800205c:	e7be      	b.n	8001fdc <_vfiprintf_r+0x158>
 800205e:	4341      	muls	r1, r0
 8002060:	0034      	movs	r4, r6
 8002062:	2301      	movs	r3, #1
 8002064:	1889      	adds	r1, r1, r2
 8002066:	e7f1      	b.n	800204c <_vfiprintf_r+0x1c8>
 8002068:	aa05      	add	r2, sp, #20
 800206a:	9200      	str	r2, [sp, #0]
 800206c:	0039      	movs	r1, r7
 800206e:	002a      	movs	r2, r5
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <_vfiprintf_r+0x23c>)
 8002072:	9802      	ldr	r0, [sp, #8]
 8002074:	e000      	b.n	8002078 <_vfiprintf_r+0x1f4>
 8002076:	bf00      	nop
 8002078:	9003      	str	r0, [sp, #12]
 800207a:	9b03      	ldr	r3, [sp, #12]
 800207c:	3301      	adds	r3, #1
 800207e:	d1cf      	bne.n	8002020 <_vfiprintf_r+0x19c>
 8002080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002082:	07db      	lsls	r3, r3, #31
 8002084:	d405      	bmi.n	8002092 <_vfiprintf_r+0x20e>
 8002086:	89ab      	ldrh	r3, [r5, #12]
 8002088:	059b      	lsls	r3, r3, #22
 800208a:	d402      	bmi.n	8002092 <_vfiprintf_r+0x20e>
 800208c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800208e:	f7ff fdd3 	bl	8001c38 <__retarget_lock_release_recursive>
 8002092:	89ab      	ldrh	r3, [r5, #12]
 8002094:	065b      	lsls	r3, r3, #25
 8002096:	d500      	bpl.n	800209a <_vfiprintf_r+0x216>
 8002098:	e719      	b.n	8001ece <_vfiprintf_r+0x4a>
 800209a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800209c:	e719      	b.n	8001ed2 <_vfiprintf_r+0x4e>
 800209e:	aa05      	add	r2, sp, #20
 80020a0:	9200      	str	r2, [sp, #0]
 80020a2:	0039      	movs	r1, r7
 80020a4:	002a      	movs	r2, r5
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <_vfiprintf_r+0x23c>)
 80020a8:	9802      	ldr	r0, [sp, #8]
 80020aa:	f000 f87b 	bl	80021a4 <_printf_i>
 80020ae:	e7e3      	b.n	8002078 <_vfiprintf_r+0x1f4>
 80020b0:	0800286c 	.word	0x0800286c
 80020b4:	08002872 	.word	0x08002872
 80020b8:	08002876 	.word	0x08002876
 80020bc:	00000000 	.word	0x00000000
 80020c0:	08001e5f 	.word	0x08001e5f

080020c4 <_printf_common>:
 80020c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020c6:	0016      	movs	r6, r2
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	688a      	ldr	r2, [r1, #8]
 80020cc:	690b      	ldr	r3, [r1, #16]
 80020ce:	000c      	movs	r4, r1
 80020d0:	9000      	str	r0, [sp, #0]
 80020d2:	4293      	cmp	r3, r2
 80020d4:	da00      	bge.n	80020d8 <_printf_common+0x14>
 80020d6:	0013      	movs	r3, r2
 80020d8:	0022      	movs	r2, r4
 80020da:	6033      	str	r3, [r6, #0]
 80020dc:	3243      	adds	r2, #67	@ 0x43
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	2a00      	cmp	r2, #0
 80020e2:	d001      	beq.n	80020e8 <_printf_common+0x24>
 80020e4:	3301      	adds	r3, #1
 80020e6:	6033      	str	r3, [r6, #0]
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	069b      	lsls	r3, r3, #26
 80020ec:	d502      	bpl.n	80020f4 <_printf_common+0x30>
 80020ee:	6833      	ldr	r3, [r6, #0]
 80020f0:	3302      	adds	r3, #2
 80020f2:	6033      	str	r3, [r6, #0]
 80020f4:	6822      	ldr	r2, [r4, #0]
 80020f6:	2306      	movs	r3, #6
 80020f8:	0015      	movs	r5, r2
 80020fa:	401d      	ands	r5, r3
 80020fc:	421a      	tst	r2, r3
 80020fe:	d027      	beq.n	8002150 <_printf_common+0x8c>
 8002100:	0023      	movs	r3, r4
 8002102:	3343      	adds	r3, #67	@ 0x43
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	4193      	sbcs	r3, r2
 800210a:	6822      	ldr	r2, [r4, #0]
 800210c:	0692      	lsls	r2, r2, #26
 800210e:	d430      	bmi.n	8002172 <_printf_common+0xae>
 8002110:	0022      	movs	r2, r4
 8002112:	9901      	ldr	r1, [sp, #4]
 8002114:	9800      	ldr	r0, [sp, #0]
 8002116:	9d08      	ldr	r5, [sp, #32]
 8002118:	3243      	adds	r2, #67	@ 0x43
 800211a:	47a8      	blx	r5
 800211c:	3001      	adds	r0, #1
 800211e:	d025      	beq.n	800216c <_printf_common+0xa8>
 8002120:	2206      	movs	r2, #6
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	2500      	movs	r5, #0
 8002126:	4013      	ands	r3, r2
 8002128:	2b04      	cmp	r3, #4
 800212a:	d105      	bne.n	8002138 <_printf_common+0x74>
 800212c:	6833      	ldr	r3, [r6, #0]
 800212e:	68e5      	ldr	r5, [r4, #12]
 8002130:	1aed      	subs	r5, r5, r3
 8002132:	43eb      	mvns	r3, r5
 8002134:	17db      	asrs	r3, r3, #31
 8002136:	401d      	ands	r5, r3
 8002138:	68a3      	ldr	r3, [r4, #8]
 800213a:	6922      	ldr	r2, [r4, #16]
 800213c:	4293      	cmp	r3, r2
 800213e:	dd01      	ble.n	8002144 <_printf_common+0x80>
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	18ed      	adds	r5, r5, r3
 8002144:	2600      	movs	r6, #0
 8002146:	42b5      	cmp	r5, r6
 8002148:	d120      	bne.n	800218c <_printf_common+0xc8>
 800214a:	2000      	movs	r0, #0
 800214c:	e010      	b.n	8002170 <_printf_common+0xac>
 800214e:	3501      	adds	r5, #1
 8002150:	68e3      	ldr	r3, [r4, #12]
 8002152:	6832      	ldr	r2, [r6, #0]
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	42ab      	cmp	r3, r5
 8002158:	ddd2      	ble.n	8002100 <_printf_common+0x3c>
 800215a:	0022      	movs	r2, r4
 800215c:	2301      	movs	r3, #1
 800215e:	9901      	ldr	r1, [sp, #4]
 8002160:	9800      	ldr	r0, [sp, #0]
 8002162:	9f08      	ldr	r7, [sp, #32]
 8002164:	3219      	adds	r2, #25
 8002166:	47b8      	blx	r7
 8002168:	3001      	adds	r0, #1
 800216a:	d1f0      	bne.n	800214e <_printf_common+0x8a>
 800216c:	2001      	movs	r0, #1
 800216e:	4240      	negs	r0, r0
 8002170:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002172:	2030      	movs	r0, #48	@ 0x30
 8002174:	18e1      	adds	r1, r4, r3
 8002176:	3143      	adds	r1, #67	@ 0x43
 8002178:	7008      	strb	r0, [r1, #0]
 800217a:	0021      	movs	r1, r4
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	3145      	adds	r1, #69	@ 0x45
 8002180:	7809      	ldrb	r1, [r1, #0]
 8002182:	18a2      	adds	r2, r4, r2
 8002184:	3243      	adds	r2, #67	@ 0x43
 8002186:	3302      	adds	r3, #2
 8002188:	7011      	strb	r1, [r2, #0]
 800218a:	e7c1      	b.n	8002110 <_printf_common+0x4c>
 800218c:	0022      	movs	r2, r4
 800218e:	2301      	movs	r3, #1
 8002190:	9901      	ldr	r1, [sp, #4]
 8002192:	9800      	ldr	r0, [sp, #0]
 8002194:	9f08      	ldr	r7, [sp, #32]
 8002196:	321a      	adds	r2, #26
 8002198:	47b8      	blx	r7
 800219a:	3001      	adds	r0, #1
 800219c:	d0e6      	beq.n	800216c <_printf_common+0xa8>
 800219e:	3601      	adds	r6, #1
 80021a0:	e7d1      	b.n	8002146 <_printf_common+0x82>
	...

080021a4 <_printf_i>:
 80021a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a6:	b08b      	sub	sp, #44	@ 0x2c
 80021a8:	9206      	str	r2, [sp, #24]
 80021aa:	000a      	movs	r2, r1
 80021ac:	3243      	adds	r2, #67	@ 0x43
 80021ae:	9307      	str	r3, [sp, #28]
 80021b0:	9005      	str	r0, [sp, #20]
 80021b2:	9203      	str	r2, [sp, #12]
 80021b4:	7e0a      	ldrb	r2, [r1, #24]
 80021b6:	000c      	movs	r4, r1
 80021b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80021ba:	2a78      	cmp	r2, #120	@ 0x78
 80021bc:	d809      	bhi.n	80021d2 <_printf_i+0x2e>
 80021be:	2a62      	cmp	r2, #98	@ 0x62
 80021c0:	d80b      	bhi.n	80021da <_printf_i+0x36>
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	d100      	bne.n	80021c8 <_printf_i+0x24>
 80021c6:	e0ba      	b.n	800233e <_printf_i+0x19a>
 80021c8:	497a      	ldr	r1, [pc, #488]	@ (80023b4 <_printf_i+0x210>)
 80021ca:	9104      	str	r1, [sp, #16]
 80021cc:	2a58      	cmp	r2, #88	@ 0x58
 80021ce:	d100      	bne.n	80021d2 <_printf_i+0x2e>
 80021d0:	e08e      	b.n	80022f0 <_printf_i+0x14c>
 80021d2:	0025      	movs	r5, r4
 80021d4:	3542      	adds	r5, #66	@ 0x42
 80021d6:	702a      	strb	r2, [r5, #0]
 80021d8:	e022      	b.n	8002220 <_printf_i+0x7c>
 80021da:	0010      	movs	r0, r2
 80021dc:	3863      	subs	r0, #99	@ 0x63
 80021de:	2815      	cmp	r0, #21
 80021e0:	d8f7      	bhi.n	80021d2 <_printf_i+0x2e>
 80021e2:	f7fd ff6d 	bl	80000c0 <__gnu_thumb1_case_shi>
 80021e6:	0016      	.short	0x0016
 80021e8:	fff6001f 	.word	0xfff6001f
 80021ec:	fff6fff6 	.word	0xfff6fff6
 80021f0:	001ffff6 	.word	0x001ffff6
 80021f4:	fff6fff6 	.word	0xfff6fff6
 80021f8:	fff6fff6 	.word	0xfff6fff6
 80021fc:	0036009f 	.word	0x0036009f
 8002200:	fff6007e 	.word	0xfff6007e
 8002204:	00b0fff6 	.word	0x00b0fff6
 8002208:	0036fff6 	.word	0x0036fff6
 800220c:	fff6fff6 	.word	0xfff6fff6
 8002210:	0082      	.short	0x0082
 8002212:	0025      	movs	r5, r4
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	3542      	adds	r5, #66	@ 0x42
 8002218:	1d11      	adds	r1, r2, #4
 800221a:	6019      	str	r1, [r3, #0]
 800221c:	6813      	ldr	r3, [r2, #0]
 800221e:	702b      	strb	r3, [r5, #0]
 8002220:	2301      	movs	r3, #1
 8002222:	e09e      	b.n	8002362 <_printf_i+0x1be>
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	6809      	ldr	r1, [r1, #0]
 8002228:	1d02      	adds	r2, r0, #4
 800222a:	060d      	lsls	r5, r1, #24
 800222c:	d50b      	bpl.n	8002246 <_printf_i+0xa2>
 800222e:	6806      	ldr	r6, [r0, #0]
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	2e00      	cmp	r6, #0
 8002234:	da03      	bge.n	800223e <_printf_i+0x9a>
 8002236:	232d      	movs	r3, #45	@ 0x2d
 8002238:	9a03      	ldr	r2, [sp, #12]
 800223a:	4276      	negs	r6, r6
 800223c:	7013      	strb	r3, [r2, #0]
 800223e:	4b5d      	ldr	r3, [pc, #372]	@ (80023b4 <_printf_i+0x210>)
 8002240:	270a      	movs	r7, #10
 8002242:	9304      	str	r3, [sp, #16]
 8002244:	e018      	b.n	8002278 <_printf_i+0xd4>
 8002246:	6806      	ldr	r6, [r0, #0]
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	0649      	lsls	r1, r1, #25
 800224c:	d5f1      	bpl.n	8002232 <_printf_i+0x8e>
 800224e:	b236      	sxth	r6, r6
 8002250:	e7ef      	b.n	8002232 <_printf_i+0x8e>
 8002252:	6808      	ldr	r0, [r1, #0]
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	c940      	ldmia	r1!, {r6}
 8002258:	0605      	lsls	r5, r0, #24
 800225a:	d402      	bmi.n	8002262 <_printf_i+0xbe>
 800225c:	0640      	lsls	r0, r0, #25
 800225e:	d500      	bpl.n	8002262 <_printf_i+0xbe>
 8002260:	b2b6      	uxth	r6, r6
 8002262:	6019      	str	r1, [r3, #0]
 8002264:	4b53      	ldr	r3, [pc, #332]	@ (80023b4 <_printf_i+0x210>)
 8002266:	270a      	movs	r7, #10
 8002268:	9304      	str	r3, [sp, #16]
 800226a:	2a6f      	cmp	r2, #111	@ 0x6f
 800226c:	d100      	bne.n	8002270 <_printf_i+0xcc>
 800226e:	3f02      	subs	r7, #2
 8002270:	0023      	movs	r3, r4
 8002272:	2200      	movs	r2, #0
 8002274:	3343      	adds	r3, #67	@ 0x43
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	6863      	ldr	r3, [r4, #4]
 800227a:	60a3      	str	r3, [r4, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db06      	blt.n	800228e <_printf_i+0xea>
 8002280:	2104      	movs	r1, #4
 8002282:	6822      	ldr	r2, [r4, #0]
 8002284:	9d03      	ldr	r5, [sp, #12]
 8002286:	438a      	bics	r2, r1
 8002288:	6022      	str	r2, [r4, #0]
 800228a:	4333      	orrs	r3, r6
 800228c:	d00c      	beq.n	80022a8 <_printf_i+0x104>
 800228e:	9d03      	ldr	r5, [sp, #12]
 8002290:	0030      	movs	r0, r6
 8002292:	0039      	movs	r1, r7
 8002294:	f7fd ffa4 	bl	80001e0 <__aeabi_uidivmod>
 8002298:	9b04      	ldr	r3, [sp, #16]
 800229a:	3d01      	subs	r5, #1
 800229c:	5c5b      	ldrb	r3, [r3, r1]
 800229e:	702b      	strb	r3, [r5, #0]
 80022a0:	0033      	movs	r3, r6
 80022a2:	0006      	movs	r6, r0
 80022a4:	429f      	cmp	r7, r3
 80022a6:	d9f3      	bls.n	8002290 <_printf_i+0xec>
 80022a8:	2f08      	cmp	r7, #8
 80022aa:	d109      	bne.n	80022c0 <_printf_i+0x11c>
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	07db      	lsls	r3, r3, #31
 80022b0:	d506      	bpl.n	80022c0 <_printf_i+0x11c>
 80022b2:	6862      	ldr	r2, [r4, #4]
 80022b4:	6923      	ldr	r3, [r4, #16]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	dc02      	bgt.n	80022c0 <_printf_i+0x11c>
 80022ba:	2330      	movs	r3, #48	@ 0x30
 80022bc:	3d01      	subs	r5, #1
 80022be:	702b      	strb	r3, [r5, #0]
 80022c0:	9b03      	ldr	r3, [sp, #12]
 80022c2:	1b5b      	subs	r3, r3, r5
 80022c4:	6123      	str	r3, [r4, #16]
 80022c6:	9b07      	ldr	r3, [sp, #28]
 80022c8:	0021      	movs	r1, r4
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	9805      	ldr	r0, [sp, #20]
 80022ce:	9b06      	ldr	r3, [sp, #24]
 80022d0:	aa09      	add	r2, sp, #36	@ 0x24
 80022d2:	f7ff fef7 	bl	80020c4 <_printf_common>
 80022d6:	3001      	adds	r0, #1
 80022d8:	d148      	bne.n	800236c <_printf_i+0x1c8>
 80022da:	2001      	movs	r0, #1
 80022dc:	4240      	negs	r0, r0
 80022de:	b00b      	add	sp, #44	@ 0x2c
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e2:	2220      	movs	r2, #32
 80022e4:	6809      	ldr	r1, [r1, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	6022      	str	r2, [r4, #0]
 80022ea:	2278      	movs	r2, #120	@ 0x78
 80022ec:	4932      	ldr	r1, [pc, #200]	@ (80023b8 <_printf_i+0x214>)
 80022ee:	9104      	str	r1, [sp, #16]
 80022f0:	0021      	movs	r1, r4
 80022f2:	3145      	adds	r1, #69	@ 0x45
 80022f4:	700a      	strb	r2, [r1, #0]
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	6822      	ldr	r2, [r4, #0]
 80022fa:	c940      	ldmia	r1!, {r6}
 80022fc:	0610      	lsls	r0, r2, #24
 80022fe:	d402      	bmi.n	8002306 <_printf_i+0x162>
 8002300:	0650      	lsls	r0, r2, #25
 8002302:	d500      	bpl.n	8002306 <_printf_i+0x162>
 8002304:	b2b6      	uxth	r6, r6
 8002306:	6019      	str	r1, [r3, #0]
 8002308:	07d3      	lsls	r3, r2, #31
 800230a:	d502      	bpl.n	8002312 <_printf_i+0x16e>
 800230c:	2320      	movs	r3, #32
 800230e:	4313      	orrs	r3, r2
 8002310:	6023      	str	r3, [r4, #0]
 8002312:	2e00      	cmp	r6, #0
 8002314:	d001      	beq.n	800231a <_printf_i+0x176>
 8002316:	2710      	movs	r7, #16
 8002318:	e7aa      	b.n	8002270 <_printf_i+0xcc>
 800231a:	2220      	movs	r2, #32
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	4393      	bics	r3, r2
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	e7f8      	b.n	8002316 <_printf_i+0x172>
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	680d      	ldr	r5, [r1, #0]
 8002328:	1d10      	adds	r0, r2, #4
 800232a:	6949      	ldr	r1, [r1, #20]
 800232c:	6018      	str	r0, [r3, #0]
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	062e      	lsls	r6, r5, #24
 8002332:	d501      	bpl.n	8002338 <_printf_i+0x194>
 8002334:	6019      	str	r1, [r3, #0]
 8002336:	e002      	b.n	800233e <_printf_i+0x19a>
 8002338:	066d      	lsls	r5, r5, #25
 800233a:	d5fb      	bpl.n	8002334 <_printf_i+0x190>
 800233c:	8019      	strh	r1, [r3, #0]
 800233e:	2300      	movs	r3, #0
 8002340:	9d03      	ldr	r5, [sp, #12]
 8002342:	6123      	str	r3, [r4, #16]
 8002344:	e7bf      	b.n	80022c6 <_printf_i+0x122>
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	1d11      	adds	r1, r2, #4
 800234a:	6019      	str	r1, [r3, #0]
 800234c:	6815      	ldr	r5, [r2, #0]
 800234e:	2100      	movs	r1, #0
 8002350:	0028      	movs	r0, r5
 8002352:	6862      	ldr	r2, [r4, #4]
 8002354:	f000 f996 	bl	8002684 <memchr>
 8002358:	2800      	cmp	r0, #0
 800235a:	d001      	beq.n	8002360 <_printf_i+0x1bc>
 800235c:	1b40      	subs	r0, r0, r5
 800235e:	6060      	str	r0, [r4, #4]
 8002360:	6863      	ldr	r3, [r4, #4]
 8002362:	6123      	str	r3, [r4, #16]
 8002364:	2300      	movs	r3, #0
 8002366:	9a03      	ldr	r2, [sp, #12]
 8002368:	7013      	strb	r3, [r2, #0]
 800236a:	e7ac      	b.n	80022c6 <_printf_i+0x122>
 800236c:	002a      	movs	r2, r5
 800236e:	6923      	ldr	r3, [r4, #16]
 8002370:	9906      	ldr	r1, [sp, #24]
 8002372:	9805      	ldr	r0, [sp, #20]
 8002374:	9d07      	ldr	r5, [sp, #28]
 8002376:	47a8      	blx	r5
 8002378:	3001      	adds	r0, #1
 800237a:	d0ae      	beq.n	80022da <_printf_i+0x136>
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	079b      	lsls	r3, r3, #30
 8002380:	d415      	bmi.n	80023ae <_printf_i+0x20a>
 8002382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002384:	68e0      	ldr	r0, [r4, #12]
 8002386:	4298      	cmp	r0, r3
 8002388:	daa9      	bge.n	80022de <_printf_i+0x13a>
 800238a:	0018      	movs	r0, r3
 800238c:	e7a7      	b.n	80022de <_printf_i+0x13a>
 800238e:	0022      	movs	r2, r4
 8002390:	2301      	movs	r3, #1
 8002392:	9906      	ldr	r1, [sp, #24]
 8002394:	9805      	ldr	r0, [sp, #20]
 8002396:	9e07      	ldr	r6, [sp, #28]
 8002398:	3219      	adds	r2, #25
 800239a:	47b0      	blx	r6
 800239c:	3001      	adds	r0, #1
 800239e:	d09c      	beq.n	80022da <_printf_i+0x136>
 80023a0:	3501      	adds	r5, #1
 80023a2:	68e3      	ldr	r3, [r4, #12]
 80023a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	42ab      	cmp	r3, r5
 80023aa:	dcf0      	bgt.n	800238e <_printf_i+0x1ea>
 80023ac:	e7e9      	b.n	8002382 <_printf_i+0x1de>
 80023ae:	2500      	movs	r5, #0
 80023b0:	e7f7      	b.n	80023a2 <_printf_i+0x1fe>
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	0800287d 	.word	0x0800287d
 80023b8:	0800288e 	.word	0x0800288e

080023bc <__sflush_r>:
 80023bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023be:	220c      	movs	r2, #12
 80023c0:	5e8b      	ldrsh	r3, [r1, r2]
 80023c2:	0005      	movs	r5, r0
 80023c4:	000c      	movs	r4, r1
 80023c6:	071a      	lsls	r2, r3, #28
 80023c8:	d45a      	bmi.n	8002480 <__sflush_r+0xc4>
 80023ca:	684a      	ldr	r2, [r1, #4]
 80023cc:	2a00      	cmp	r2, #0
 80023ce:	dc02      	bgt.n	80023d6 <__sflush_r+0x1a>
 80023d0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80023d2:	2a00      	cmp	r2, #0
 80023d4:	dd4f      	ble.n	8002476 <__sflush_r+0xba>
 80023d6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80023d8:	2f00      	cmp	r7, #0
 80023da:	d04c      	beq.n	8002476 <__sflush_r+0xba>
 80023dc:	2200      	movs	r2, #0
 80023de:	2180      	movs	r1, #128	@ 0x80
 80023e0:	682e      	ldr	r6, [r5, #0]
 80023e2:	602a      	str	r2, [r5, #0]
 80023e4:	001a      	movs	r2, r3
 80023e6:	0149      	lsls	r1, r1, #5
 80023e8:	400a      	ands	r2, r1
 80023ea:	420b      	tst	r3, r1
 80023ec:	d034      	beq.n	8002458 <__sflush_r+0x9c>
 80023ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023f0:	89a3      	ldrh	r3, [r4, #12]
 80023f2:	075b      	lsls	r3, r3, #29
 80023f4:	d506      	bpl.n	8002404 <__sflush_r+0x48>
 80023f6:	6863      	ldr	r3, [r4, #4]
 80023f8:	1ad2      	subs	r2, r2, r3
 80023fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <__sflush_r+0x48>
 8002400:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	2300      	movs	r3, #0
 8002406:	0028      	movs	r0, r5
 8002408:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800240a:	6a21      	ldr	r1, [r4, #32]
 800240c:	47b8      	blx	r7
 800240e:	230c      	movs	r3, #12
 8002410:	5ee2      	ldrsh	r2, [r4, r3]
 8002412:	1c43      	adds	r3, r0, #1
 8002414:	d106      	bne.n	8002424 <__sflush_r+0x68>
 8002416:	6829      	ldr	r1, [r5, #0]
 8002418:	291d      	cmp	r1, #29
 800241a:	d82e      	bhi.n	800247a <__sflush_r+0xbe>
 800241c:	4b2b      	ldr	r3, [pc, #172]	@ (80024cc <__sflush_r+0x110>)
 800241e:	40cb      	lsrs	r3, r1
 8002420:	07db      	lsls	r3, r3, #31
 8002422:	d52a      	bpl.n	800247a <__sflush_r+0xbe>
 8002424:	2300      	movs	r3, #0
 8002426:	6063      	str	r3, [r4, #4]
 8002428:	6923      	ldr	r3, [r4, #16]
 800242a:	6023      	str	r3, [r4, #0]
 800242c:	04d2      	lsls	r2, r2, #19
 800242e:	d505      	bpl.n	800243c <__sflush_r+0x80>
 8002430:	1c43      	adds	r3, r0, #1
 8002432:	d102      	bne.n	800243a <__sflush_r+0x7e>
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d100      	bne.n	800243c <__sflush_r+0x80>
 800243a:	6560      	str	r0, [r4, #84]	@ 0x54
 800243c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800243e:	602e      	str	r6, [r5, #0]
 8002440:	2900      	cmp	r1, #0
 8002442:	d018      	beq.n	8002476 <__sflush_r+0xba>
 8002444:	0023      	movs	r3, r4
 8002446:	3344      	adds	r3, #68	@ 0x44
 8002448:	4299      	cmp	r1, r3
 800244a:	d002      	beq.n	8002452 <__sflush_r+0x96>
 800244c:	0028      	movs	r0, r5
 800244e:	f7ff fbf5 	bl	8001c3c <_free_r>
 8002452:	2300      	movs	r3, #0
 8002454:	6363      	str	r3, [r4, #52]	@ 0x34
 8002456:	e00e      	b.n	8002476 <__sflush_r+0xba>
 8002458:	2301      	movs	r3, #1
 800245a:	0028      	movs	r0, r5
 800245c:	6a21      	ldr	r1, [r4, #32]
 800245e:	47b8      	blx	r7
 8002460:	0002      	movs	r2, r0
 8002462:	1c43      	adds	r3, r0, #1
 8002464:	d1c4      	bne.n	80023f0 <__sflush_r+0x34>
 8002466:	682b      	ldr	r3, [r5, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0c1      	beq.n	80023f0 <__sflush_r+0x34>
 800246c:	2b1d      	cmp	r3, #29
 800246e:	d001      	beq.n	8002474 <__sflush_r+0xb8>
 8002470:	2b16      	cmp	r3, #22
 8002472:	d11d      	bne.n	80024b0 <__sflush_r+0xf4>
 8002474:	602e      	str	r6, [r5, #0]
 8002476:	2000      	movs	r0, #0
 8002478:	e021      	b.n	80024be <__sflush_r+0x102>
 800247a:	2340      	movs	r3, #64	@ 0x40
 800247c:	4313      	orrs	r3, r2
 800247e:	e01b      	b.n	80024b8 <__sflush_r+0xfc>
 8002480:	690e      	ldr	r6, [r1, #16]
 8002482:	2e00      	cmp	r6, #0
 8002484:	d0f7      	beq.n	8002476 <__sflush_r+0xba>
 8002486:	680f      	ldr	r7, [r1, #0]
 8002488:	600e      	str	r6, [r1, #0]
 800248a:	1bba      	subs	r2, r7, r6
 800248c:	9201      	str	r2, [sp, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	079b      	lsls	r3, r3, #30
 8002492:	d100      	bne.n	8002496 <__sflush_r+0xda>
 8002494:	694a      	ldr	r2, [r1, #20]
 8002496:	60a2      	str	r2, [r4, #8]
 8002498:	9b01      	ldr	r3, [sp, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	ddeb      	ble.n	8002476 <__sflush_r+0xba>
 800249e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80024a0:	0032      	movs	r2, r6
 80024a2:	001f      	movs	r7, r3
 80024a4:	0028      	movs	r0, r5
 80024a6:	9b01      	ldr	r3, [sp, #4]
 80024a8:	6a21      	ldr	r1, [r4, #32]
 80024aa:	47b8      	blx	r7
 80024ac:	2800      	cmp	r0, #0
 80024ae:	dc07      	bgt.n	80024c0 <__sflush_r+0x104>
 80024b0:	2340      	movs	r3, #64	@ 0x40
 80024b2:	89a2      	ldrh	r2, [r4, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	2001      	movs	r0, #1
 80024ba:	81a3      	strh	r3, [r4, #12]
 80024bc:	4240      	negs	r0, r0
 80024be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024c0:	9b01      	ldr	r3, [sp, #4]
 80024c2:	1836      	adds	r6, r6, r0
 80024c4:	1a1b      	subs	r3, r3, r0
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	e7e6      	b.n	8002498 <__sflush_r+0xdc>
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	20400001 	.word	0x20400001

080024d0 <_fflush_r>:
 80024d0:	690b      	ldr	r3, [r1, #16]
 80024d2:	b570      	push	{r4, r5, r6, lr}
 80024d4:	0005      	movs	r5, r0
 80024d6:	000c      	movs	r4, r1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <_fflush_r+0x12>
 80024dc:	2500      	movs	r5, #0
 80024de:	0028      	movs	r0, r5
 80024e0:	bd70      	pop	{r4, r5, r6, pc}
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d004      	beq.n	80024f0 <_fflush_r+0x20>
 80024e6:	6a03      	ldr	r3, [r0, #32]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <_fflush_r+0x20>
 80024ec:	f7ff fa92 	bl	8001a14 <__sinit>
 80024f0:	220c      	movs	r2, #12
 80024f2:	5ea3      	ldrsh	r3, [r4, r2]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f1      	beq.n	80024dc <_fflush_r+0xc>
 80024f8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80024fa:	07d2      	lsls	r2, r2, #31
 80024fc:	d404      	bmi.n	8002508 <_fflush_r+0x38>
 80024fe:	059b      	lsls	r3, r3, #22
 8002500:	d402      	bmi.n	8002508 <_fflush_r+0x38>
 8002502:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002504:	f7ff fb97 	bl	8001c36 <__retarget_lock_acquire_recursive>
 8002508:	0028      	movs	r0, r5
 800250a:	0021      	movs	r1, r4
 800250c:	f7ff ff56 	bl	80023bc <__sflush_r>
 8002510:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002512:	0005      	movs	r5, r0
 8002514:	07db      	lsls	r3, r3, #31
 8002516:	d4e2      	bmi.n	80024de <_fflush_r+0xe>
 8002518:	89a3      	ldrh	r3, [r4, #12]
 800251a:	059b      	lsls	r3, r3, #22
 800251c:	d4df      	bmi.n	80024de <_fflush_r+0xe>
 800251e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002520:	f7ff fb8a 	bl	8001c38 <__retarget_lock_release_recursive>
 8002524:	e7db      	b.n	80024de <_fflush_r+0xe>

08002526 <__swbuf_r>:
 8002526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002528:	0006      	movs	r6, r0
 800252a:	000d      	movs	r5, r1
 800252c:	0014      	movs	r4, r2
 800252e:	2800      	cmp	r0, #0
 8002530:	d004      	beq.n	800253c <__swbuf_r+0x16>
 8002532:	6a03      	ldr	r3, [r0, #32]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <__swbuf_r+0x16>
 8002538:	f7ff fa6c 	bl	8001a14 <__sinit>
 800253c:	69a3      	ldr	r3, [r4, #24]
 800253e:	60a3      	str	r3, [r4, #8]
 8002540:	89a3      	ldrh	r3, [r4, #12]
 8002542:	071b      	lsls	r3, r3, #28
 8002544:	d502      	bpl.n	800254c <__swbuf_r+0x26>
 8002546:	6923      	ldr	r3, [r4, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <__swbuf_r+0x3a>
 800254c:	0021      	movs	r1, r4
 800254e:	0030      	movs	r0, r6
 8002550:	f000 f82c 	bl	80025ac <__swsetup_r>
 8002554:	2800      	cmp	r0, #0
 8002556:	d003      	beq.n	8002560 <__swbuf_r+0x3a>
 8002558:	2501      	movs	r5, #1
 800255a:	426d      	negs	r5, r5
 800255c:	0028      	movs	r0, r5
 800255e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002560:	6923      	ldr	r3, [r4, #16]
 8002562:	6820      	ldr	r0, [r4, #0]
 8002564:	b2ef      	uxtb	r7, r5
 8002566:	1ac0      	subs	r0, r0, r3
 8002568:	6963      	ldr	r3, [r4, #20]
 800256a:	b2ed      	uxtb	r5, r5
 800256c:	4283      	cmp	r3, r0
 800256e:	dc05      	bgt.n	800257c <__swbuf_r+0x56>
 8002570:	0021      	movs	r1, r4
 8002572:	0030      	movs	r0, r6
 8002574:	f7ff ffac 	bl	80024d0 <_fflush_r>
 8002578:	2800      	cmp	r0, #0
 800257a:	d1ed      	bne.n	8002558 <__swbuf_r+0x32>
 800257c:	68a3      	ldr	r3, [r4, #8]
 800257e:	3001      	adds	r0, #1
 8002580:	3b01      	subs	r3, #1
 8002582:	60a3      	str	r3, [r4, #8]
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	6022      	str	r2, [r4, #0]
 800258a:	701f      	strb	r7, [r3, #0]
 800258c:	6963      	ldr	r3, [r4, #20]
 800258e:	4283      	cmp	r3, r0
 8002590:	d004      	beq.n	800259c <__swbuf_r+0x76>
 8002592:	89a3      	ldrh	r3, [r4, #12]
 8002594:	07db      	lsls	r3, r3, #31
 8002596:	d5e1      	bpl.n	800255c <__swbuf_r+0x36>
 8002598:	2d0a      	cmp	r5, #10
 800259a:	d1df      	bne.n	800255c <__swbuf_r+0x36>
 800259c:	0021      	movs	r1, r4
 800259e:	0030      	movs	r0, r6
 80025a0:	f7ff ff96 	bl	80024d0 <_fflush_r>
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d0d9      	beq.n	800255c <__swbuf_r+0x36>
 80025a8:	e7d6      	b.n	8002558 <__swbuf_r+0x32>
	...

080025ac <__swsetup_r>:
 80025ac:	4b2b      	ldr	r3, [pc, #172]	@ (800265c <__swsetup_r+0xb0>)
 80025ae:	b570      	push	{r4, r5, r6, lr}
 80025b0:	0005      	movs	r5, r0
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	000c      	movs	r4, r1
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d004      	beq.n	80025c4 <__swsetup_r+0x18>
 80025ba:	6a03      	ldr	r3, [r0, #32]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <__swsetup_r+0x18>
 80025c0:	f7ff fa28 	bl	8001a14 <__sinit>
 80025c4:	220c      	movs	r2, #12
 80025c6:	5ea3      	ldrsh	r3, [r4, r2]
 80025c8:	071a      	lsls	r2, r3, #28
 80025ca:	d422      	bmi.n	8002612 <__swsetup_r+0x66>
 80025cc:	06da      	lsls	r2, r3, #27
 80025ce:	d407      	bmi.n	80025e0 <__swsetup_r+0x34>
 80025d0:	2209      	movs	r2, #9
 80025d2:	602a      	str	r2, [r5, #0]
 80025d4:	3237      	adds	r2, #55	@ 0x37
 80025d6:	2001      	movs	r0, #1
 80025d8:	4313      	orrs	r3, r2
 80025da:	81a3      	strh	r3, [r4, #12]
 80025dc:	4240      	negs	r0, r0
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	075a      	lsls	r2, r3, #29
 80025e2:	d513      	bpl.n	800260c <__swsetup_r+0x60>
 80025e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80025e6:	2900      	cmp	r1, #0
 80025e8:	d008      	beq.n	80025fc <__swsetup_r+0x50>
 80025ea:	0023      	movs	r3, r4
 80025ec:	3344      	adds	r3, #68	@ 0x44
 80025ee:	4299      	cmp	r1, r3
 80025f0:	d002      	beq.n	80025f8 <__swsetup_r+0x4c>
 80025f2:	0028      	movs	r0, r5
 80025f4:	f7ff fb22 	bl	8001c3c <_free_r>
 80025f8:	2300      	movs	r3, #0
 80025fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80025fc:	2224      	movs	r2, #36	@ 0x24
 80025fe:	89a3      	ldrh	r3, [r4, #12]
 8002600:	4393      	bics	r3, r2
 8002602:	2200      	movs	r2, #0
 8002604:	6062      	str	r2, [r4, #4]
 8002606:	6922      	ldr	r2, [r4, #16]
 8002608:	b21b      	sxth	r3, r3
 800260a:	6022      	str	r2, [r4, #0]
 800260c:	2208      	movs	r2, #8
 800260e:	4313      	orrs	r3, r2
 8002610:	81a3      	strh	r3, [r4, #12]
 8002612:	6922      	ldr	r2, [r4, #16]
 8002614:	2a00      	cmp	r2, #0
 8002616:	d107      	bne.n	8002628 <__swsetup_r+0x7c>
 8002618:	059a      	lsls	r2, r3, #22
 800261a:	d501      	bpl.n	8002620 <__swsetup_r+0x74>
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	d503      	bpl.n	8002628 <__swsetup_r+0x7c>
 8002620:	0021      	movs	r1, r4
 8002622:	0028      	movs	r0, r5
 8002624:	f000 f864 	bl	80026f0 <__smakebuf_r>
 8002628:	230c      	movs	r3, #12
 800262a:	5ee2      	ldrsh	r2, [r4, r3]
 800262c:	2101      	movs	r1, #1
 800262e:	0013      	movs	r3, r2
 8002630:	400b      	ands	r3, r1
 8002632:	420a      	tst	r2, r1
 8002634:	d00c      	beq.n	8002650 <__swsetup_r+0xa4>
 8002636:	2300      	movs	r3, #0
 8002638:	60a3      	str	r3, [r4, #8]
 800263a:	6963      	ldr	r3, [r4, #20]
 800263c:	425b      	negs	r3, r3
 800263e:	61a3      	str	r3, [r4, #24]
 8002640:	2000      	movs	r0, #0
 8002642:	6923      	ldr	r3, [r4, #16]
 8002644:	4283      	cmp	r3, r0
 8002646:	d1ca      	bne.n	80025de <__swsetup_r+0x32>
 8002648:	0613      	lsls	r3, r2, #24
 800264a:	d5c8      	bpl.n	80025de <__swsetup_r+0x32>
 800264c:	2340      	movs	r3, #64	@ 0x40
 800264e:	e7c2      	b.n	80025d6 <__swsetup_r+0x2a>
 8002650:	0791      	lsls	r1, r2, #30
 8002652:	d400      	bmi.n	8002656 <__swsetup_r+0xaa>
 8002654:	6963      	ldr	r3, [r4, #20]
 8002656:	60a3      	str	r3, [r4, #8]
 8002658:	e7f2      	b.n	8002640 <__swsetup_r+0x94>
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	20000018 	.word	0x20000018

08002660 <_sbrk_r>:
 8002660:	2300      	movs	r3, #0
 8002662:	b570      	push	{r4, r5, r6, lr}
 8002664:	4d06      	ldr	r5, [pc, #24]	@ (8002680 <_sbrk_r+0x20>)
 8002666:	0004      	movs	r4, r0
 8002668:	0008      	movs	r0, r1
 800266a:	602b      	str	r3, [r5, #0]
 800266c:	f7ff f872 	bl	8001754 <_sbrk>
 8002670:	1c43      	adds	r3, r0, #1
 8002672:	d103      	bne.n	800267c <_sbrk_r+0x1c>
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d000      	beq.n	800267c <_sbrk_r+0x1c>
 800267a:	6023      	str	r3, [r4, #0]
 800267c:	bd70      	pop	{r4, r5, r6, pc}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	2000025c 	.word	0x2000025c

08002684 <memchr>:
 8002684:	b2c9      	uxtb	r1, r1
 8002686:	1882      	adds	r2, r0, r2
 8002688:	4290      	cmp	r0, r2
 800268a:	d101      	bne.n	8002690 <memchr+0xc>
 800268c:	2000      	movs	r0, #0
 800268e:	4770      	bx	lr
 8002690:	7803      	ldrb	r3, [r0, #0]
 8002692:	428b      	cmp	r3, r1
 8002694:	d0fb      	beq.n	800268e <memchr+0xa>
 8002696:	3001      	adds	r0, #1
 8002698:	e7f6      	b.n	8002688 <memchr+0x4>
	...

0800269c <__swhatbuf_r>:
 800269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269e:	000e      	movs	r6, r1
 80026a0:	001d      	movs	r5, r3
 80026a2:	230e      	movs	r3, #14
 80026a4:	5ec9      	ldrsh	r1, [r1, r3]
 80026a6:	0014      	movs	r4, r2
 80026a8:	b097      	sub	sp, #92	@ 0x5c
 80026aa:	2900      	cmp	r1, #0
 80026ac:	da0c      	bge.n	80026c8 <__swhatbuf_r+0x2c>
 80026ae:	89b2      	ldrh	r2, [r6, #12]
 80026b0:	2380      	movs	r3, #128	@ 0x80
 80026b2:	0011      	movs	r1, r2
 80026b4:	4019      	ands	r1, r3
 80026b6:	421a      	tst	r2, r3
 80026b8:	d114      	bne.n	80026e4 <__swhatbuf_r+0x48>
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	2000      	movs	r0, #0
 80026c0:	6029      	str	r1, [r5, #0]
 80026c2:	6023      	str	r3, [r4, #0]
 80026c4:	b017      	add	sp, #92	@ 0x5c
 80026c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c8:	466a      	mov	r2, sp
 80026ca:	f000 f84b 	bl	8002764 <_fstat_r>
 80026ce:	2800      	cmp	r0, #0
 80026d0:	dbed      	blt.n	80026ae <__swhatbuf_r+0x12>
 80026d2:	23f0      	movs	r3, #240	@ 0xf0
 80026d4:	9901      	ldr	r1, [sp, #4]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	4019      	ands	r1, r3
 80026da:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <__swhatbuf_r+0x50>)
 80026dc:	18c9      	adds	r1, r1, r3
 80026de:	424b      	negs	r3, r1
 80026e0:	4159      	adcs	r1, r3
 80026e2:	e7ea      	b.n	80026ba <__swhatbuf_r+0x1e>
 80026e4:	2100      	movs	r1, #0
 80026e6:	2340      	movs	r3, #64	@ 0x40
 80026e8:	e7e9      	b.n	80026be <__swhatbuf_r+0x22>
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	ffffe000 	.word	0xffffe000

080026f0 <__smakebuf_r>:
 80026f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026f2:	2602      	movs	r6, #2
 80026f4:	898b      	ldrh	r3, [r1, #12]
 80026f6:	0005      	movs	r5, r0
 80026f8:	000c      	movs	r4, r1
 80026fa:	4233      	tst	r3, r6
 80026fc:	d006      	beq.n	800270c <__smakebuf_r+0x1c>
 80026fe:	0023      	movs	r3, r4
 8002700:	3347      	adds	r3, #71	@ 0x47
 8002702:	6023      	str	r3, [r4, #0]
 8002704:	6123      	str	r3, [r4, #16]
 8002706:	2301      	movs	r3, #1
 8002708:	6163      	str	r3, [r4, #20]
 800270a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800270c:	466a      	mov	r2, sp
 800270e:	ab01      	add	r3, sp, #4
 8002710:	f7ff ffc4 	bl	800269c <__swhatbuf_r>
 8002714:	9f00      	ldr	r7, [sp, #0]
 8002716:	0028      	movs	r0, r5
 8002718:	0039      	movs	r1, r7
 800271a:	f7ff fafb 	bl	8001d14 <_malloc_r>
 800271e:	220c      	movs	r2, #12
 8002720:	5ea3      	ldrsh	r3, [r4, r2]
 8002722:	2800      	cmp	r0, #0
 8002724:	d106      	bne.n	8002734 <__smakebuf_r+0x44>
 8002726:	059a      	lsls	r2, r3, #22
 8002728:	d4ef      	bmi.n	800270a <__smakebuf_r+0x1a>
 800272a:	2203      	movs	r2, #3
 800272c:	4393      	bics	r3, r2
 800272e:	431e      	orrs	r6, r3
 8002730:	81a6      	strh	r6, [r4, #12]
 8002732:	e7e4      	b.n	80026fe <__smakebuf_r+0xe>
 8002734:	2280      	movs	r2, #128	@ 0x80
 8002736:	4313      	orrs	r3, r2
 8002738:	81a3      	strh	r3, [r4, #12]
 800273a:	9b01      	ldr	r3, [sp, #4]
 800273c:	6020      	str	r0, [r4, #0]
 800273e:	6120      	str	r0, [r4, #16]
 8002740:	6167      	str	r7, [r4, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0e1      	beq.n	800270a <__smakebuf_r+0x1a>
 8002746:	0028      	movs	r0, r5
 8002748:	230e      	movs	r3, #14
 800274a:	5ee1      	ldrsh	r1, [r4, r3]
 800274c:	f000 f81c 	bl	8002788 <_isatty_r>
 8002750:	2800      	cmp	r0, #0
 8002752:	d0da      	beq.n	800270a <__smakebuf_r+0x1a>
 8002754:	2303      	movs	r3, #3
 8002756:	89a2      	ldrh	r2, [r4, #12]
 8002758:	439a      	bics	r2, r3
 800275a:	3b02      	subs	r3, #2
 800275c:	4313      	orrs	r3, r2
 800275e:	81a3      	strh	r3, [r4, #12]
 8002760:	e7d3      	b.n	800270a <__smakebuf_r+0x1a>
	...

08002764 <_fstat_r>:
 8002764:	2300      	movs	r3, #0
 8002766:	b570      	push	{r4, r5, r6, lr}
 8002768:	4d06      	ldr	r5, [pc, #24]	@ (8002784 <_fstat_r+0x20>)
 800276a:	0004      	movs	r4, r0
 800276c:	0008      	movs	r0, r1
 800276e:	0011      	movs	r1, r2
 8002770:	602b      	str	r3, [r5, #0]
 8002772:	f7fe ffe5 	bl	8001740 <_fstat>
 8002776:	1c43      	adds	r3, r0, #1
 8002778:	d103      	bne.n	8002782 <_fstat_r+0x1e>
 800277a:	682b      	ldr	r3, [r5, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d000      	beq.n	8002782 <_fstat_r+0x1e>
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	2000025c 	.word	0x2000025c

08002788 <_isatty_r>:
 8002788:	2300      	movs	r3, #0
 800278a:	b570      	push	{r4, r5, r6, lr}
 800278c:	4d06      	ldr	r5, [pc, #24]	@ (80027a8 <_isatty_r+0x20>)
 800278e:	0004      	movs	r4, r0
 8002790:	0008      	movs	r0, r1
 8002792:	602b      	str	r3, [r5, #0]
 8002794:	f7fe ffd9 	bl	800174a <_isatty>
 8002798:	1c43      	adds	r3, r0, #1
 800279a:	d103      	bne.n	80027a4 <_isatty_r+0x1c>
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d000      	beq.n	80027a4 <_isatty_r+0x1c>
 80027a2:	6023      	str	r3, [r4, #0]
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	2000025c 	.word	0x2000025c

080027ac <_init>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	46c0      	nop			@ (mov r8, r8)
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr

080027b8 <_fini>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	46c0      	nop			@ (mov r8, r8)
 80027bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027be:	bc08      	pop	{r3}
 80027c0:	469e      	mov	lr, r3
 80027c2:	4770      	bx	lr
